<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quartz</name>
    </assembly>
    <members>
        <member name="T:Quartz.UnableToInterruptJobException">
            <summary>
            An exception that is thrown to indicate that a call to 
            InterruptableJob.interrupt() failed without interrupting the Job.
            </summary>
            <seealso cref="T:Quartz.IInterruptableJob"/>
            <author>James House</author>
        </member>
        <member name="T:Quartz.SchedulerException">
            <summary> <p>
            Base class for exceptions thrown by the Quartz <code>{@link Scheduler}</code>.
            </p>
            
            <p>
            <code>SchedulerException</code> s may contain a reference to another
            <code>Exception</code>, which was the underlying cause of the <code>SchedulerException</code>.
            </p>
            
            </summary>
            <author>  James House
            </author>
        </member>
        <member name="P:Quartz.SchedulerException.UnderlyingException">
            <summary>
            Return the exception that is the underlying cause of this exception.
            This may be used to find more detail about the cause of the error.
            </summary>
            <returns> The underlying exception, or <code>null</code> if there is not
            one.
            </returns>
        </member>
        <member name="P:Quartz.SchedulerException.ErrorCode">
            <summary>
            Get the error code associated with this exception.
            This may be used to find more detail about the cause of the error.
            </summary>
            <returns> 
            One of the ERR_XXX constants defined in this class.
            </returns>
        </member>
        <member name="P:Quartz.SchedulerException.PersistenceError">
            <summary> <p>
            Determine if the specified error code is in the <code>'ERR_PERSISTENCE'</code>
            category of errors.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerException.ThreadPoolError">
            <summary> <p>
            Determine if the specified error code is in the <code>'ERR_THREAD_POOL'</code>
            category of errors.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerException.JobListenerError">
            <summary> <p>
            Determine if the specified error code is in the <code>'ERR_JOB_LISTENER'</code>
            category of errors.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerException.TriggerListenerError">
            <summary> <p>
            Determine if the specified error code is in the <code>'ERR_TRIGGER_LISTENER'</code>
            category of errors.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerException.ClientError">
            <summary> <p>
            Determine if the specified error code is in the <code>'ERR_CLIENT_ERROR'</code>
            category of errors.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerException.ConfigurationError">
            <summary> <p>
            Determine if the specified error code is in the <code>'ERR_CLIENT_ERROR'</code>
            category of errors.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.UnableToInterruptJobException.#ctor(System.String)">
            <summary>
            Create a <code>UnableToInterruptJobException</code> with the given message.
            </summary>
        </member>
        <member name="M:Quartz.UnableToInterruptJobException.#ctor(System.Exception)">
            <summary>
            Create a <code>UnableToInterruptJobException</code> with the given cause.
            </summary>
        </member>
        <member name="T:Quartz.Spi.ISchedulerPlugin">
            <summary> <p>
            Provides an interface for a class to become a "plugin" to Quartz.
            </p>
            
            <p>
            Plugins can do virtually anything you wish, though the most interesting ones
            will obviously interact with the scheduler in some way - either actively: by
            invoking actions on the scheduler, or passively: by being a <code>JobListener</code>,
            <code>TriggerListener</code>, and/or <code>SchedulerListener</code>.
            </p>
            
            <p>
            If you use <code>{@link org.quartz.impl.StdSchedulerFactory}</code> to
            initialize your Scheduler, it can also create and initialize your plugins -
            look at the configuration docs for details.
            </p>
            
            </summary>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.Spi.ISchedulerPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary> <p>
            Called during creation of the <code>Scheduler</code> in order to give
            the <code>SchedulerPlugin</code> a chance to initialize.
            </p>
            
            <p>
            At this point, the Scheduler's <code>JobStore</code> is not yet
            initialized.
            </p>
            
            </summary>
            <param name="pluginName">
            The name by which the plugin is identified.
            </param>
            <param name="sched">
            The scheduler to which the plugin is registered.
            
            </param>
            <throws>  SchedulerConfigException </throws>
            <summary>           if there is an error initializing.
            </summary>
        </member>
        <member name="M:Quartz.Spi.ISchedulerPlugin.Start">
            <summary> <p>
            Called when the associated <code>Scheduler</code> is started, in order
            to let the plug-in know it can now make calls into the scheduler if it
            needs to.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.ISchedulerPlugin.Shutdown">
            <summary> <p>
            Called in order to inform the <code>SchedulerPlugin</code> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Simpl.RAMJobStore">
            <summary>
            This class implements a <code>IJobStore</code> that
            utilizes RAM as its storage device.
            <p>
            As you should know, the ramification of this is that access is extrememly
            fast, but the data is completely volatile - therefore this <code>JobStore</code>
            should not be used if true persistence between program shutdowns is
            required.
            </p>
            </summary>
            <author>James House</author>
            <author>Sharada Jambula</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Spi.IJobStore">
            <summary> <p>
            The interface to be implemented by classes that want to provide a <code>{@link org.quartz.Job}</code>
            and <code>{@link org.quartz.Trigger}</code> storage mechanism for the
            <code>{@link org.quartz.core.QuartzScheduler}</code>'s use.
            </p>
            
            <p>
            Storage of <code>Job</code> s and <code>Trigger</code> s should be keyed
            on the combination of their name and group for uniqueness.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler">
            </seealso>
            <seealso cref="T:Quartz.Trigger">
            </seealso>
            <seealso cref="T:Quartz.IJob">
            </seealso>
            <seealso cref="T:Quartz.JobDetail">
            </seealso>
            <seealso cref="T:Quartz.JobDataMap">
            </seealso>
            <seealso cref="T:Quartz.ICalendar">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.Spi.IJobStore.Initialize(Quartz.Spi.IClassLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary> <p>
            Called by the QuartzScheduler before the <code>JobStore</code> is
            used, in order to give the it a chance to initialize.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.SchedulerStarted">
            <summary> <p>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has started.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.Shutdown">
            <summary> <p>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            it should free up all of it's resources because the scheduler is
            shutting down.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreJobAndTrigger(Quartz.Core.SchedulingContext,Quartz.JobDetail,Quartz.Trigger)">
            <summary> <p>
            Store the given <code>{@link org.quartz.JobDetail}</code> and <code>{@link org.quartz.Trigger}</code>.
            </p>
            
            </summary>
            <param name="newJob">
            The <code>JobDetail</code> to be stored.
            </param>
            <param name="newTrigger">
            The <code>Trigger</code> to be stored.
            </param>
            <throws>  ObjectAlreadyExistsException </throws>
            <summary>           if a <code>Job</code> with the same name/group already
            exists.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreJob(Quartz.Core.SchedulingContext,Quartz.JobDetail,System.Boolean)">
            <summary> <p>
            Store the given <code>{@link org.quartz.JobDetail}</code>.
            </p>
            
            </summary>
            <param name="newJob">
            The <code>JobDetail</code> to be stored.
            </param>
            <param name="replaceExisting">
            If <code>true</code>, any <code>Job</code> existing in the
            <code>JobStore</code> with the same name and group should be
            over-written.
            </param>
            <throws>  ObjectAlreadyExistsException </throws>
            <summary>           if a <code>Job</code> with the same name/group already
            exists, and replaceExisting is set to false.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RemoveJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Remove (delete) the <code>{@link org.quartz.Job}</code> with the given
            name, and any <code>{@link org.quartz.Trigger}</code> s that reference
            it.
            </p>
            
            <p>
            If removal of the <code>Job</code> results in an empty group, the
            group should be removed from the <code>JobStore</code>'s list of
            known group names.
            </p>
            
            </summary>
            <param name="jobName">
            The name of the <code>Job</code> to be removed.
            </param>
            <param name="groupName">
            The group name of the <code>Job</code> to be removed.
            </param>
            <returns> <code>true</code> if a <code>Job</code> with the given name and
            group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RetrieveJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Retrieve the <code>{@link org.quartz.JobDetail}</code> for the given
            <code>{@link org.quartz.Job}</code>.
            </p>
            
            </summary>
            <param name="jobName">
            The name of the <code>Job</code> to be retrieved.
            </param>
            <param name="groupName">
            The group name of the <code>Job</code> to be retrieved.
            </param>
            <returns> The desired <code>Job</code>, or null if there is no match.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreTrigger(Quartz.Core.SchedulingContext,Quartz.Trigger,System.Boolean)">
            <summary> <p>
            Store the given <code>{@link org.quartz.Trigger}</code>.
            </p>
            
            </summary>
            <param name="newTrigger">
            The <code>Trigger</code> to be stored.
            </param>
            <param name="replaceExisting">
            If <code>true</code>, any <code>Trigger</code> existing in
            the <code>JobStore</code> with the same name and group should
            be over-written.
            </param>
            <throws>  ObjectAlreadyExistsException </throws>
            <summary>           if a <code>Trigger</code> with the same name/group already
            exists, and replaceExisting is set to false.
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RemoveTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Remove (delete) the <code>{@link org.quartz.Trigger}</code> with the
            given name.
            </p>
            
            <p>
            If removal of the <code>Trigger</code> results in an empty group, the
            group should be removed from the <code>JobStore</code>'s list of
            known group names.
            </p>
            
            <p>
            If removal of the <code>Trigger</code> results in an 'orphaned' <code>Job</code>
            that is not 'durable', then the <code>Job</code> should be deleted
            also.
            </p>
            
            </summary>
            <param name="triggerName">
            The name of the <code>Trigger</code> to be removed.
            </param>
            <param name="groupName">
            The group name of the <code>Trigger</code> to be removed.
            </param>
            <returns> <code>true</code> if a <code>Trigger</code> with the given
            name and group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ReplaceTrigger(Quartz.Core.SchedulingContext,System.String,System.String,Quartz.Trigger)">
            <summary> <p>
            Remove (delete) the <code>{@link org.quartz.Trigger}</code> with the
            given name, and store the new given one - which must be associated
            with the same job.
            </p>
            
            </summary>
            <param name="triggerName">
            The name of the <code>Trigger</code> to be removed.
            </param>
            <param name="groupName">
            The group name of the <code>Trigger</code> to be removed.
            </param>
            <param name="newTrigger">
            The new <code>Trigger</code> to be stored.
            </param>
            <returns> <code>true</code> if a <code>Trigger</code> with the given
            name and group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RetrieveTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Retrieve the given <code>{@link org.quartz.Trigger}</code>.
            </p>
            
            </summary>
            <param name="triggerName">
            The name of the <code>Trigger</code> to be retrieved.
            </param>
            <param name="groupName">
            The group name of the <code>Trigger</code> to be retrieved.
            </param>
            <returns> The desired <code>Trigger</code>, or null if there is no
            match.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreCalendar(Quartz.Core.SchedulingContext,System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary> <p>
            Store the given <code>{@link org.quartz.Calendar}</code>.
            </p>
            
            </summary>
            <param name="calendar">
            The <code>Calendar</code> to be stored.
            </param>
            <param name="replaceExisting">
            If <code>true</code>, any <code>Calendar</code> existing
            in the <code>JobStore</code> with the same name and group
            should be over-written.
            </param>
            <param name="updateTriggers">
            If <code>true</code>, any <code>Trigger</code>s existing
            in the <code>JobStore</code> that reference an existing 
            Calendar with the same name with have their next fire time
            re-computed with the new <code>Calendar</code>.
            </param>
            <throws>  ObjectAlreadyExistsException </throws>
            <summary>           if a <code>Calendar</code> with the same name already
            exists, and replaceExisting is set to false.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RemoveCalendar(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Remove (delete) the <code>ICalendar</code> with the
            given name.
            <p>
            If removal of the <code>Calendar</code> would result in
            <code>Trigger</code>s pointing to non-existent calendars, then a
            <code>JobPersistenceException</code> will be thrown.</p>
            *
            </summary>
            <param name="calName">The name of the <code>Calendar</code> to be removed.
            </param>
            <returns> <code>true</code> if a <code>Calendar</code> with the given name
            was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RetrieveCalendar(Quartz.Core.SchedulingContext,System.String)">
            <summary> <p>
            Retrieve the given <code>{@link org.quartz.Trigger}</code>.
            </p>
            
            </summary>
            <param name="calName">
            The name of the <code>Calendar</code> to be retrieved.
            </param>
            <returns> The desired <code>Calendar</code>, or null if there is no
            match.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetNumberOfJobs(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Get the number of <code>{@link org.quartz.Job}</code> s that are
            stored in the <code>JobsStore</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetNumberOfTriggers(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Get the number of <code>{@link org.quartz.Trigger}</code> s that are
            stored in the <code>JobsStore</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetNumberOfCalendars(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Get the number of <code>{@link org.quartz.Calendar}</code> s that are
            stored in the <code>JobsStore</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetJobNames(Quartz.Core.SchedulingContext,System.String)">
            <summary> <p>
            Get the names of all of the <code>{@link org.quartz.Job}</code> s that
            have the given group name.
            </p>
            
            <p>
            If there are no jobs in the given group name, the result should be a
            zero-length array (not <code>null</code>).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggerNames(Quartz.Core.SchedulingContext,System.String)">
            <summary> <p>
            Get the names of all of the <code>{@link org.quartz.Trigger}</code> s
            that have the given group name.
            </p>
            
            <p>
            If there are no triggers in the given group name, the result should be a
            zero-length array (not <code>null</code>).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetJobGroupNames(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Get the names of all of the <code>{@link org.quartz.Job}</code>
            groups.
            </p>
            
            <p>
            If there are no known group names, the result should be a zero-length
            array (not <code>null</code>).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggerGroupNames(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Get the names of all of the <code>{@link org.quartz.Trigger}</code>
            groups.
            </p>
            
            <p>
            If there are no known group names, the result should be a zero-length
            array (not <code>null</code>).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetCalendarNames(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Get the names of all of the <code>{@link org.quartz.Calendar}</code> s
            in the <code>JobStore</code>.
            </p>
            
            <p>
            If there are no Calendars in the given group name, the result should be
            a zero-length array (not <code>null</code>).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggersForJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Get all of the Triggers that are associated to the given Job.
            </p>
            
            <p>
            If there are no matches, a zero-length array should be returned.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggerState(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Get the current state of the identified <code>{@link Trigger}</code>.
            </p>
            
            </summary>
            <seealso cref="F:Quartz.Trigger.STATE_NORMAL">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_PAUSED">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_COMPLETE">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_ERROR">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_NONE">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Pause the <code>{@link org.quartz.Trigger}</code> with the given name.
            </p>
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseTriggerGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary> <p>
            Pause all of the <code>{@link org.quartz.Trigger}s</code> in the
            given group.
            </p>
            
            
            <p>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new triggers that are added to the group while the group is
            paused.
            </p>
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Pause the <code>{@link org.quartz.Job}</code> with the given name - by
            pausing all of its current <code>Trigger</code>s.
            </p>
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseJobGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Pause all of the <code>{@link org.quartz.Job}s</code> in the given
            group - by pausing all of their <code>Trigger</code>s.
            <p>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new jobs that are added to the group while the group is
            paused.
            </p>
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Resume (un-pause) the <code>{@link org.quartz.Trigger}</code> with the
            given name.
            
            <p>
            If the <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeTriggerGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary> <p>
            Resume (un-pause) all of the <code>{@link org.quartz.Trigger}s</code>
            in the given group.
            </p>
            
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> <p>
            Resume (un-pause) the <code>{@link org.quartz.Job}</code> with the
            given name.
            </p>
            
            <p>
            If any of the <code>Job</code>'s<code>Trigger</code> s missed one
            or more fire-times, then the <code>Trigger</code>'s misfire
            instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeJobGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary> <p>
            Resume (un-pause) all of the <code>{@link org.quartz.Job}s</code> in
            the given group.
            </p>
            
            <p>
            If any of the <code>Job</code> s had <code>Trigger</code> s that
            missed one or more fire-times, then the <code>Trigger</code>'s
            misfire instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseAll(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Pause all triggers - equivalent of calling <code>pauseTriggerGroup(group)</code>
            on every group.
            </p>
            
            <p>
            When <code>resumeAll()</code> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.Spi.IJobStore.ResumeAll(Quartz.Core.SchedulingContext)">
            </seealso>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeAll(Quartz.Core.SchedulingContext)">
            <summary> <p>
            Resume (un-pause) all triggers - equivalent of calling <code>resumeTriggerGroup(group)</code>
            on every group.
            </p>
            
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.Spi.IJobStore.PauseAll(Quartz.Core.SchedulingContext)">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.AcquireNextTrigger(Quartz.Core.SchedulingContext,System.DateTime)">
            <summary> <p>
            Get a handle to the next trigger to be fired, and mark it as 'reserved'
            by the calling scheduler.
            </p>
            
            </summary>
            <param name="noLaterThan">If &gt; 0, the JobStore should only return a Trigger 
            that will fire no later than the time represented in this value as 
            milliseconds.
            </param>
            <seealso cref="T:Quartz.Trigger">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ReleaseAcquiredTrigger(Quartz.Core.SchedulingContext,Quartz.Trigger)">
            <summary> <p>
            Inform the <code>JobStore</code> that the scheduler no longer plans to
            fire the given <code>Trigger</code>, that it had previously acquired
            (reserved).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.TriggerFired(Quartz.Core.SchedulingContext,Quartz.Trigger)">
            <summary> <p>
            Inform the <code>JobStore</code> that the scheduler is now firing the
            given <code>Trigger</code> (executing its associated <code>Job</code>),
            that it had previously acquired (reserved).
            </p>
            
            </summary>
            <returns> null if the trigger or it's job or calendar no longer exist, or
            if the trigger was not successfully put into the 'executing'
            state.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.TriggeredJobComplete(Quartz.Core.SchedulingContext,Quartz.Trigger,Quartz.JobDetail,System.Int32)">
            <summary> <p>
            Inform the <code>JobStore</code> that the scheduler has completed the
            firing of the given <code>Trigger</code> (and the execution its
            associated <code>Job</code>), and that the <code>{@link org.quartz.JobDataMap}</code>
            in the given <code>JobDetail</code> should be updated if the <code>Job</code>
            is stateful.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.Initialize(Quartz.Spi.IClassLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary>
            Called by the QuartzScheduler before the <code>JobStore</code> is
            used, in order to give the it a chance to initialize.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.Shutdown">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            it should free up all of it's resources because the scheduler is
            shutting down.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreJobAndTrigger(Quartz.Core.SchedulingContext,Quartz.JobDetail,Quartz.Trigger)">
            <summary> 
            Store the given <code>{@link org.quartz.JobDetail}</code> and <code>{@link org.quartz.Trigger}</code>.
            </summary>
            <param name="newJob">The <code>JobDetail</code> to be stored.</param>
            <param name="newTrigger">The <code>Trigger</code> to be stored.</param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreJob(Quartz.Core.SchedulingContext,Quartz.JobDetail,System.Boolean)">
            <summary> 
            Store the given <code>IJob</code>.
            </summary>
            <param name="newJob">The <code>Job</code> to be stored.</param>
            <param name="replaceExisting">
            If <code>true</code>, any <code>Job</code> existing in the
            <code>JobStore</code> with the same name and group should be
            over-written.
            </param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Remove (delete) the <code>IJob</code> with the given
            name, and any <code>Trigger</code> s that reference
            it.
            </summary>
            <param name="jobName">The name of the <code>Job</code> to be removed.</param>
            <param name="groupName">The group name of the <code>Job</code> to be removed.</param>
            <returns> 
            <code>true</code> if a <code>Job</code> with the given name and
            group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreTrigger(Quartz.Core.SchedulingContext,Quartz.Trigger,System.Boolean)">
            <summary>
            Store the given <code>Trigger</code>.
            </summary>
            <param name="newTrigger">The <code>Trigger</code> to be stored.</param>
            <param name="replaceExisting">
            If <code>true</code>, any <code>Trigger</code> existing in
            the <code>JobStore</code> with the same name and group should
            be over-written.
            </param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Remove (delete) the <code>Trigger</code> with the
            given name.
            </summary>
            <param name="triggerName">The name of the <code>Trigger</code> to be removed.</param>
            <param name="groupName">The group name of the <code>Trigger</code> to be removed.</param>
            <returns>
            <code>true</code> if a <code>Trigger</code> with the given
            name and group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RetrieveJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Retrieve the <code>JobDetail</code> for the given
            <code>Job</code>.
            </summary>
            <param name="jobName">The name of the <code>Job</code> to be retrieved.</param>
            <param name="groupName">The group name of the <code>Job</code> to be retrieved.</param>
            <returns>The desired <code>Job</code>, or null if there is no match.</returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RetrieveTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Retrieve the given <code>Trigger</code>.
            </summary>
            <param name="triggerName"> The name of the <code>Trigger</code> to be retrieved.</param>
            <param name="groupName">The group name of the <code>Trigger</code> to be retrieved.</param>
            <returns> The desired <code>Trigger</code>, or null if there is no match.</returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerState(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Get the current state of the identified <code>Trigger</code>.
            </summary>
            <seealso cref="F:Quartz.Trigger.STATE_NORMAL"/>
            <seealso cref="F:Quartz.Trigger.STATE_PAUSED"/>
            <seealso cref="F:Quartz.Trigger.STATE_COMPLETE"/>
            <seealso cref="F:Quartz.Trigger.STATE_ERROR"/>
            <seealso cref="F:Quartz.Trigger.STATE_BLOCKED"/>
            <seealso cref="F:Quartz.Trigger.STATE_NONE"/>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreCalendar(Quartz.Core.SchedulingContext,System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Store the given <code>ICalendar</code>.
            </summary>
            <param name="calendar">The <code>ICalendar</code> to be stored.</param>
            <param name="replaceExisting">
            If <code>true</code>, any <code>ICalendar</code> existing
            in the <code>JobStore</code> with the same name and group
            should be over-written.
            </param>
            <param name="updateTriggers">
            If <code>true</code>, any <code>Trigger</code>s existing
            in the <code>JobStore</code> that reference an existing 
            Calendar with the same name with have their next fire time
            re-computed with the new <code>Calendar</code>.
            </param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveCalendar(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Remove (delete) the <code>ICalendar</code> with the
            given name.
            <p>
            If removal of the <code>ICalendar</code> would result in
            <code>Trigger</code>s pointing to non-existent calendars, then a
            <code>JobPersistenceException</code> will be thrown.</p>
            </summary>
            <param name="calName">The name of the <code>ICalendar</code> to be removed.</param>
            <returns>
            <code>true</code> if a <code>ICalendar</code> with the given name
            was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RetrieveCalendar(Quartz.Core.SchedulingContext,System.String)">
            <summary> 
            Retrieve the given <code>Trigger</code>.
            </summary>
            <param name="calName">The name of the <code>Calendar</code> to be retrieved.</param>
            <returns> The desired <code>Calendar</code>, or null if there is no match. </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetNumberOfJobs(Quartz.Core.SchedulingContext)">
            <summary>
            Get the number of <code>JobDetail</code> s that are
            stored in the <code>JobsStore</code>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetNumberOfTriggers(Quartz.Core.SchedulingContext)">
            <summary>
            Get the number of <code>Trigger</code> s that are
            stored in the <code>JobsStore</code>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetNumberOfCalendars(Quartz.Core.SchedulingContext)">
            <summary>
            Get the number of <code>ICalendar</code> s that are
            stored in the <code>JobsStore</code>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetJobNames(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Get the names of all of the <code>IJob</code> s that
            have the given group name.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetCalendarNames(Quartz.Core.SchedulingContext)">
            <summary>
            Get the names of all of the <code>ICalendar</code> s
            in the <code>JobStore</code>.
            <p>
            If there are no ICalendars in the given group name, the result should be
            a zero-length array (not <code>null</code>).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerNames(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Get the names of all of the <code>Trigger</code> s
            that have the given group name.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetJobGroupNames(Quartz.Core.SchedulingContext)">
            <summary>
            Get the names of all of the <code>IJob</code>
            groups.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerGroupNames(Quartz.Core.SchedulingContext)">
            <summary>
            Get the names of all of the <code>Trigger</code> groups.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggersForJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Get all of the Triggers that are associated to the given Job.
            <p>
            If there are no matches, a zero-length array should be returned.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> 
            Pause the <code>Trigger</code> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseTriggerGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Pause all of the <code>Trigger</code>s in the given group.
            <p>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new triggers that are added to the group while the group is
            paused.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> 
            Pause the <code>JobDetail</code> with the given
            name - by pausing all of its current <code>Trigger</code>s.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseJobGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Pause all of the <code>{@link org.quartz.JobDetail}s</code> in the
            given group - by pausing all of their <code>Trigger</code>s.
            <p>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new jobs that are added to the group while the group is
            paused.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Resume (un-pause) the <code>Trigger</code> with the given
            name.
            <p>
            If the <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeTriggerGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Resume (un-pause) all of the <code>Trigger</code>s in the
            given group.
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Resume (un-pause) the <code>JobDetail</code> with
            the given name.
            <p>
            If any of the <code>Job</code>'s<code>Trigger</code> s missed one
            or more fire-times, then the <code>Trigger</code>'s misfire
            instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeJobGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Resume (un-pause) all of the <code>JobDetail</code>s
            in the given group.
            <p>
            If any of the <code>Job</code> s had <code>Trigger</code> s that
            missed one or more fire-times, then the <code>Trigger</code>'s
            misfire instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseAll(Quartz.Core.SchedulingContext)">
            <summary>
            Pause all triggers - equivalent of calling <code>PauseTriggerGroup(group)</code>
            on every group.
            <p>
            When <code>ResumeAll()</code> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </p>
            </summary>
            <seealso cref="M:Quartz.Simpl.RAMJobStore.ResumeAll(Quartz.Core.SchedulingContext)"/> 
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeAll(Quartz.Core.SchedulingContext)">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <code>resumeTriggerGroup(group)</code>
            on every group.
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
            <seealso cref="M:Quartz.Simpl.RAMJobStore.PauseAll(Quartz.Core.SchedulingContext)"/>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.AcquireNextTrigger(Quartz.Core.SchedulingContext,System.DateTime)">
            <summary>
            Get a handle to the next trigger to be fired, and mark it as 'reserved'
            by the calling scheduler.
            </summary>
            <seealso cref="T:Quartz.Trigger"/>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ReleaseAcquiredTrigger(Quartz.Core.SchedulingContext,Quartz.Trigger)">
            <summary>
            Inform the <code>JobStore</code> that the scheduler no longer plans to
            fire the given <code>Trigger</code>, that it had previously acquired
            (reserved).
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.TriggerFired(Quartz.Core.SchedulingContext,Quartz.Trigger)">
            <summary>
            Inform the <code>JobStore</code> that the scheduler is now firing the
            given <code>Trigger</code> (executing its associated <code>Job</code>),
            that it had previously acquired (reserved).
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.TriggeredJobComplete(Quartz.Core.SchedulingContext,Quartz.Trigger,Quartz.JobDetail,System.Int32)">
            <summary> 
            Inform the <code>JobStore</code> that the scheduler has completed the
            firing of the given <code>Trigger</code> (and the execution its
            associated <code>Job</code>), and that the <code>{@link org.quartz.JobDataMap}</code>
            in the given <code>JobDetail</code> should be updated if the <code>Job</code>
            is stateful.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetPausedTriggerGroups(Quartz.Core.SchedulingContext)">
            <seealso cref="M:Quartz.Spi.IJobStore.GetPausedTriggerGroups(Quartz.Core.SchedulingContext)"/>
        </member>
        <member name="P:Quartz.Simpl.RAMJobStore.MisfireThreshold">
            <summary> 
            The the number of milliseconds by which a trigger must have missed its
            next-fire-time, in order for it to be considered "misfired" and thus
            have its misfire instruction applied.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.TriggerComparator">
            <summary>
            Comparer for triggers.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.CascadingClassLoadHelper">
            <summary>
            A <code>ClassLoadHelper</code> uses all of the <code>ClassLoadHelper</code>
            types that are found in this package in its attempts to load a class, when
            one scheme is found to work, it is promoted to the scheme that will be used
            first the next time a class is loaded (in order to improve perfomance).
            <p>
            This approach is used because of the wide variance in class loader behavior
            between the various environments in which Quartz runs (e.g. disparate 
            application servers, stand-alone, mobile devices, etc.).  Because of this
            disparity, Quartz ran into difficulty with a one class-load style fits-all 
            design.  Thus, this class loader finds the approach that works, then 
            'remembers' it.  
            </p>
            </summary>
            <author>James House</author>
        </member>
        <member name="T:Quartz.Spi.IClassLoadHelper">
            <summary> An interface for classes wishing to provide the service of loading classes
            and resources within the scheduler...
            
            </summary>
            <author>  jhouse
            </author>
        </member>
        <member name="M:Quartz.Spi.IClassLoadHelper.Initialize">
            <summary> Called to give the ClassLoadHelper a chance to initialize itself,
            including the oportunity to "steal" the class loader off of the calling
            thread, which is the thread that is initializing Quartz.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IClassLoadHelper.LoadClass(System.String)">
            <summary> 
            Return the class with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IClassLoadHelper.GetResource(System.String)">
            <summary> 
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.net.URL object
            </returns>
        </member>
        <member name="M:Quartz.Spi.IClassLoadHelper.GetResourceAsStream(System.String)">
            <summary> 
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.io.InputStream object
            </returns>
        </member>
        <member name="M:Quartz.Simpl.CascadingClassLoadHelper.Initialize">
            <summary> 
            Called to give the ClassLoadHelper a chance to initialize itself,
            including the oportunity to "steal" the class loader off of the calling
            thread, which is the thread that is initializing Quartz.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.CascadingClassLoadHelper.LoadClass(System.String)">
            <summary>
            Return the class with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.CascadingClassLoadHelper.GetResource(System.String)">
            <summary> Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.net.URL object
            </returns>
        </member>
        <member name="M:Quartz.Simpl.CascadingClassLoadHelper.GetResourceAsStream(System.String)">
            <summary> Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.io.InputStream object
            </returns>
        </member>
        <member name="T:Quartz.Plugins.History.LoggingTriggerHistoryPlugin">
            <summary> Logs a history of all trigger firings via the Jakarta Commons-Logging
            framework.
            
            <p>
            The logged message is customizable by setting one of the following message
            properties to a string that conforms to the syntax of <code>java.util.MessageFormat</code>.
            </p>
            
            <p>
            TriggerFiredMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Trigger's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Trigger's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Date</td>
            <td>The actual fire time.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>String</td>
            <td>The Job's name.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>String</td>
            <td>The Job's group.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            </table>
            
            The default message text is <i>"Trigger {1}.{0} fired job {6}.{5} at: {4,
            date, HH:mm:ss MM/dd/yyyy}"</i>
            </p>
            
            <p>
            TriggerMisfiredMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Trigger's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Trigger's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Date</td>
            <td>The actual fire time. (the time the misfire was detected/handled)</td>
            </tr>
            <tr>
            <td>5</td>
            <td>String</td>
            <td>The Job's name.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>String</td>
            <td>The Job's group.</td>
            </tr>
            </table>
            
            The default message text is <i>"Trigger {1}.{0} misfired job {6}.{5} at:
            {4, date, HH:mm:ss MM/dd/yyyy}. Should have fired at: {3, date, HH:mm:ss
            MM/dd/yyyy}"</i>
            </p>
            
            <p>
            TriggerCompleteMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Trigger's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Trigger's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Date</td>
            <td>The job completion time.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>String</td>
            <td>The Job's name.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>String</td>
            <td>The Job's group.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            <tr>
            <td>8</td>
            <td>Integer</td>
            <td>The trigger's resulting instruction code.</td>
            </tr>
            <tr>
            <td>9</td>
            <td>String</td>
            <td>A human-readable translation of the trigger's resulting instruction
            code.</td>
            </tr>
            </table>
            
            The default message text is <i>"Trigger {1}.{0} completed firing job
            {6}.{5} at {4, date, HH:mm:ss MM/dd/yyyy} with resulting trigger instruction
            code: {9}"</i>
            </p>
            
            </summary>
            <author>  James House
            </author>
        </member>
        <member name="T:Quartz.ITriggerListener">
            <summary> <p>
            The interface to be implemented by classes that want to be informed when a
            <code>{@link Trigger}</code> fires. In general, applications that use a
            <code>Scheduler</code> will not have use for this mechanism.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IScheduler">
            </seealso>
            <seealso cref="T:Quartz.Trigger">
            </seealso>
            <seealso cref="T:Quartz.IJobListener">
            </seealso>
            <seealso cref="T:Quartz.JobExecutionContext">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.ITriggerListener.TriggerFired(Quartz.Trigger,Quartz.JobExecutionContext)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            has fired, and it's associated <code>{@link org.quartz.JobDetail}</code>
            is about to be executed.
            </p>
            
            <p>
            It is called before the <code>vetoJobExecution(..)</code> method of this
            interface.
            </p>
            
            </summary>
            <param name="trigger">
            The <code>Trigger</code> that has fired.
            </param>
            <param name="context">
            The <code>JobExecutionContext</code> that will be passed to
            the <code>Job</code>'s<code>Execute(xx)</code> method.
            </param>
        </member>
        <member name="M:Quartz.ITriggerListener.VetoJobExecution(Quartz.Trigger,Quartz.JobExecutionContext)">
            <summary>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            has fired, and it's associated <code>{@link org.quartz.JobDetail}</code>
            is about to be executed.
            <p>
            It is called after the <code>triggerFired(..)</code> method of this
            interface.
            </p>
            </summary>
            <param name="trigger">The <code>Trigger</code> that has fired.</param>
            <param name="context">
            The <code>JobExecutionContext</code> that will be passed to
            the <code>Job</code>'s<code>Execute(xx)</code> method.
            </param>
        </member>
        <member name="M:Quartz.ITriggerListener.TriggerMisfired(Quartz.Trigger)">
            <summary>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            has misfired.
            <p>
            Consideration should be given to how much time is spent in this method,
            as it will affect all triggers that are misfiring.  If you have lots
            of triggers misfiring at once, it could be an issue it this method
            does a lot.
            </p>
            </summary>
            <param name="trigger">The <code>Trigger</code> that has misfired.</param>
        </member>
        <member name="M:Quartz.ITriggerListener.TriggerComplete(Quartz.Trigger,Quartz.JobExecutionContext,System.Int32)">
            <summary>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            has fired, it's associated <code>{@link org.quartz.JobDetail}</code>
            has been executed, and it's <code>triggered(xx)</code> method has been
            called.
            </summary>
            <param name="trigger">The <code>Trigger</code> that was fired.</param>
            <param name="context">
            The <code>JobExecutionContext</code> that was passed to the
            <code>Job</code>'s<code>Execute(xx)</code> method.
            </param>
            <param name="triggerInstructionCode">T
            he result of the call on the <code>Trigger</code>'s<code>triggered(xx)</code>
            method.
            </param>
        </member>
        <member name="P:Quartz.ITriggerListener.Name">
            <summary> <p>
            Get the name of the <code>TriggerListener</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Plugins.History.LoggingTriggerHistoryPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <code>Scheduler</code> in order to give
            the <code>SchedulerPlugin</code> a chance to initialize.
            </summary>
        </member>
        <member name="M:Quartz.Plugins.History.LoggingTriggerHistoryPlugin.Shutdown">
            <summary>
            Called in order to inform the <code>SchedulerPlugin</code> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingTriggerHistoryPlugin.TriggerCompleteMessage">
            <summary> 
            Get or set the message that is printed upon the completion of a trigger's
            firing.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingTriggerHistoryPlugin.TriggerFiredMessage">
            <summary> 
            Get or set the message that is printed upon a trigger's firing.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingTriggerHistoryPlugin.TriggerMisfiredMessage">
            <summary> 
            Get or set the message that is printed upon a trigger's mis-firing.
            </summary>
        </member>
        <member name="T:Quartz.Scheduler_Fields">
            <summary> <p>
            This is the main interface of a Quartz Scheduler.
            </p>
            
            <p>
            A <code>Scheduler</code> maintains a registery of <code>{@link org.quartz.JobDetail}</code>
            s and <code>{@link Trigger}</code>s. Once registered, the <code>Scheduler</code>
            is responible for executing <code>Job</code> s when their associated
            <code>Trigger</code> s fire (when their scheduled time arrives).
            </p>
            
            <p>
            <code>Scheduler</code> instances are produced by a <code>{@link SchedulerFactory}</code>.
            A scheduler that has already been created/initialized can be found and used
            through the same factory that produced it. After a <code>Scheduler</code>
            has been created, it is in "stand-by" mode, and must have its 
            <code>start()</code> method called before it will fire any <code>Job</code>s.
            </p>
            
            <p>
            <code>Job</code> s are to be created by the 'client program', by defining
            a class that implements the <code>{@link org.quartz.Job}</code>
            interface. <code>{@link JobDetail}</code> objects are then created (also
            by the client) to define a individual instances of the <code>Job</code>.
            <code>JobDetail</code> instances can then be registered with the <code>Scheduler</code>
            via the <code>scheduleJob(JobDetail, Trigger)</code> or <code>addJob(JobDetail, boolean)</code>
            method.
            </p>
            
            <p>
            <code>Trigger</code> s can then be defined to fire individual <code>Job</code>
            instances based on given schedules. <code>SimpleTrigger</code> s are most
            useful for one-time firings, or firing at an exact moment in time, with N
            repeats with a given delay between them. <code>CronTrigger</code> s allow
            scheduling based on time of day, day of week, day of month, and month of
            year.
            </p>
            
            <p>
            <code>Job</code> s and <code>Trigger</code> s have a name and group
            associated with them, which should uniquely identify them within a single
            <code>{@link Scheduler}</code>. The 'group' feature may be useful for
            creating logical groupings or categorizations of <code>Jobs</code> s and
            <code>Triggers</code>s. If you don't have need for assigning a group to a
            given <code>Jobs</code> of <code>Triggers</code>, then you can use the
            <code>DEFAULT_GROUP</code> constant defined on this interface.
            </p>
            
            <p>
            Stored <code>Job</code> s can also be 'manually' triggered through the use
            of the <code>triggerJob(String jobName, string jobGroup)</code> function.
            </p>
            
            <p>
            Client programs may also be interested in the 'listener' interfaces that are
            available from Quartz. The <code>{@link JobListener}</code> interface
            provides notifications of <code>Job</code> executions. The <code>{@link TriggerListener}</code>
            interface provides notifications of <code>Trigger</code> firings. The
            <code>{@link SchedulerListener}</code> interface provides notifications of
            <code>Scheduler</code> events and errors.
            </p>
            
            <p>
            The setup/configuration of a <code>Scheduler</code> instance is very
            customizable. Please consult the documentation distributed with Quartz.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IJob">
            </seealso>
            <seealso cref="T:Quartz.JobDetail">
            </seealso>
            <seealso cref="T:Quartz.Trigger">
            </seealso>
            <seealso cref="T:Quartz.IJobListener">
            </seealso>
            <seealso cref="T:Quartz.ITriggerListener">
            </seealso>
            <seealso cref="T:Quartz.ISchedulerListener">
            
            </seealso>
            <author>  James House
            </author>
            <author>  Sharada Jambula
            </author>
        </member>
        <member name="F:Quartz.Scheduler_Fields.DEFAULT_GROUP">
            <summary> <p>
            A (possibly) usefull constant that can be used for specifying the group
            that <code>Job</code> and <code>Trigger</code> instances belong to.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Scheduler_Fields.DEFAULT_MANUAL_TRIGGERS">
            <summary> <p>
            A constant <code>Trigger</code> group name used internally by the
            scheduler - clients should not use the value of this constant
            ("MANUAL_TRIGGER") for thename of a <code>Trigger</code>'s group.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Scheduler_Fields.DEFAULT_RECOVERY_GROUP">
            <summary> <p>
            A constant <code>Trigger</code> group name used internally by the
            scheduler - clients should not use the value of this constant
            ("RECOVERING_JOBS") for thename of a <code>Trigger</code>'s group.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Scheduler_Fields.DEFAULT_FAIL_OVER_GROUP">
            <summary> <p>
            A constant <code>Trigger</code> group name used internally by the
            scheduler - clients should not use the value of this constant
            ("FAILED_OVER_JOBS") for thename of a <code>Trigger</code>'s group.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetMetaData">
            <summary>
            Get a <code>SchedulerMetaData</code> object describiing the settings
            and capabilities of the scheduler instance.
            <p>
            Note that the data returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the meta data values may be different.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetCurrentlyExecutingJobs">
            <summary>
            Return a list of <code>JobExecutionContext</code> objects that
            represent all currently executing Jobs.
            <p>
            Note that the list returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the true list of executing jobs may be different.
            Also please read the doc associated with <code>JobExecutionContext</code>-
            especially if you're using remoting.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.JobExecutionContext">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.GetPausedTriggerGroups">
            <summary> 
            Get the names of all <code>Trigger</code> groups that are paused.
            </summary>
            <returns>
            </returns>
            <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.IScheduler.Start">
            <summary>
            Starts the <code>Scheduler</code>'s threads that fire <code>{@link Trigger}s</code>.
            When a scheduler is first created it is in "stand-by" mode, and will not
            fire triggers.  The scheduler can also be put into stand-by mode by
            calling the <code>standby()</code> method. 
            <p>
            All <code>{@link Trigger}s</code> that have misfired will be passed
            to the appropriate TriggerListener(s).
            </p>
            
            </summary>
            <throws>  SchedulerException </throws>
            <summary>           if <code>shutdown()</code> has been called, or there is an
            error within the <code>Scheduler</code>.
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.Standby">
            </seealso>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.Standby">
            <summary>
            Temporarily halts the <code>Scheduler</code>'s firing of <code>{@link Trigger}s</code>.
            <p>
            When <code>start()</code> is called (to bring the scheduler out of 
            stand-by mode), trigger misfire instructions will NOT be applied.
            </p>
            <p>
            The scheduler is not destroyed, and can be re-started at any time.
            </p>
            </summary>
            <seealso cref="M:Quartz.IScheduler.Start">
            </seealso>
            <seealso cref="M:Quartz.IScheduler.PauseAll">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.Shutdown">
            <summary> <p>
            Halts the <code>Scheduler</code>'s firing of <code>{@link Trigger}s</code>,
            and cleans up all resources associated with the Scheduler. Equivalent to
            <code>shutdown(false)</code>.
            </p>
            
            <p>
            The scheduler cannot be re-started.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.Shutdown(System.Boolean)">
            <summary>
            Halts the <code>Scheduler</code>'s firing of <code>{@link Trigger}s</code>,
            and cleans up all resources associated with the Scheduler. 
            <p>
            The scheduler cannot be re-started.
            </p>
            
            </summary>
            <param name="waitForJobsToComplete">
            if <code>true</code> the scheduler will not allow this method
            to return until all currently executing jobs have completed.
            
            </param>
            <seealso cref="M:Quartz.IScheduler.Shutdown">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.ScheduleJob(Quartz.JobDetail,Quartz.Trigger)">
            <summary>
            Add the given <code>{@link org.quartz.JobDetail}</code> to the
            Scheduler, and associate the given <code>{@link Trigger}</code> with
            it.
            <p>
            If the given Trigger does not reference any <code>Job</code>, then it
            will be set to reference the Job passed with it into this method.
            </p>
            
            </summary>
            <throws>  SchedulerException </throws>
            <summary>           if the Job or Trigger cannot be added to the Scheduler, or
            there is an internal Scheduler error.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.ScheduleJob(Quartz.Trigger)">
            <summary> <p>
            Schedule the given <code>{@link org.quartz.Trigger}</code> with the
            <code>Job</code> identified by the <code>Trigger</code>'s settings.
            </p>
            
            </summary>
            <throws>  SchedulerException </throws>
            <summary>           if the indicated Job does not exist, or the Trigger cannot be
            added to the Scheduler, or there is an internal Scheduler
            error.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.UnscheduleJob(System.String,System.String)">
            <summary> <p>
            Remove the indicated <code>{@link Trigger}</code> from the scheduler.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.RescheduleJob(System.String,System.String,Quartz.Trigger)">
            <summary>
            Remove (delete) the <code>Trigger</code> with the
            given name, and store the new given one - which must be associated
            with the same job - however, the new trigger need not have the same 
            name as the old trigger.
            </summary>
            <param name="triggerName">
            The name of the <code>Trigger</code> to be replaced.
            </param>
            <param name="groupName">
            The group name of the <code>Trigger</code> to be replaced.
            </param>
            <param name="newTrigger">
            The new <code>Trigger</code> to be stored.
            </param>
            <returns> <code>null</code> if a <code>Trigger</code> with the given
            name and group was not found and removed from the store, otherwise
            the first fire time of the newly scheduled trigger.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.AddJob(Quartz.JobDetail,System.Boolean)">
            <summary> <p>
            Add the given <code>Job</code> to the Scheduler - with no associated
            <code>Trigger</code>. The <code>Job</code> will be 'dormant' until
            it is scheduled with a <code>Trigger</code>, or <code>Scheduler.triggerJob()</code>
            is called for it.
            </p>
            
            <p>
            The <code>Job</code> must by definition be 'durable', if it is not,
            SchedulerException will be thrown.
            </p>
            
            </summary>
            <throws>  SchedulerException </throws>
            <summary>           if there is an internal Scheduler error, or if the Job is not
            durable, or a Job with the same name already exists, and
            <code>replace</code> is <code>false</code>.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.DeleteJob(System.String,System.String)">
            <summary> <p>
            Delete the identified <code>Job</code> from the Scheduler - and any
            associated <code>Trigger</code>s.
            </p>
            
            </summary>
            <returns> true if the Job was found and deleted.
            </returns>
            <throws>  SchedulerException </throws>
            <summary>           if there is an internal Scheduler error.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.TriggerJob(System.String,System.String)">
            <summary> <p>
            Trigger the identified <code>{@link org.quartz.JobDetail}</code>
            (Execute it now) - the generated trigger will be non-volatile.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.TriggerJobWithVolatileTrigger(System.String,System.String)">
            <summary> <p>
            Trigger the identified <code>{@link org.quartz.JobDetail}</code>
            (Execute it now) - the generated trigger will be volatile.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.TriggerJob(System.String,System.String,Quartz.JobDataMap)">
            <summary> <p>
            Trigger the identified <code>{@link org.quartz.JobDetail}</code>
            (Execute it now) - the generated trigger will be non-volatile.
            </p>
            
            </summary>
            <param name="jobName">the name of the Job to trigger
            </param>
            <param name="groupName">the group name of the Job to trigger
            </param>
            <param name="data">the (possibly <code>null</code>) JobDataMap to be 
            associated with the trigger that fires the job immediately. 
            </param>
        </member>
        <member name="M:Quartz.IScheduler.TriggerJobWithVolatileTrigger(System.String,System.String,Quartz.JobDataMap)">
            <summary> <p>
            Trigger the identified <code>{@link org.quartz.JobDetail}</code>
            (Execute it now) - the generated trigger will be volatile.
            </p>
            
            </summary>
            <param name="jobName">the name of the Job to trigger
            </param>
            <param name="groupName">the group name of the Job to trigger
            </param>
            <param name="data">the (possibly <code>null</code>) JobDataMap to be 
            associated with the trigger that fires the job immediately. 
            </param>
        </member>
        <member name="M:Quartz.IScheduler.PauseJob(System.String,System.String)">
            <summary>
            Pause the <code>{@link org.quartz.JobDetail}</code> with the given
            name - by pausing all of its current <code>Trigger</code>s.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.PauseJobGroup(System.String)">
            <summary> <p>
            Pause all of the <code>{@link org.quartz.JobDetail}s</code> in the
            given group - by pausing all of their <code>Trigger</code>s.
            </p>
            
            <p>
            The Scheduler will "remember" that the group is paused, and impose the
            pause on any new jobs that are added to the group while the group is
            paused.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.ResumeJobGroup(System.String)">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.PauseTrigger(System.String,System.String)">
            <summary> 
            Pause the <code>{@link Trigger}</code> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.PauseTriggerGroup(System.String)">
            <summary> <p>
            Pause all of the <code>{@link Trigger}s</code> in the given group.
            </p>
            
            <p>
            The Scheduler will "remember" that the group is paused, and impose the
            pause on any new triggers that are added to the group while the group is
            paused.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.ResumeTriggerGroup(System.String)">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.ResumeJob(System.String,System.String)">
            <summary>
            Resume (un-pause) the <code>{@link org.quartz.JobDetail}</code> with
            the given name.
            <p>
            If any of the <code>Job</code>'s<code>Trigger</code> s missed one
            or more fire-times, then the <code>Trigger</code>'s misfire
            instruction will be applied.
            </p>
            
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.ResumeJobGroup(System.String)">
            <summary> <p>
            Resume (un-pause) all of the <code>{@link org.quartz.JobDetail}s</code>
            in the given group.
            </p>
            
            <p>
            If any of the <code>Job</code> s had <code>Trigger</code> s that
            missed one or more fire-times, then the <code>Trigger</code>'s
            misfire instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.PauseJobGroup(System.String)">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.ResumeTrigger(System.String,System.String)">
            <summary> <p>
            Resume (un-pause) the <code>{@link Trigger}</code> with the given
            name.
            </p>
            
            <p>
            If the <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.ResumeTriggerGroup(System.String)">
            <summary> <p>
            Resume (un-pause) all of the <code>{@link Trigger}s</code> in the
            given group.
            </p>
            
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.PauseTriggerGroup(System.String)">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.PauseAll">
            <summary> <p>
            Pause all triggers - similar to calling <code>pauseTriggerGroup(group)</code>
            on every group, however, after using this method <code>resumeAll()</code> 
            must be called to clear the scheduler's state of 'remembering' that all 
            new triggers will be paused as they are added. 
            </p>
            
            <p>
            When <code>resumeAll()</code> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.ResumeAll">
            </seealso>
            <seealso cref="M:Quartz.IScheduler.PauseTriggerGroup(System.String)">
            </seealso>
            <seealso cref="M:Quartz.IScheduler.Standby">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.ResumeAll">
            <summary> <p>
            Resume (un-pause) all triggers - similar to calling 
            <code>resumeTriggerGroup(group)</code> on every group.
            </p>
            
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.PauseAll">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.GetJobNames(System.String)">
            <summary> <p>
            Get the names of all the <code>{@link org.quartz.JobDetail}s</code>
            in the given group.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggersOfJob(System.String,System.String)">
            <summary> <p>
            Get all <code>{@link Trigger}</code> s that are associated with the
            identified <code>{@link org.quartz.JobDetail}</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggerNames(System.String)">
            <summary> <p>
            Get the names of all the <code>{@link Trigger}s</code> in the given
            group.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetJobDetail(System.String,System.String)">
            <summary> <p>
            Get the <code>{@link JobDetail}</code> for the <code>Job</code>
            instance with the given name and group.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetTrigger(System.String,System.String)">
            <summary> <p>
            Get the <code>{@link Trigger}</code> instance with the given name and
            group.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggerState(System.String,System.String)">
            <summary>
            Get the current state of the identified <code>{@link Trigger}</code>.
            </summary>
            <seealso cref="F:Quartz.Trigger.STATE_NORMAL">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_PAUSED">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_COMPLETE">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_ERROR">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_BLOCKED">
            </seealso>
            <seealso cref="F:Quartz.Trigger.STATE_NONE">
            </seealso>
        </member>
        <member name="M:Quartz.IScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary> <p>
            Add (register) the given <code>Calendar</code> to the Scheduler.
            </p>
            
            </summary>
            <param name="updateTriggers">whether or not to update existing triggers that
            referenced the already existing calendar so that they are 'correct'
            based on the new trigger. 
            
            
            </param>
            <throws>  SchedulerException </throws>
            <summary>           if there is an internal Scheduler error, or a Calendar with
            the same name already exists, and <code>replace</code> is
            <code>false</code>.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.DeleteCalendar(System.String)">
            <summary> <p>
            Delete the identified <code>Calendar</code> from the Scheduler.
            </p>
            
            </summary>
            <returns> true if the Calendar was found and deleted.
            </returns>
            <throws>  SchedulerException </throws>
            <summary>           if there is an internal Scheduler error.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetCalendar(System.String)">
            <summary> <p>
            Get the <code>{@link Calendar}</code> instance with the given name.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.Interrupt(System.String,System.String)">
            <summary> <p>
            Request the interruption of all currently executing instances of the 
            identified <code>Job</code>, which must be an implementor of the 
            <code>InterruptableJob</code> interface.
            </p>
            
            <p>
            If more than one instance of the identified job is currently executing,
            the <code>InterruptableJob#interrupt()</code> method will be called on
            each instance.  However, there is a limitation that in the case that  
            <code>interrupt()</code> on one instances throws an exception, all 
            remaining  instances (that have not yet been interrupted) will not have 
            their <code>interrupt()</code> method called.
            </p>
            
            <p>
            If you wish to interrupt a specific instance of a job (when more than
            one is executing) you can do so by calling 
            <code>{@link #getCurrentlyExecutingJobs()}</code> to obtain a handle 
            to the job instance, and then invoke <code>interrupt()</code> on it
            yourself.
            </p>
            
            </summary>
            <param name="jobName">
            </param>
            <param name="groupName">
            </param>
            <returns> true is at least one instance of the identified job was found
            and interrupted.
            </returns>
            <throws>  UnableToInterruptJobException if the job does not implement </throws>
            <summary> <code>InterruptableJob</code>, or there is an exception while 
            interrupting the job.
            </summary>
            <seealso cref="T:Quartz.IInterruptableJob"/>
            <seealso cref="M:Quartz.IScheduler.GetCurrentlyExecutingJobs"/>
        </member>
        <member name="M:Quartz.IScheduler.AddGlobalJobListener(Quartz.IJobListener)">
            <summary> <p>
            Add the given <code>{@link JobListener}</code> to the <code>Scheduler</code>'s
            <i>global</i> list.
            </p>
            
            <p>
            Listeners in the 'global' list receive notification of execution events
            for ALL <code>{@link org.quartz.JobDetail}</code>s.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.AddJobListener(Quartz.IJobListener)">
            <summary> 
            Add the given <code>JobListener</code> to the <code>Scheduler</code>'s
            list, of registered <code>JobListener</code>s.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.RemoveGlobalJobListener(Quartz.IJobListener)">
            <summary>
            Remove the given <code>{@link JobListener}</code> from the <code>Scheduler</code>'s
            list of <i>global</i> listeners.
            </summary>
            <returns> true if the identifed listener was found in the list, and
            removed.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.RemoveJobListener(System.String)">
            <summary> <p>
            Remove the identifed <code>{@link JobListener}</code> from the <code>Scheduler</code>'s
            list of registered listeners.
            </p>
            
            </summary>
            <returns> true if the identifed listener was found in the list, and
            removed.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.GetJobListener(System.String)">
            <summary> <p>
            Get the <i>non-global</i><code>{@link JobListener}</code> that has
            the given name.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.AddGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Add the given <code>TriggerListener</code> to the <code>Scheduler</code>'s
            <i>global</i> list.
            <p>
            Listeners in the 'global' list receive notification of execution events
            for ALL <code>Trigger</code>s.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.AddTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Add the given <code>TriggerListener</code> to the <code>Scheduler</code>'s
            list, of registered <code>TriggerListener</code>s.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.RemoveGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Remove the given <code>TriggerListener</code> from the <code>Scheduler</code>'s
            list of <i>global</i> listeners.
            </summary>
            <returns> true if the identifed listener was found in the list, and
            removed.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.RemoveTriggerListener(System.String)">
            <summary> <p>
            Remove the identifed <code>{@link TriggerListener}</code> from the
            <code>Scheduler</code>'s list of registered listeners.
            </p>
            
            </summary>
            <returns> true if the identifed listener was found in the list, and
            removed.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggerListener(System.String)">
            <summary> <p>
            Get the <i>non-global</i><code>{@link TriggerListener}</code> that
            has the given name.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.AddSchedulerListener(Quartz.ISchedulerListener)">
            <summary> <p>
            Register the given <code>{@link SchedulerListener}</code> with the
            <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.RemoveSchedulerListener(Quartz.ISchedulerListener)">
            <summary> <p>
            Remove the given <code>{@link SchedulerListener}</code> from the
            <code>Scheduler</code>.
            </p>
            
            </summary>
            <returns> true if the identifed listener was found in the list, and
            removed.
            </returns>
        </member>
        <member name="P:Quartz.IScheduler.SchedulerName">
            <summary> <p>
            Returns the name of the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.SchedulerInstanceId">
            <summary> <p>
            Returns the instance Id of the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.Context">
            <summary> <p>
            Returns the <code>SchedulerContext</code> of the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.InStandbyMode">
            <summary> <p>
            Reports whether the <code>Scheduler</code> is in stand-by mode.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.Standby">
            </seealso>
            <seealso cref="M:Quartz.IScheduler.Start">
            </seealso>
        </member>
        <member name="P:Quartz.IScheduler.IsShutdown">
            <summary> <p>
            Reports whether the <code>Scheduler</code> has been shutdown.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.JobFactory">
            <summary>
            Set the <code>JobFactory</code> that will be responsible for producing 
            instances of <code>Job</code> classes.
            <p>
            JobFactories may be of use to those wishing to have their application
            produce <code>Job</code> instances via some special mechanism, such as to
            give the opertunity for dependency injection.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
            <throws>  SchedulerException </throws>
        </member>
        <member name="P:Quartz.IScheduler.JobGroupNames">
            <summary>
            Get the names of all known <code>{@link org.quartz.JobDetail}</code>
            groups.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.TriggerGroupNames">
            <summary>
            Get the names of all known <code>{@link Trigger}</code> groups.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.CalendarNames">
            <summary>
            Get the names of all registered <code>ICalendar</code>s.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.GlobalJobListeners">
            <summary>
            Get a List containing all of the <code>JobListener</code> s in
            the <code>Scheduler</code>'s<i>global</i> list.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.JobListenerNames">
            <summary>
            Get a Set containing the names of all the <i>non-global</i><code>JobListener</code>
            s registered with the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.GlobalTriggerListeners">
            <summary>
            Get a List containing all of the <code>TriggerListener</code>
            s in the <code>Scheduler</code>'s<i>global</i> list.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.TriggerListenerNames">
            <summary> <p>
            Get a Set containing the names of all the <i>non-global</i><code>{@link TriggerListener}</code>
            s registered with the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.SchedulerListeners">
            <summary> <p>
            Get a List containing all of the <code>{@link SchedulerListener}</code>
            s registered with the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Core.SchedulerSignalerImpl">
            <summary> 
            An interface to be used by <code>JobStore</code> instances in order to
            communicate signals back to the <code>QuartzScheduler</code>.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Spi.ISchedulerSignaler">
            <summary> An interface to be used by <code>JobStore</code> instances in order to
            communicate signals back to the <code>QuartzScheduler</code>.
            
            </summary>
            <author>  jhouse
            </author>
        </member>
        <member name="T:Quartz.Trigger">
            <summary> <p>
            The base abstract class to be extended by all <code>Trigger</code>s.
            </p>
            
            <p>
            <code>Triggers</code> s have a name and group associated with them, which
            should uniquely identify them within a single <code>{@link Scheduler}</code>.
            </p>
            
            <p>
            <code>Trigger</code>s are the 'mechanism' by which <code>Job</code> s
            are scheduled. Many <code>Trigger</code> s can point to the same <code>Job</code>,
            but a single <code>Trigger</code> can only point to one <code>Job</code>.
            </p>
            
            <p>
            Triggers can 'send' parameters/data to <code>Job</code>s by placing contents
            into the <code>JobDataMap</code> on the <code>Trigger</code>.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.SimpleTrigger">
            </seealso>
            <seealso cref="T:Quartz.CronTrigger">
            </seealso>
            <seealso cref="T:Quartz.NthIncludedDayTrigger">
            </seealso>
            <seealso cref="T:Quartz.TriggerUtils">
            </seealso>
            <seealso cref="P:Quartz.Trigger.JobDataMap">
            </seealso>
            <seealso cref="T:Quartz.JobExecutionContext">
            
            </seealso>
            <author>  James House
            </author>
            <author>  Sharada Jambula
            </author>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_NOOP">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that the <code>{@link Trigger}</code>
            has no further instructions.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_RE_EXECUTE_JOB">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that the <code>{@link Trigger}</code>
            wants the <code>{@link org.quartz.JobDetail}</code> to re-Execute
            immediately. If not in a 'RECOVERING' or 'FAILED_OVER' situation, the
            execution context will be re-used (giving the <code>Job</code> the
            abilitiy to 'see' anything placed in the context by its last execution).
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_SET_TRIGGER_COMPLETE">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that the <code>{@link Trigger}</code>
            should be put in the <code>COMPLETE</code> state.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_DELETE_TRIGGER">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that the <code>{@link Trigger}</code>
            wants itself deleted.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_SET_ALL_JOB_TRIGGERS_COMPLETE">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that all <code>Trigger</code>
            s referencing the same <code>{@link org.quartz.JobDetail}</code> as
            this one should be put in the <code>COMPLETE</code> state.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_SET_TRIGGER_ERROR">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that all <code>Trigger</code>
            s referencing the same <code>{@link org.quartz.JobDetail}</code> as
            this one should be put in the <code>ERROR</code> state.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.INSTRUCTION_SET_ALL_JOB_TRIGGERS_ERROR">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that the <code>Trigger</code>
            should be put in the <code>ERROR</code> state.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.MISFIRE_INSTRUCTION_SMART_POLICY">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>updateAfterMisfire()</code> method will be called
            on the <code>Trigger</code> to determine the mis-fire instruction.
            </p>
            
            <p>
            In order to see if this instruction fits your needs, you should look at
            the documentation for the <code>getSmartMisfirePolicy()</code> method
            on the particular <code>Trigger</code> implementation you are using.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.STATE_NORMAL">
            <summary> <p>
            Indicates that the <code>Trigger</code> is in the "normal" state.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.STATE_PAUSED">
            <summary> <p>
            Indicates that the <code>Trigger</code> is in the "paused" state.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.STATE_COMPLETE">
            <summary> <p>
            Indicates that the <code>Trigger</code> is in the "complete" state.
            </p>
            
            <p>
            "Complete" indicates that the trigger has not remaining fire-times in
            its schedule.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.STATE_ERROR">
            <summary> <p>
            Indicates that the <code>Trigger</code> is in the "error" state.
            </p>
            
            <p>
            A <code>Trigger</code> arrives at the error state when the scheduler
            attempts to fire it, but cannot due to an error creating and executing
            its related job. Often this is due to the <code>Job</code>'s
            class not existing in the classpath.
            </p>
            
            <p>
            When the trigger is in the error state, the scheduler will make no
            attempts to fire it.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.Trigger.STATE_BLOCKED">
            <summary> <p>
            Indicates that the <code>Trigger</code> is in the "blocked" state.
            </p>
            
            <p>
            A <code>Trigger</code> arrives at the blocked state when the job that
            it is associated with is a <code>StatefulJob</code> and it is 
            currently executing.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IStatefulJob">
            </seealso>
        </member>
        <member name="F:Quartz.Trigger.STATE_NONE">
            <summary> <p>
            Indicates that the <code>Trigger</code> does not exist.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.#ctor">
            <summary> <p>
            Create a <code>Trigger</code> with no specified name, group, or <code>{@link org.quartz.JobDetail}</code>.
            </p>
            
            <p>
            Note that the {@link #setName(String)},{@link #setGroup(String)}and
            the {@link #setJobName(String)}and {@link #setJobGroup(String)}methods
            must be called before the <code>Trigger</code> can be placed into a
            {@link Scheduler}.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.#ctor(System.String,System.String)">
            <summary> <p>
            Create a <code>Trigger</code> with the given name, and group.
            </p>
            
            <p>
            Note that the {@link #setJobName(String)}and
            {@link #setJobGroup(String)}methods must be called before the <code>Trigger</code>
            can be placed into a {@link Scheduler}.
            </p>
            
            </summary>
            <param name="group">if <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            
            </param>
            <exception cref="T:System.ArgumentException"> ArgumentException
            if name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.Trigger.#ctor(System.String,System.String,System.String,System.String)">
            <summary> <p>
            Create a <code>Trigger</code> with the given name, and group.
            </p>
            
            </summary>
            <param name="group">if <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            
            </param>
            <exception cref="T:System.ArgumentException"> ArgumentException
            if name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.Trigger.AddTriggerListener(System.String)">
            <summary> <p>
            Add the specified name of a <code>{@link TriggerListener}</code> to
            the end of the <code>Trigger</code>'s list of listeners.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.RemoveTriggerListener(System.String)">
            <summary> <p>
            Remove the specified name of a <code>{@link TriggerListener}</code>
            from the <code>Trigger</code>'s list of listeners.
            </p>
            
            </summary>
            <returns> true if the given name was found in the list, and removed
            </returns>
        </member>
        <member name="M:Quartz.Trigger.Triggered(Quartz.ICalendar)">
            <summary> <p>
            This method should not be used by the Quartz client.
            </p>
            
            <p>
            Called when the <code>{@link Scheduler}</code> has decided to 'fire'
            the trigger (Execute the associated <code>Job</code>), in order to
            give the <code>Trigger</code> a chance to update itself for its next
            triggering (if any).
            </p>
            
            </summary>
            <seealso cref="T:Quartz.JobExecutionException">
            </seealso>
        </member>
        <member name="M:Quartz.Trigger.ComputeFirstFireTime(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            <p>
            Called by the scheduler at the time a <code>Trigger</code> is first
            added to the scheduler, in order to have the <code>Trigger</code>
            compute its first fire time, based on any associated calendar.
            </p>
            
            <p>
            After this method has been called, <code>getNextFireTime()</code>
            should return a valid answer.
            </p>
            
            </summary>
            <returns> 
            The first time at which the <code>Trigger</code> will be fired
            by the scheduler, which is also the same value <code>getNextFireTime()</code>
            will return (until after the first firing of the <code>Trigger</code>).
            </returns>
        </member>
        <member name="M:Quartz.Trigger.ExecutionComplete(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
            <summary> <p>
            This method should not be used by the Quartz client.
            </p>
            
            <p>
            Called after the <code>{@link Scheduler}</code> has executed the
            <code>{@link org.quartz.JobDetail}</code> associated with the <code>Trigger</code>
            in order to get the final instruction code from the trigger.
            </p>
            
            </summary>
            <param name="context">
            is the <code>JobExecutionContext</code> that was used by the
            <code>Job</code>'s<code>Execute(xx)</code> method.
            </param>
            <param name="result">
            is the <code>JobExecutionException</code> thrown by the
            <code>Job</code>, if any (may be null).
            </param>
            <returns> one of the Trigger.INSTRUCTION_XXX constants.
            
            </returns>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_NOOP">
            </seealso>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_RE_EXECUTE_JOB">
            </seealso>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_DELETE_TRIGGER">
            </seealso>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_SET_TRIGGER_COMPLETE">
            </seealso>
            <seealso cref="M:Quartz.Trigger.Triggered(Quartz.ICalendar)">
            </seealso>
        </member>
        <member name="M:Quartz.Trigger.MayFireAgain">
            <summary> <p>
            Used by the <code>{@link Scheduler}</code> to determine whether or not
            it is possible for this <code>Trigger</code> to fire again.
            </p>
            
            <p>
            If the returned value is <code>false</code> then the <code>Scheduler</code>
            may remove the <code>Trigger</code> from the <code>{@link org.quartz.spi.JobStore}</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.GetNextFireTime">
            <summary> <p>
            Returns the next time at which the <code>Trigger</code> will fire. If
            the trigger will not fire again, <code>null</code> will be returned.
            The value returned is not guaranteed to be valid until after the <code>Trigger</code>
            has been added to the scheduler.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.GetPreviousFireTime">
            <summary>
            Returns the previous time at which the <code>Trigger</code> will fire.
            If the trigger has not yet fired, <code>null</code> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Trigger.GetFireTimeAfter(Nullables.NullableDateTime)">
            <summary>
            Returns the next time at which the <code>Trigger</code> will fire,
            after the given time. If the trigger will not fire after the given time,
            <code>null</code> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Trigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> 
            This method should not be used by the Quartz client.
            <p>
            To be implemented by the concrete classes that extend this class.
            </p>
            <p>
            The implementation should update the <code>Trigger</code>'s state
            based on the MISFIRE_INSTRUCTION_XXX that was selected when the <code>Trigger</code>
            was created.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.UpdateWithNewCalendar(Quartz.ICalendar,System.Int64)">
            <summary> 
            This method should not be used by the Quartz client.
            <p>
            The implementation should update the <code>Trigger</code>'s state
            based on the given new version of the associated <code>Calendar</code>
            (the state should be updated so that it's next fire time is appropriate
            given the Calendar's new settings). 
            </p>
            </summary>
            <param name="cal"> </param>
            <param name="misfireThreshold"></param>
        </member>
        <member name="M:Quartz.Trigger.Validate">
            <summary>
            Validates whether the properties of the <code>JobDetail</code> are
            valid for submission into a <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Trigger.ToString">
            <summary> <p>
            Return a simple string representation of this object.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Trigger.CompareTo(System.Object)">
            <summary> <p>
            Compare the next fire time of this <code>Trigger</code> to that of
            another.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Trigger.Name">
            <summary>
            Get or sets the name of this <code>Trigger</code>.
            </summary>
            <exception cref="T:System.ArgumentException">If name is null or empty.</exception>
        </member>
        <member name="P:Quartz.Trigger.Group">
            <summary>
            Get the group of this <code>Trigger</code>. If <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if group is an empty string.
            </exception>
        </member>
        <member name="P:Quartz.Trigger.JobName">
            <summary>
            Get or set the name of the associated <code>{@link org.quartz.JobDetail}</code>.
            </summary> 
            <exception cref="T:System.ArgumentException"> 
            if jobName is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Trigger.JobGroup">
            <summary>
            Gets or sets the name of the associated <code>{@link org.quartz.JobDetail}</code>'s
            group. If set with <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            </summary>
            <exception cref="T:System.ArgumentException"> ArgumentException
            if group is an empty string.
            </exception>
        </member>
        <member name="P:Quartz.Trigger.FullName">
            <summary> <p>
            Returns the 'full name' of the <code>Trigger</code> in the format
            "group.name".
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Trigger.FullJobName">
            <summary> <p>
            Returns the 'full name' of the <code>Job</code> that the <code>Trigger</code>
            points to, in the format "group.name".
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Trigger.Description">
            <summary>
            Get or set the description given to the <code>Trigger</code> instance by
            its creator (if any).
            </summary>
        </member>
        <member name="P:Quartz.Trigger.Volatility">
            <summary>
            Set whether or not the <code>Trigger</code> should be persisted in the
            <code>IJobStore</code> for re-use after program  restarts.
            </summary>
        </member>
        <member name="P:Quartz.Trigger.CalendarName">
            <summary>
            Get or set  the <code>ICalendar</code> with the given name with
            this Trigger. Use <code>null</code> when setting to dis-associate a Calendar.
            </summary>
        </member>
        <member name="P:Quartz.Trigger.JobDataMap">
            <summary>
            Get or set the <code>JobDataMap</code> that is associated with the 
            <code>Trigger</code>.
            <p>
            Changes made to this map during job execution are not re-persisted, and
            in fact typically result in an <code>IllegalStateException</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Trigger.Volatile">
            <summary>
            Whether or not the <code>Trigger</code> should be persisted in the
            <code>IJobStore</code> for re-use after program  restarts.
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Trigger.TriggerListenerNames">
            <summary>
            Returns an array of <code>string</code> s containing the names of all
            <code>TriggerListener</code>s assigned to the <code>Trigger</code>,
            in the order in which they should be notified.
            </summary>
        </member>
        <member name="P:Quartz.Trigger.FinalFireTime">
            <summary>
            Returns the last time at which the <code>Trigger</code> will fire, if
            the Trigger will repeat indefinitely, null will be returned.
            <p>
            Note that the return time *may* be in the past.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Trigger.MisfireInstruction">
            <summary>
            Get or set the instruction the <code>Scheduler</code> should be given for
            handling misfire situations for this <code>Trigger</code>- the
            concrete <code>Trigger</code> type that you are using will have
            defined a set of additional <code>MISFIRE_INSTRUCTION_XXX</code>
            constants that may be passed to this method.
            <p>
            If not explicitly set, the default value is <code>MISFIRE_INSTRUCTION_SMART_POLICY</code>.
            </p>
            </summary>
            <seealso cref="F:Quartz.Trigger.MISFIRE_INSTRUCTION_SMART_POLICY"/>
            <seealso cref="M:Quartz.Trigger.UpdateAfterMisfire(Quartz.ICalendar)"/>
            <seealso cref="T:Quartz.SimpleTrigger"/>
            <seealso cref="T:Quartz.CronTrigger"/>
        </member>
        <member name="P:Quartz.Trigger.FireInstanceId">
            <summary> <p>
            This method should not be used by the Quartz client.
            </p>
            </summary>
            <summary> <p>
            This method should not be used by the Quartz client.
            </p>
            
            <p>
            Usable by <code>{@link org.quartz.spi.JobStore}</code>
            implementations, in order to facilitate 'recognizing' instances of fired
            <code>Trigger</code> s as their jobs complete execution.
            </p>
            
            
            </summary>
        </member>
        <member name="P:Quartz.Trigger.EndTime">
            <summary>
            Returns the date/time on which the trigger must stop firing. This 
            defines the final boundary for trigger firings &#x8212; the trigger will
            not fire after to this date and time. If this value is null, no end time
            boundary is assumed, and the trigger can continue indefinitely.
            
            Sets the date/time on which the trigger must stop firing. This defines
            the final boundary for trigger firings &#x8212; the trigger will not
            fire after to this date and time. If this value is null, no end time
            boundary is assumed, and the trigger can continue indefinitely.
            </summary>
        </member>
        <member name="P:Quartz.Trigger.StartTime">
            <summary>
            Returns the date/time on which the trigger may begin firing. This 
            defines the initial boundary for trigger firings &#x8212; the trigger
            will not fire prior to this date and time.
            </summary>
        </member>
        <member name="P:Quartz.Trigger.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
        </member>
        <member name="T:Quartz.Job.SendMailJob">
            <summary>
            A Job which sends an e-mail with the configured content to the configured
            recipient.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.IJob">
            <summary> 
            The interface to be implemented by classes which represent a 'job' to be
            performed.
            <p>
            Instances of <code>Job</code> must have a <code>public</code>
            no-argument constructor. <code>JobDataMap</code> provides a mechanism for 'instance member data'
            that may be required by some implementations of this interface.
            </p>
            </summary>
            <seealso cref="T:Quartz.JobDetail"/>
            <seealso cref="T:Quartz.IStatefulJob"/>
            <seealso cref="T:Quartz.Trigger"/>
            <seealso cref="T:Quartz.IScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IJob.Execute(Quartz.JobExecutionContext)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            fires that is associated with the <code>Job</code>.
            <p>
            The implementation may wish to set a  result object on the 
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to 
            <code>JobListeners</code> or 
            <code>TriggerListeners</code> that are watching the job's 
            execution.
            </p>
            <param name="context">The execution context.</param>
            </summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_SMTP_HOST">
            <summary> The host name of the smtp server. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_RECIPIENT">
            <summary> The e-mail address to send the mail to. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_CC_RECIPIENT">
            <summary> The e-mail address to cc the mail to. Optional.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_SENDER">
            <summary> The e-mail address to claim the mail is from. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_REPLY_TO">
            <summary> The e-mail address the message should say to reply to. Optional.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_SUBJECT">
            <summary> The subject to place on the e-mail. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PROP_MESSAGE">
            <summary> The e-mail message body. REQUIRED.</summary>
        </member>
        <member name="M:Quartz.Job.SendMailJob.Execute(Quartz.JobExecutionContext)">
            <summary>
            Executes the job.
            </summary>
            <param name="context">The job execution context.</param>
        </member>
        <member name="T:Quartz.Impl.StdJobRunShellFactory">
            <summary> 
            Responsible for creating the instances of <code>JobRunShell</code>
            to be used within the <code>QuartzScheduler</code> instance.
            <p>
            This implementation does not re-use any objects, it simply makes a new
            JobRunShell each time <code>BorrowJobRunShell()</code> is called.
            </p>
            </summary>
            <author>James House</author>
        </member>
        <member name="T:Quartz.Core.IJobRunShellFactory">
            <summary>
            Responsible for creating the instances of <code>JobRunShell</code>
            to be used within the <code>QuartzScheduler</code> instance.
            <p>
            Although this interface looks a lot like an 'object pool', implementations
            do not have to support the re-use of instances. If an implementation does
            not wish to pool instances, then the <code>BorrowJobRunShell()</code>
            method would simply create a new instance, and the <code>ReturnJobRunShell
            </code> method would do nothing.
            </p>
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.IJobRunShellFactory.Initialize(Quartz.IScheduler,Quartz.Core.SchedulingContext)">
            <summary>
            Initialize the factory, providing a handle to the <code>Scheduler</code>
            that should be made available within the <code>JobRunShell</code> and
            the <code>JobExecutionContext</code> s within it, and a handle to the
            <code>SchedulingContext</code> that the shell will use in its own
            operations with the <code>JobStore</code>.
            </summary>
        </member>
        <member name="M:Quartz.Core.IJobRunShellFactory.BorrowJobRunShell">
            <summary>
            Called by the <code>QuartzSchedulerThread</code>
            to obtain instances of <code>JobRunShell</code>.
            </summary>
        </member>
        <member name="M:Quartz.Core.IJobRunShellFactory.ReturnJobRunShell(Quartz.Core.JobRunShell)">
            <summary>
            Called by the <code>QuartzSchedulerThread</code>
            to return instances of <code>JobRunShell</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdJobRunShellFactory.Initialize(Quartz.IScheduler,Quartz.Core.SchedulingContext)">
            <summary>
            Initialize the factory, providing a handle to the <code>Scheduler</code>
            that should be made available within the <code>JobRunShell</code> and
            the <code>JobExecutionCOntext</code> s within it, and a handle to the
            <code>SchedulingContext</code> that the shell will use in its own
            operations with the <code>JobStore</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdJobRunShellFactory.BorrowJobRunShell">
            <summary>
            Called by the <code>QuartzSchedulerThread
            </code> to obtain instances of <code>IJobRunShell</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdJobRunShellFactory.ReturnJobRunShell(Quartz.Core.JobRunShell)">
            <summary>
            Called by the <code>QuartzSchedulerThread</code> to return instances of <code>
            JobRunShell</code>.
            </summary>
        </member>
        <member name="T:Quartz.Impl.DirectSchedulerFactory">
            <summary>
            A singleton implementation of <code>SchedulerFactory</code>.
            <p>
            Here are some examples of using this class:
            </p>
            <p>
            To create a scheduler that does not write anything to the database (is not
            persistent), you can call <code>createVolatileScheduler</code>:
            </p>
            <pre>
            DirectSchedulerFactory.getInstance().createVolatileScheduler(10); // 10 threads 
            // don't forget to start the scheduler: 
            DirectSchedulerFactory.getInstance().getScheduler().start();
            </pre>
            <p>
            Several create methods are provided for convenience. All create methods
            eventually end up calling the create method with all the parameters:
            </p>
            <pre>
            public void createScheduler(String schedulerName, string schedulerInstanceId, ThreadPool threadPool, JobStore jobStore, string rmiRegistryHost, int rmiRegistryPort)
            </pre>
            <p>
            Here is an example of using this method:
            </p>
            <pre>
            // create the thread pool 
            SimpleThreadPool threadPool = new SimpleThreadPool(maxThreads, Thread.NORM_PRIORITY); 
            threadPool.initialize(); 
            // create the job store 
            JobStore jobStore = new RAMJobStore(); 
            jobStore.initialize();
            
            DirectSchedulerFactory.getInstance().createScheduler("My Quartz Scheduler", "My Instance", threadPool, jobStore, "localhost", 1099); 
            // don't forget to start the scheduler: 
            DirectSchedulerFactory.getInstance().getScheduler("My Quartz Scheduler", "My Instance").start();
            </pre>
            <p>
            You can also use a JDBCJobStore instead of the RAMJobStore:
            </p>
            <pre>
            DBConnectionManager.getInstance().addConnectionProvider("someDatasource", new JNDIConnectionProvider("someDatasourceJNDIName"));
            
            JDBCJobStore jdbcJobStore = new JDBCJobStore(); jdbcJobStore.setDataSource("someDatasource"); 
            jdbcJobStore.setPostgresStyleBlobs(true); 
            jdbcJobStore.setTablePrefix("QRTZ_"); 
            jdbcJobStore.setInstanceId("My Instance"); 
            jdbcJobStore.initialize();
            </pre>
            </summary>
            <author>Mohammad Rezaei</author>
            <author>James House</author>
            <seealso cref="T:Quartz.Spi.IJobStore"/>
            <seealso cref="T:System.Threading.ThreadPool"/>
        </member>
        <member name="T:Quartz.ISchedulerFactory">
            <summary> <p>
            Provides a mechanism for obtaining client-usable handles to <code>Scheduler</code>
            instances.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IScheduler">
            </seealso>
            <seealso cref="T:Quartz.Impl.StdSchedulerFactory">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.ISchedulerFactory.GetScheduler">
            <summary>
            Returns a client-usable handle to a <code>Scheduler</code>.
            </summary>
            <throws>  SchedulerException </throws>
            <summary>           if there is a problem with the underlying <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerFactory.GetScheduler(System.String)">
            <summary>
            Returns a handle to the Scheduler with the given name, if it exists.
            </summary>
        </member>
        <member name="P:Quartz.ISchedulerFactory.AllSchedulers">
            <summary> <p>
            Returns handles to all known Schedulers (made by any SchedulerFactory
            within this jvm.).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateVolatileScheduler(System.Int32)">
            <summary>
            Creates an in memory job store (<code>RAMJobStore</code>)
            The thread priority is set to Thread.NORM_PRIORITY
            </summary>
            <param name="maxThreads">The number of threads in the thread pool</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateRemoteScheduler(System.String,System.Int32)">
            <summary>
            Creates a proxy to a remote scheduler. This scheduler can be retrieved
            via DirectSchedulerFactory#GetScheduler()}
            </summary>
            <param name="rmiHost">The hostname for remote scheduler</param>
            <param name="rmiPort">Port for the remote scheduler. The default RMI port is 1099.</param>
            <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateRemoteScheduler(System.String,System.String,System.String,System.Int32)">
             <summary>
             Same as
             DirectSchedulerFactory#createRemoteScheduler(string rmiHost, int rmiPort),
             with the addition of specifying the scheduler name and instance ID. This
             scheduler can only be retrieved via
            DirectSchedulerFactory#getScheduler(string)
             </summary>
             <param name="schedulerName">The name for the scheduler.</param>
             <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
             <param name="rmiHost">The hostname for remote scheduler</param>
             <param name="rmiPort">Port for the remote scheduler. The default RMI port is 1099.</param>
             <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore)">
            <summary> 
            Creates a scheduler using the specified thread pool and job store. This
            scheduler can be retrieved via DirectSchedulerFactory#GetScheduler()
            </summary>
            <param name="threadPool">
            The thread pool for executing jobs
            </param>
            <param name="jobStore">
            The type of job store
            </param>
            <throws>  SchedulerException </throws>
            <summary>           if initialization failed
            </summary>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore)">
            <summary>
            Same as DirectSchedulerFactory#createScheduler(ThreadPool threadPool, JobStore jobStore),
            with the addition of specifying the scheduler name and instance ID. This
            scheduler can only be retrieved via DirectSchedulerFactory#getScheduler(String)
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="jobStore">The type of job store</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore,System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Creates a scheduler using the specified thread pool and job store and
            binds it to RMI.
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="jobStore">The type of job store</param>
            <param name="rmiRegistryHost">The hostname to register this scheduler with for RMI. Can use
            "null" if no RMI is required.</param>
            <param name="rmiRegistryPort">The port for RMI. Typically 1099.</param>
            <param name="idleWaitTime">The idle wait time in milliseconds. You can specify "-1" for
            the default value, which is currently 30000 ms.</param>
            <param name="dbFailureRetryInterval">The db failure retry interval.</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.GetScheduler">
            <summary>
            Returns a handle to the Scheduler produced by this factory.
            <p>
            you must call createRemoteScheduler or createScheduler methods before
            calling getScheduler()
            </p>
            </summary>
            <returns></returns>
            <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.GetScheduler(System.String)">
            <summary>
            Returns a handle to the Scheduler with the given name, if it exists.
            </summary>
        </member>
        <member name="P:Quartz.Impl.DirectSchedulerFactory.AllSchedulers">
            <summary> <p>
            Returns a handle to all known Schedulers (made by any
            StdSchedulerFactory instance.).
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Impl.Calendar.AnnualCalendar">
            <summary>
            This implementation of the Calendar excludes a set of days of the year. You
            may use it to exclude bank holidays which are on the same date every year.
            </summary>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="T:Quartz.Impl.Calendar.BaseCalendar"/>
            <author>Juergen Donnerstag</author>
        </member>
        <member name="T:Quartz.Impl.Calendar.BaseCalendar">
            <summary>
            This implementation of the Calendar may be used (you don't have to) as a
            base class for more sophisticated one's. It merely implements the base
            functionality required by each Calendar.
            <p>
            Regarded as base functionality is the treatment of base calendars. Base
            calendar allow you to chain (stack) as much calendars as you may need. For
            example to exclude weekends you may use WeeklyCalendar. In order to exclude
            holidays as well you may define a WeeklyCalendar instance to be the base
            calendar for HolidayCalendar instance.
            </p>
            </summary>
            <seealso cref="T:Quartz.ICalendar"/> 
            <author>Juergen Donnerstag</author>
            <author>James House</author>
        </member>
        <member name="T:Quartz.ICalendar">
            <summary> 
            An interface to be implemented by objects that define spaces of time that
            should be included or excluded from a <code>{@link Trigger}</code>'s
            normal 'firing' schedule.
            </summary>
            <author>James House</author>
            <author>Juergen Donnerstag</author>
        </member>
        <member name="M:Quartz.ICalendar.IsTimeIncluded(System.DateTime)">
            <summary>
            Determine whether the given time  is 'included' by the
            Calendar.
            </summary>
        </member>
        <member name="M:Quartz.ICalendar.GetNextIncludedTime(System.DateTime)">
            <summary>
            Determine the next time that is 'included' by the
            Calendar after the given time.
            </summary>
        </member>
        <member name="P:Quartz.ICalendar.Description">
            <summary> 
            Gets or sets a description for the <code>Calendar</code> instance - may be
            useful for remembering/displaying the purpose of the calendar, though
            the description has no meaning to Quartz.
            </summary>
        </member>
        <member name="P:Quartz.ICalendar.CalendarBase">
            <summary>
            Set a new base calendar or remove the existing one.
            Get the base calendar.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor">
            <summary> <p>
            Default Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor(Quartz.ICalendar)">
            <summary> <p>
            Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.GetBaseCalendar">
            <summary>
            Get the base calendar. Will be null, if not set.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.IsTimeIncluded(System.DateTime)">
            <summary>
            Check if date/time represented by timeStamp is included. If included
            return true. The implementation of BaseCalendar simply calls the base
            calendars isTimeIncluded() method if base calendar is set.
            </summary>
            <seealso cref="M:Quartz.ICalendar.IsTimeIncluded(System.DateTime)"/>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.GetNextIncludedTime(System.DateTime)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return 0 if all days are excluded.
            </summary>
            <seealso cref="M:Quartz.ICalendar.GetNextIncludedTime(System.DateTime)"/>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.BuildHoliday(System.DateTime)">
            <summary>
            Utility method. Return the date of excludeDate. The time fraction will
            be reset to 00.00:00.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.BaseCalendar.Description">
            <summary> 
            Gets or sets the description given to the <code>Calendar</code> instance by
            its creator (if any).
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.BaseCalendar.CalendarBase">
            <summary>
            Set a new base calendar or remove the existing one
            </summary>
            <value></value>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.#ctor">
            <summary> <p>
            Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.#ctor(Quartz.ICalendar)">
            <summary>
            Constructor
            </summary>
            <param name="baseCalendar">The base calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.IsDayExcluded(Nullables.NullableDateTime)">
            <summary>
            Return true, if day is defined to be exluded.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.SetDayExcluded(Nullables.NullableDateTime,System.Boolean)">
            <summary>
            Redefine a certain day to be excluded (true) or included (false).
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.IsTimeIncluded(System.DateTime)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.GetNextIncludedTime(System.DateTime)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return 0 if all days are excluded.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.AnnualCalendar.DaysExcluded">
            <summary> 
            Get or the array which defines the exclude-value of each day of month.
            Setting will redefine the array of days excluded. The array must of size greater or
            equal 31.
            </summary>
        </member>
        <member name="T:Quartz.Core.QuartzScheduler">
            <summary>
            This is the heart of Quartz, an indirect implementation of the <code>IScheduler</code>
            interface, containing methods to schedule <code>IJob</code>s,
            register <code>IJobListener</code> instances, etc.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.Core.QuartzSchedulerThread"/>
            <seealso cref="T:Quartz.Spi.IJobStore"/>
            <seealso cref="T:Quartz.Spi.IThreadPool"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.#ctor(Quartz.Core.QuartzSchedulerResources,Quartz.Core.SchedulingContext,System.Int64,System.Int32)">
            <summary>
            Create a <code>QuartzScheduler</code> with the given configuration
            properties.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzSchedulerResources"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Bind">
            <summary>
            Bind the scheduler to remoting infrastructure.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.UnBind">
            <summary>
            Un-bind the scheduler from remoting infrastructure.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Start">
            <summary>
            Starts the <code>QuartzScheduler</code>'s threads that fire <code>Trigger</code>s.
            <p>
            All <code>Trigger</code>s that have misfired will
            be passed to the appropriate TriggerListener(s).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Standby">
            <summary>
            Temporarily halts the <code>QuartzScheduler</code>'s firing of <code>Triggers</code>s.
            <p>
            The scheduler is not destroyed, and can be re-started at any time.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Shutdown">
            <summary>
            Halts the <code>QuartzScheduler</code>'s firing of <code>Trigger</code>s,
            and cleans up all resources associated with the QuartzScheduler.
            Equivalent to <code>shutdown(false)</code>.
            <p>
            The scheduler cannot be re-started.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Shutdown(System.Boolean)">
            <summary>
            Halts the <code>QuartzScheduler</code>'s firing of <code>Trigger</code>s,
            and cleans up all resources associated with the QuartzScheduler.
            <p>
            The scheduler cannot be re-started.
            </p>
            </summary>
            <param name="waitForJobsToComplete">
            if <code>true</code> the scheduler will not allow this method
            to return until all currently executing jobs have completed.
            </param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ScheduleJob(Quartz.Core.SchedulingContext,Quartz.JobDetail,Quartz.Trigger)">
            <summary> 
            Add the <code>IJob</code> identified by the given
            <code>JobDetail</code> to the Scheduler, and
            associate the given <code>Trigger</code> with it.
            <p>
            If the given Trigger does not reference any <code>Job</code>, then it
            will be set to reference the Job passed with it into this method.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ScheduleJob(Quartz.Core.SchedulingContext,Quartz.Trigger)">
            <summary>
            Schedule the given <code>Trigger</code> with the
            <code>Job</code> identified by the <code>Trigger</code>'s settings.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddJob(Quartz.Core.SchedulingContext,Quartz.JobDetail,System.Boolean)">
            <summary>
            Add the given <code>Job</code> to the Scheduler - with no associated
            <code>Trigger</code>. The <code>Job</code> will be 'dormant' until
            it is scheduled with a <code>Trigger</code>, or <code>Scheduler.triggerJob()</code>
            is called for it.
            <p>
            The <code>Job</code> must by definition be 'durable', if it is not,
            SchedulerException will be thrown.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.DeleteJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Delete the identified <code>Job</code> from the Scheduler - and any
            associated <code>Trigger</code>s.
            </summary>
            <returns> true if the Job was found and deleted.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.UnscheduleJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Remove the indicated <code>Trigger</code> from the
            scheduler.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RescheduleJob(Quartz.Core.SchedulingContext,System.String,System.String,Quartz.Trigger)">
            <summary>
            Remove (delete) the <code>Trigger</code> with the
            given name, and store the new given one - which must be associated
            with the same job.
            </summary>
            <param name="triggerName">The name of the <code>Trigger</code> to be removed.</param>
            <param name="groupName">The group name of the <code>Trigger</code> to be removed.</param>
            <param name="newTrigger">The new <code>Trigger</code> to be stored.</param>
            <returns>
            <code>null</code> if a <code>Trigger</code> with the given
            name and group was not found and removed from the store, otherwise
            the first fire time of the newly scheduled trigger.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.TriggerJob(Quartz.Core.SchedulingContext,System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Trigger the identified <code>IJob</code> (Execute it now) - with a non-volatile trigger.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.TriggerJobWithVolatileTrigger(Quartz.Core.SchedulingContext,System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Trigger the identified <code>IJob</code> (Execute it
            now) - with a volatile trigger.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Pause the <code>Trigger</code> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseTriggerGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Pause all of the <code>Trigger</code>s in the given group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> 
            Pause the <code>JobDetail</code> with the given
            name - by pausing all of its current <code>Trigger</code>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseJobGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Pause all of the <code>JobDetail</code>s in the
            given group - by pausing all of their <code>Trigger</code>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Resume (un-pause) the <code>Trigger</code> with the given
            name.
            <p>
            If the <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeTriggerGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Resume (un-pause) all of the <code>Trigger</code>s in the
            given group.
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetPausedTriggerGroups(Quartz.Core.SchedulingContext)">
            <summary>
            Gets the paused trigger groups.
            </summary>
            <param name="ctxt">The the job scheduling context.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Resume (un-pause) the <code>JobDetail</code> with
            the given name.
            <p>
            If any of the <code>Job</code>'s<code>Trigger</code> s missed one
            or more fire-times, then the <code>Trigger</code>'s misfire
            instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeJobGroup(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Resume (un-pause) all of the <code>JobDetail</code>s
            in the given group.
            <p>
            If any of the <code>Job</code> s had <code>Trigger</code> s that
            missed one or more fire-times, then the <code>Trigger</code>'s
            misfire instruction will be applied.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseAll(Quartz.Core.SchedulingContext)">
            <summary>
            Pause all triggers - equivalent of calling <code>PauseTriggerGroup(group)</code>
            on every group.
            <p>
            When <code>ResumeAll()</code> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </p>
            </summary>
            <seealso cref="M:Quartz.Core.QuartzScheduler.ResumeAll(Quartz.Core.SchedulingContext)"/>
            <seealso cref="M:Quartz.Core.QuartzScheduler.PauseJob(Quartz.Core.SchedulingContext,System.String,System.String)"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeAll(Quartz.Core.SchedulingContext)">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <code>ResumeTriggerGroup(group)</code>
            on every group.
            <p>
            If any <code>Trigger</code> missed one or more fire-times, then the
            <code>Trigger</code>'s misfire instruction will be applied.
            </p>
            </summary>
            <seealso cref="M:Quartz.Core.QuartzScheduler.PauseAll(Quartz.Core.SchedulingContext)"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobGroupNames(Quartz.Core.SchedulingContext)">
            <summary>
            Get the names of all known <code>IJob</code> groups.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobNames(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Get the names of all the <code>IJob</code>s in the
            given group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggersOfJob(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> 
            Get all <code>Trigger</code> s that are associated with the
            identified <code>JobDetail</code>.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerGroupNames(Quartz.Core.SchedulingContext)">
            <summary>
            Get the names of all known <code>Trigger</code>
            groups.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerNames(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Get the names of all the <code>Trigger</code>s in
            the given group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobDetail(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary> 
            Get the <code>JobDetail</code> for the <code>IJob</code>
            instance with the given name and group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTrigger(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Get the <code>Trigger</code> instance with the given name and
            group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerState(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Get the current state of the identified <code>Trigger</code>.
            </summary>
            <seealso cref="F:Quartz.Trigger.STATE_NORMAL"/>
            <seealso cref="F:Quartz.Trigger.STATE_PAUSED"/>
            <seealso cref="F:Quartz.Trigger.STATE_COMPLETE"/>
            <seealso cref="F:Quartz.Trigger.STATE_ERROR"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddCalendar(Quartz.Core.SchedulingContext,System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Add (register) the given <code>ICalendar</code> to the Scheduler.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.DeleteCalendar(Quartz.Core.SchedulingContext,System.String)">
            <summary>
            Delete the identified <code>ICalendar</code> from the Scheduler.
            </summary>
            <returns> true if the Calendar was found and deleted.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetCalendar(Quartz.Core.SchedulingContext,System.String)">
            <summary> 
            Get the <code>ICalendar}</code> instance with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetCalendarNames(Quartz.Core.SchedulingContext)">
            <summary>
            Get the names of all registered <code>ICalendar</code>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddGlobalJobListener(Quartz.IJobListener)">
            <summary>
            Add the given <code>JobListener</code> to the
            <code>Scheduler</code>'s<i>global</i> list.
            <p>
            Listeners in the 'global' list receive notification of execution events
            for ALL <code>IJob</code>s.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddJobListener(Quartz.IJobListener)">
            <summary>
            Add the given <code>JobListener</code> to the
            <code>Scheduler</code>'s list, of registered <code>JobListener</code>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveGlobalJobListener(Quartz.IJobListener)">
            <summary> 
            Remove the given <code>JobListener</code> from the
            <code>Scheduler</code>'s list of <i>global</i> listeners.
            </summary>
            <returns> 
            true if the identifed listener was found in the list, and removed.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveJobListener(System.String)">
            <summary>
            Remove the identifed <code>IJobListener</code> from
            the <code>Scheduler</code>'s list of registered listeners.
            </summary>
            <returns> 
            true if the identifed listener was found in the list, and removed.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobListener(System.String)">
            <summary>
            Get the <i>non-global</i><code>IJobListener</code> that has the given name.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Add the given <code>ITriggerListener</code> to the
            <code>Scheduler</code>'s<i>global</i> list.
            <p>
            Listeners in the 'global' list receive notification of execution events
            for ALL <code>Trigger</code>s.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddTriggerListener(Quartz.ITriggerListener)">
            <summary> 
            Add the given <code>TriggerListener</code> to the
            <code>Scheduler</code>'s list, of registered <code>TriggerListener</code>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary> 
            Remove the given <code>TriggerListener</code> from
            the <code>Scheduler</code>'s list of <i>global</i> listeners.
            </summary>
            <returns> 
            true if the identifed listener was found in the list, and removed.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveTriggerListener(System.String)">
            <summary>
            Remove the identifed <code>TriggerListener</code>
            from the <code>Scheduler</code>'s list of registered listeners.
            </summary>
            <returns>
            true if the identifed listener was found in the list, and removed.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerListener(System.String)">
            <summary>
            Get the <i>non-global</i><code>TriggerListener</code>
            that has the given name.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Register the given <code>SchedulerListener</code> with the
            <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Remove the given <code>SchedulerListener</code> from the
            <code>Scheduler</code>.
            </summary>
            <returns> 
            true if the identifed listener was found in the list, and removed.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddSchedulerPlugin(Quartz.Spi.ISchedulerPlugin)">
            <summary> 
            Add the given <code>SchedulerPlugin</code> to
            the <code>Scheduler</code>. This method expects the plugin's
            "initialize" method to be invoked externally (either before or after
            this method is called).
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Interrupt(Quartz.Core.SchedulingContext,System.String,System.String)">
            <summary>
            Interrupt all instances of the identified InterruptableJob.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.Version">
            <summary>
            Gets the version of the Quartz Scheduler.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.VersionMajor">
            <summary>
            Gets the version major.
            </summary>
            <value>The version major.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.VersionMinor">
            <summary>
            Gets the version minor.
            </summary>
            <value>The version minor.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerSignaler">
            <summary>
            Gets the scheduler signaler.
            </summary>
            <value>The scheduler signaler.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerName">
            <summary>
            Returns the name of the <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerInstanceId">
            <summary> 
            Returns the instance Id of the <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerContext">
            <summary>
            Returns the <code>SchedulerContext</code> of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.InStandbyMode">
            <summary>
            Reports whether the <code>Scheduler</code> is paused.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.JobStoreClass">
            <summary>
            Gets the job store class.
            </summary>
            <value>The job store class.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.ThreadPoolClass">
            <summary>
            Gets the thread pool class.
            </summary>
            <value>The thread pool class.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.ThreadPoolSize">
            <summary>
            Gets the size of the thread pool.
            </summary>
            <value>The size of the thread pool.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.IsShutdown">
            <summary>
            Reports whether the <code>Scheduler</code> has been shutdown.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.CurrentlyExecutingJobs">
            <summary>
            Return a list of <code>JobExecutionContext</code> objects that
            represent all currently executing Jobs.
            <p>
            Note that the list returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the true list of executing jobs may be different.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.GlobalJobListeners">
            <summary>
            Get a List containing all of the <code>IJobListener</code>
            s in the <code>Scheduler</code>'s<i>global</i> list.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.JobListenerNames">
            <summary>
            Get a Set containing the names of all the <i>non-global</i><code>IJobListener</code>
            s registered with the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.GlobalTriggerListeners">
            <summary>
            Get a list containing all of the <code>TriggerListener</code>
            s in the <code>Scheduler</code>'s<i>global</i> list.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.TriggerListenerNames">
            <summary>
            Get a Set containing the names of all the <i>non-global</i><code>TriggerListener</code>
            s registered with the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerListeners">
            <summary>
            Get a List containing all of the <code>SchedulerListener</code>
            s registered with the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.JobFactory">
            <summary>
            Gets or sets the job factory.
            </summary>
            <value>The job factory.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.NumJobsExecuted">
            <summary>
            Gets the number of jobs executed.
            </summary>
            <value>The number of jobs executed.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SupportsPersistence">
            <summary>
            Gets a value indicating whether this scheduler supports persistence.
            </summary>
            <value><c>true</c> if supports persistence; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Quartz.Core.ErrorLogger">
            <summary>
            ErrorLogger - Scheduler Listener Class
            </summary>
        </member>
        <member name="T:Quartz.ISchedulerListener">
            <summary> <p>
            The interface to be implemented by classes that want to be informed of major
            <code>{@link Scheduler}</code> events.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IScheduler">
            </seealso>
            <seealso cref="T:Quartz.IJobListener">
            </seealso>
            <seealso cref="T:Quartz.ITriggerListener">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobScheduled(Quartz.Trigger)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link org.quartz.JobDetail}</code>
            is scheduled.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobUnscheduled(System.String,System.String)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link org.quartz.JobDetail}</code>
            is unscheduled.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggerFinalized(Quartz.Trigger)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            has reached the condition in which it will never fire again.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggersPaused(System.String,System.String)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            or group of <code>{@link Trigger}s</code> has been paused.
            </p>
            
            <p>
            If a group was paused, then the <code>triggerName</code> parameter
            will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggersResumed(System.String,System.String)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link Trigger}</code>
            or group of <code>{@link Trigger}s</code> has been un-paused.
            </p>
            
            <p>
            If a group was resumed, then the <code>triggerName</code> parameter
            will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobsPaused(System.String,System.String)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link org.quartz.JobDetail}</code>
            or group of <code>{@link org.quartz.JobDetail}s</code> has been
            paused.
            </p>
            
            <p>
            If a group was paused, then the <code>jobName</code> parameter will be
            null. If all jobs were paused, then both parameters will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobsResumed(System.String,System.String)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link org.quartz.JobDetail}</code>
            or group of <code>{@link org.quartz.JobDetail}s</code> has been
            un-paused.
            </p>
            
            <p>
            If a group was resumed, then the <code>jobName</code> parameter will
            be null. If all jobs were paused, then both parameters will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a serious error has
            occured within the scheduler - such as repeated failures in the <code>JobStore</code>,
            or the inability to instantiate a <code>Job</code> instance when its
            <code>Trigger</code> has fired.
            </p>
            
            <p>
            The <code>getErrorCode()</code> method of the given SchedulerException
            can be used to determine more specific information about the type of
            error that was encountered.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerShutdown">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> to inform the listener
            that it has shutdown.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.ErrorLogger.TriggersPaused(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            or group of <code>Trigger</code>s has been paused.
            <p>
            If a group was paused, then the <code>triggerName</code> parameter
            will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.ErrorLogger.TriggersResumed(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            or group of <code>Trigger</code>s has been un-paused.
            <p>
            If a group was resumed, then the <code>triggerName</code> parameter
            will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.ErrorLogger.JobsPaused(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>JobDetail</code>
            or group of <code>JobDetail</code>s has been paused.
            <p>
            If a group was paused, then the <code>jobName</code> parameter will be
            null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Core.ErrorLogger.JobsResumed(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>JobDetail</code>
            or group of <code>JobDetail</code>s has been
            un-paused.
            <p>
            If a group was paused, then the <code>jobName</code> parameter will be
            null.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.IJobListener">
            <summary> <p>
            The interface to be implemented by classes that want to be informed when a
            <code>{@link org.quartz.JobDetail}</code> executes. In general,
            applications that use a <code>Scheduler</code> will not have use for this
            mechanism.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IScheduler">
            </seealso>
            <seealso cref="T:Quartz.IJob">
            </seealso>
            <seealso cref="T:Quartz.JobExecutionContext">
            </seealso>
            <seealso cref="T:Quartz.JobExecutionException">
            </seealso>
            <seealso cref="T:Quartz.ITriggerListener">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.IJobListener.JobToBeExecuted(Quartz.JobExecutionContext)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link org.quartz.JobDetail}</code>
            is about to be executed (an associated <code>{@link Trigger}</code>
            has occured).
            </p>
            
            <p>
            This method will not be invoked if the execution of the Job was vetoed
            by a <code>{@link TriggerListener}</code>.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IJobListener.JobExecutionVetoed(Quartz.JobExecutionContext)">
            </seealso>
        </member>
        <member name="M:Quartz.IJobListener.JobExecutionVetoed(Quartz.JobExecutionContext)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a <code>{@link org.quartz.JobDetail}</code>
            was about to be executed (an associated <code>{@link Trigger}</code>
            has occured), but a <code>{@link TriggerListener}</code> vetoed it's 
            execution.
            </p>
            
            </summary>
            <seealso cref="M:Quartz.IJobListener.JobToBeExecuted(Quartz.JobExecutionContext)">
            </seealso>
        </member>
        <member name="M:Quartz.IJobListener.JobWasExecuted(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> after a <code>{@link org.quartz.JobDetail}</code>
            has been executed, and be for the associated <code>Trigger</code>'s
            <code>triggered(xx)</code> method has been called.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.IJobListener.Name">
            <summary> <p>
            Get the name of the <code>JobListener</code>.
            </p>
            </summary>
        </member>
        <member name="T:IThreadRunnable">
            <summary>
            This interface should be implemented by any class whose instances are intended 
            to be executed by a thread.
            </summary>
        </member>
        <member name="M:IThreadRunnable.Run">
            <summary>
            This method has to be implemented in order that starting of the thread causes the object's 
            run method to be called in that separately executing thread.
            </summary>
        </member>
        <member name="T:SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="F:SupportClass.port">
            <summary>
            Holds the Property Port value
            </summary>
        </member>
        <member name="M:SupportClass.NextLong(System.Random)">
            <summary>
            Creates a new positive random number 
            </summary>
            <param name="random">The last random obtained</param>
            <returns>Returns a new positive random number</returns>
        </member>
        <member name="M:SupportClass.UseDaylightTime(System.TimeZone)">
            <summary>
            This functions determines if the TimeZone uses daylight saving time
            </summary>
            <param name="timezone">TimeZone instance to validate</param>
            <returns>True or false depending if daylight savings time is used</returns>
        </member>
        <member name="P:SupportClass.Port">
            <summary>
            Property used to store and retrive the port used in a remote application
            </summary>
        </member>
        <member name="T:SupportClass.QuartzThread">
            <summary>
            Support class used to handle threads
            </summary>
        </member>
        <member name="F:SupportClass.QuartzThread.thread">
            <summary>
            The instance of System.Threading.Thread
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.#ctor">
            <summary>
            Initializes a new instance of the QuartzThread class
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Name">The name of the thread</param>
        </member>
        <member name="M:SupportClass.QuartzThread.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing</param>
        </member>
        <member name="M:SupportClass.QuartzThread.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing</param>
            <param name="Name">The name of the thread</param>
        </member>
        <member name="M:SupportClass.QuartzThread.Run">
            <summary>
            This method has no functionality unless the method is overridden
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.Start">
            <summary>
            Causes the operating system to change the state of the current thread instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.Interrupt">
            <summary>
            Interrupts a thread that is in the WaitSleepJoin thread state
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.Join">
            <summary>
            Blocks the calling thread until a thread terminates
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.Join(System.Int64)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses
            </summary>
            <param name="MiliSeconds">Time of wait in milliseconds</param>
        </member>
        <member name="M:SupportClass.QuartzThread.Join(System.Int64,System.Int32)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses
            </summary>
            <param name="MiliSeconds">Time of wait in milliseconds</param>
            <param name="NanoSeconds">Time of wait in nanoseconds</param>
        </member>
        <member name="M:SupportClass.QuartzThread.Resume">
            <summary>
            Resumes a thread that has been suspended
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.Abort">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, 
            to begin the process of terminating the thread. Calling this method 
            usually terminates the thread
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.Abort(System.Object)">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, 
            to begin the process of terminating the thread while also providing
            exception information about the thread termination. 
            Calling this method usually terminates the thread.
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted</param>
        </member>
        <member name="M:SupportClass.QuartzThread.Suspend">
            <summary>
            Suspends the thread, if the thread is already suspended it has no effect
            </summary>
        </member>
        <member name="M:SupportClass.QuartzThread.ToString">
            <summary>
            Obtain a string that represents the current object
            </summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="M:SupportClass.QuartzThread.Current">
            <summary>
            Gets the currently running thread
            </summary>
            <returns>The currently running thread</returns>
        </member>
        <member name="P:SupportClass.QuartzThread.Instance">
            <summary>
            Gets the current thread instance
            </summary>
        </member>
        <member name="P:SupportClass.QuartzThread.Name">
            <summary>
            Gets or sets the name of the thread
            </summary>
        </member>
        <member name="P:SupportClass.QuartzThread.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread
            </summary>
        </member>
        <member name="P:SupportClass.QuartzThread.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread
            </summary>
        </member>
        <member name="P:SupportClass.QuartzThread.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
        </member>
        <member name="T:Quartz.Core.QuartzSchedulerResources">
            <summary>
            Contains all of the resources (<code>IJobStore</code>,<code>IThreadPool</code>,
            etc.) necessary to create a <code>QuartzScheduler</code> instance.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.Name">
            <summary>
            Get or set the name for the <code>QuartzScheduler</code>.
            </summary>
            <exception cref="T:System.ArgumentException">
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.InstanceId">
            <summary>
            Get or set the instance Id for the <code>QuartzScheduler</code>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.ThreadName">
            <summary>
            Get or set the name for the <code>QuartzSchedulerThread</code>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.ThreadPool">
            <summary>
            Get or set the <code>ThreadPool</code> for the <code>QuartzScheduler</code>
            to use.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if threadPool is null.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.JobStore">
            <summary>
            Get or set the <code>JobStore</code> for the <code>QuartzScheduler</code>
            to use.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if jobStore is null.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.JobRunShellFactory">
            <summary> 
            Get or set the <code>JobRunShellFactory</code> for the <code>QuartzScheduler</code>
            to use.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if jobRunShellFactory is null.
            </exception>
        </member>
        <member name="T:Quartz.JobDetail">
            <summary> <p>
            Conveys the detail properties of a given <code>Job</code> instance.
            </p>
            
            <p>
            Quartz does not store an actual instance of a <code>Job</code> class, but
            instead allows you to define an instance of one, through the use of a <code>JobDetail</code>.
            </p>
            
            <p>
            <code>Job</code> s have a name and group associated with them, which
            should uniquely identify them within a single <code>{@link Scheduler}</code>.
            </p>
            
            <p>
            <code>Trigger</code> s are the 'mechanism' by which <code>Job</code> s
            are scheduled. Many <code>Trigger</code> s can point to the same <code>Job</code>,
            but a single <code>Trigger</code> can only point to one <code>Job</code>.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IJob">
            </seealso>
            <seealso cref="T:Quartz.IStatefulJob">
            </seealso>
            <seealso cref="P:Quartz.JobDetail.JobDataMap">
            </seealso>
            <seealso cref="T:Quartz.Trigger">
            
            </seealso>
            <author>  James House
            </author>
            <author>  Sharada Jambula
            </author>
        </member>
        <member name="M:Quartz.JobDetail.#ctor">
            <summary> <p>
            Create a <code>JobDetail</code> with no specified name or group, and
            the default settings of all the other properties.
            </p>
            
            <p>
            Note that the {@link #setName(String)},{@link #setGroup(String)}and
            {@link #setJobClass(Class)}methods must be called before the job can be
            placed into a {@link Scheduler}
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobDetail.#ctor(System.String,System.String,System.Type)">
            <summary> <p>
            Create a <code>JobDetail</code> with the given name, and group, and
            the default settings of all the other properties.
            </p>
            If <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            </summary>
            <exception cref="T:System.ArgumentException">
            If name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.JobDetail.#ctor(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary> <p>
            Create a <code>JobDetail</code> with the given name, and group, and
            the given settings of all the other properties.
            </p>
            
            </summary>
            <param name="group">if <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            
            </param>
            <exception cref="T:System.ArgumentException"> ArgumentException
            if nameis null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.JobDetail.Validate">
            <summary> 
            Validates whether the properties of the <code>JobDetail</code> are
            valid for submission into a <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDetail.requestsRecovery">
            <summary> <p>
            Instructs the <code>Scheduler</code> whether or not the <code>Job</code>
            should be re-executed if a 'recovery' or 'fail-over' situation is
            encountered.
            </p>
            
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            
            </summary>
            <seealso cref="P:Quartz.JobExecutionContext.Recovering">
            </seealso>
        </member>
        <member name="M:Quartz.JobDetail.AddJobListener(System.String)">
            <summary>
            Add the specified name of a <code>{@link JobListener}</code> to the
            end of the <code>Job</code>'s list of listeners.
            </summary>
        </member>
        <member name="M:Quartz.JobDetail.RemoveJobListener(System.String)">
            <summary> <p>
            Remove the specified name of a <code>{@link JobListener}</code> from
            the <code>Job</code>'s list of listeners.
            </p>
            
            </summary>
            <returns> true if the given name was found in the list, and removed
            </returns>
        </member>
        <member name="M:Quartz.JobDetail.ToString">
            <summary>
            Return a simple string representation of this object.
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.Name">
            <summary>
            Get or sets the name of this <code>Job</code>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.JobDetail.Group">
            <summary>
            Get or sets the group of this <code>Job</code>. 
            If <code>null</code>, Scheduler.DEFAULT_GROUP will be used.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            If the group is an empty string.
            </exception>
        </member>
        <member name="P:Quartz.JobDetail.FullName">
            <summary> <p>
            Returns the 'full name' of the <code>Trigger</code> in the format
            "group.name".
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.Description">
            <summary>
            Get or set the description given to the <code>Job</code> instance by its
            creator (if any).
            <p>
            May be useful
            for remembering/displaying the purpose of the job, though the
            description has no meaning to Quartz.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.JobClass">
            <summary>
            Get or sets the instance of <code>Job</code> that will be executed.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if jobClass is null or the class is not a <code>Job</code>.
            </exception>
        </member>
        <member name="P:Quartz.JobDetail.JobDataMap">
            <summary>
            Get or set the <code>JobDataMap</code> that is associated with the <code>Job</code>.
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.Volatility">
            <summary> <p>
            Set whether or not the <code>Job</code> should be persisted in the
            <code>{@link org.quartz.spi.JobStore}</code> for re-use after program
            restarts.
            </p>
            
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.Durability">
            <summary> <p>
            Set whether or not the <code>Job</code> should remain stored after it
            is orphaned (no <code>{@link Trigger}s</code> point to it).
            </p>
            
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.RequestsRecovery">
            <summary> <p>
            Set whether or not the the <code>Scheduler</code> should re-Execute
            the <code>Job</code> if a 'recovery' or 'fail-over' situation is
            encountered.
            </p>
            
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            
            </summary>
            <seealso cref="P:Quartz.JobExecutionContext.Recovering">
            </seealso>
        </member>
        <member name="P:Quartz.JobDetail.Volatile">
            <summary> <p>
            Whether or not the <code>Job</code> should not be persisted in the
            <code>{@link org.quartz.spi.JobStore}</code> for re-use after program
            restarts.
            </p>
            
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            
            </summary>
            <returns> <code>true</code> if the <code>Job</code> should be garbage
            collected along with the <code>{@link Scheduler}</code>.
            </returns>
        </member>
        <member name="P:Quartz.JobDetail.Durable">
            <summary> <p>
            Whether or not the <code>Job</code> should remain stored after it is
            orphaned (no <code>{@link Trigger}s</code> point to it).
            </p>
            
            <p>
            If not explicitly set, the default value is <code>false</code>.
            </p>
            
            </summary>
            <returns> <code>true</code> if the Job should remain persisted after
            being orphaned.
            </returns>
        </member>
        <member name="P:Quartz.JobDetail.Stateful">
            <summary> <p>
            Whether or not the <code>Job</code> implements the interface <code>{@link StatefulJob}</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobDetail.JobListenerNames">
            <summary> <p>
            Returns an array of <code>String</code> s containing the names of all
            <code>{@link JobListener}</code> s assigned to the <code>Job</code>,
            in the order in which they should be notified.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.CriticalSchedulerException">
            <summary>
            An exception that is thrown to indicate that there has been a critical
            failure within the scheduler's core services (such as loss of database
            connectivity).
            </summary>
            <author>James House</author>
        </member>
        <member name="M:Quartz.CriticalSchedulerException.#ctor(System.String,System.Int32)">
            <summary>
            Create a <code>CriticalSchedulerException</code> with the given message.
            </summary>
        </member>
        <member name="T:Quartz.Collection.TreeSet">
            <summary>
            SupportClass for the TreeSet class.
            </summary>
        </member>
        <member name="T:Quartz.Collection.ISortedSet">
            <summary>
            A sorted set.
            </summary>
        </member>
        <member name="T:Quartz.Collection.ISet">
            <summary>
            Represents a collection ob objects that contains no duplicate elements.
            </summary>	
        </member>
        <member name="M:Quartz.Collection.ISet.Add(System.Object)">
            <summary>
            Adds a new element to the Collection if it is not already present.
            </summary>
            <param name="obj">The object to add to the collection.</param>
            <returns>Returns true if the object was added to the collection, otherwise false.</returns>
        </member>
        <member name="M:Quartz.Collection.ISet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements of the specified collection to the Set.
            </summary>
            <param name="c">Collection of objects to add.</param>
            <returns>true</returns>
        </member>
        <member name="M:Quartz.Collection.ISet.First">
            <summary>
            Returns the first item in the set.
            </summary>
            <returns>First object.</returns>
        </member>
        <member name="M:Quartz.Collection.ISortedSet.TailSet(System.Object)">
            <summary>
            Returns a portion of the list whose elements are greater than the limit object parameter.
            </summary>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="M:Quartz.Collection.TreeSet.Add(System.Object)">
            <summary>
            Adds a new element to the ArrayList if it is not already present and sorts the ArrayList.
            </summary>
            <param name="obj">Element to insert to the ArrayList.</param>
            <returns>TRUE if the new element was inserted, FALSE otherwise.</returns>
        </member>
        <member name="M:Quartz.Collection.TreeSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements of the specified collection that are not present to the list.
            </summary>		
            <param name="c">Collection where the new elements will be added</param>
            <returns>Returns true if at least one element was added to the collection.</returns>
        </member>
        <member name="M:Quartz.Collection.TreeSet.Contains(System.Object)">
            <summary>
            Determines whether an element is in the the current TreeSetSupport collection. The IComparer defined for 
            the current set will be used to make comparisons between the elements already inserted in the collection and 
            the item specified.
            </summary>
            <param name="item">The object to be locatet in the current collection.</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Quartz.Collection.TreeSet.TailSet(System.Object)">
            <summary>
            Returns a portion of the list whose elements are greater than the limit object parameter.
            </summary>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="P:Quartz.Collection.TreeSet.Comparator">
            <summary>
            Gets the IComparator object used to sort this set.
            </summary>
        </member>
        <member name="T:Quartz.Plugins.Management.ShutdownHookPlugin">
            <summary> This plugin catches the event of the JVM terminating (such as upon a CRTL-C)
            and tells the scheuler to shutdown.
            
            </summary>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.Plugins.Management.ShutdownHookPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary> <p>
            Called during creation of the <code>Scheduler</code> in order to give
            the <code>SchedulerPlugin</code> a chance to initialize.
            </p>
            
            </summary>
            <throws>  SchedulerConfigException </throws>
            <summary>           if there is an error initializing.
            </summary>
        </member>
        <member name="M:Quartz.Plugins.Management.ShutdownHookPlugin.Shutdown">
            <summary>
            Called in order to inform the <code>SchedulerPlugin</code> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.Management.ShutdownHookPlugin.CleanShutdown">
            <summary> 
            Determine whether or not the plug-in is configured to cause a clean
            shutdown of the scheduler.
            <p>
            The default value is <code>true</code>.
            </p>
            </summary>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)">
            </seealso>
        </member>
        <member name="T:Quartz.NthIncludedDayTrigger">
            <summary> 
            A trigger which fires on the N<sup>th</sup> day of every interval type 
            ({@link #INTERVAL_TYPE_WEEKLY}, {@link #INTERVAL_TYPE_MONTHLY} or 
            {@link #INTERVAL_TYPE_YEARLY}) that is <i>not</i> excluded by the associated
            calendar. When determining what the N<sup>th</sup> day of the month or year
            is, <code>NthIncludedDayTrigger</code> will skip excluded days on the 
            associated calendar. This would commonly be used in an N<sup>th</sup> 
            business day situation, in which the user wishes to fire a particular job on
            the N<sup>th</sup> business day (i.e. the 5<sup>th</sup> business day of
            every month). Each <code>NthIncludedDayTrigger</code> also has an associated
            <code>fireAtTime</code> which indicates at what time of day the trigger is
            to fire.
            <p>
            All <code>NthIncludedDayTrigger</code>s default to a monthly interval type
            (fires on the N<SUP>th</SUP> day of every month) with N = 1 (first 
            non-excluded day) and <code>fireAtTime</code> set to 12:00 PM (noon). These
            values can be changed using the {@link #setN}, {@link #setIntervalType}, and
            {@link #setFireAtTime} methods. Users may also want to note the 
            {@link #setNextFireCutoffInterval} and {@link #getNextFireCutoffInterval}
            methods.
            </p>
            <p>
            Take, for example, the following calendar:
            </p>
            <pre>
            July                  August                September
            Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
            1  W       1  2  3  4  5  W                1  2  W
            W  H  5  6  7  8  W    W  8  9 10 11 12  W    W  H  6  7  8  9  W
            W 11 12 13 14 15  W    W 15 16 17 18 19  W    W 12 13 14 15 16  W
            W 18 19 20 21 22  W    W 22 23 24 25 26  W    W 19 20 21 22 23  W
            W 25 26 27 28 29  W    W 29 30 31             W 26 27 28 29 30
            W
            </pre>
            Where W's represent weekend days, and H's represent holidays, all of which
            are excluded on a calendar associated with an 
            <code>NthIncludedDayTrigger</code> with <code>n=5</code> and 
            <code>intervalType=INTERVAL_TYPE_MONTHLY</code>. In this case, the trigger 
            would fire on the 8<sup>th</sup> of July (because of the July 4 holiday), 
            the 5<sup>th</sup> of August, and the 8<sup>th</sup> of September (because 
            of Labor Day).
            
            </summary>
            <author>Aaron Craven</author>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.MISFIRE_INSTRUCTION_FIRE_ONCE_NOW">
            <summary> 
            Instructs the <code>Scheduler</code> that upon a mis-fire situation, the
            <code>NthIncludedDayTrigger</code> wants to be fired now by the 
            <code>Scheduler</code>
            </summary>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.MISFIRE_INSTRUCTION_DO_NOTHING">
            <summary> 
            Instructs the <code>Scheduler</code> that upon a mis-fire situation, the
            <code>NthIncludedDayTrigger</code> wants to have 
            <code>nextFireTime</code> updated to the next time in the schedule after
            the current time, but it does not want to be fired now.
            </summary>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.INTERVAL_TYPE_MONTHLY">
            <summary> 
            Indicates a monthly trigger type (fires on the N<SUP>th</SUP> included
            day of every month).
            </summary>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.INTERVAL_TYPE_YEARLY">
            <summary> indicates a yearly trigger type (fires on the N<SUP>th</SUP> included 
            day of every year).
            </summary>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.INTERVAL_TYPE_WEEKLY">
            <summary> indicates a weekly trigger type (fires on the N<SUP>th</SUP> included
            day of every week). When using this interval type, care must be taken
            not to think of the value of <code>n</code> as an analog to 
            <code>java.util.Calendar.DAY_OF_WEEK</code>. Such a comparison can only
            be drawn when there are no calendars associated with the trigger. To 
            illustrate, consider an <code>NthIncludedDayTrigger</code> with 
            <code>n = 3</code> which is associated with a Calendar excluding
            non-weekdays. The trigger would fire on the 3<SUP>rd</SUP> 
            <I>included</I> day of the week, which would be 4<SUP>th</SUP> 
            <I>actual</I> day of the week.
            </summary>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor">
            <summary> 
            Create an <code>NthIncludedDayTrigger</code> with no specified name,
            group, or <code>JobDetail</code>. This will result initially in a
            default monthly trigger that fires on the first day of every month at
            12:00 PM (<code>n</code>=1, 
            <code>intervalType={@link #INTERVAL_TYPE_MONTHLY}</code>, 
            <code>fireAtTime="12:00"</code>).
            <p>
            Note that <code>setName()</code>, <code>setGroup()</code>, 
            <code>setJobName()</code>, and <code>setJobGroup()</code>, must be 
            called before the <code>NthIncludedDayTrigger</code> can be placed into
            a <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor(System.String,System.String)">
            <summary> 
            Create an <code>NthIncludedDayTrigger</code> with the given name and
            group but no specified <code>JobDetail</code>. This will result 
            initially in a default monthly trigger that fires on the first day of 
            every month at 12:00 PM (<code>n</code>=1, 
            <code>intervalType={@link #INTERVAL_TYPE_MONTHLY}</code>, 
            <code>fireAtTime="12:00"</code>).
            <p>
            Note that <code>setJobName()</code> and <code>setJobGroup()</code> must
            be called before the <code>NthIncludedDayTrigger</code> can be placed 
            into a <code>Scheduler</code>.
            </p>
            </summary>
            <param name="name"> the name for the <code>NthIncludedDayTrigger</code>
            </param>
            <param name="group">the group for the <code>NthIncludedDayTrigger</code>
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Create an <code>NthIncludedDayTrigger</code> with the given name and
            group and the specified <code>JobDetail</code>. This will result 
            initially in a default monthly trigger that fires on the first day of
            every month at 12:00 PM (<code>n</code>=1, 
            <code>intervalType={@link #INTERVAL_TYPE_MONTHLY}</code>, 
            <code>fireAtTime="12:00"</code>).
            
            </summary>
            <param name="name">    the name for the <code>NthIncludedDayTrigger</code>
            </param>
            <param name="group">   the group for the <code>NthIncludedDayTrigger</code>
            </param>
            <param name="jobName"> the name of the job to associate with the 
            <code>NthIncludedDayTrigger</code>
            </param>
            <param name="jobGroup">the group containing the job to associate with the 
            <code>NthIncludedDayTrigger</code>
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetNextFireTime">
            <summary> 
            Returns the next time at which the <code>NthIncludedDayTrigger</code>
            will fire. If the trigger will not fire again, <code>null</code> will be
            returned. 
            <p>
            Because of the conceptual design of <code>NthIncludedDayTrigger</code>,
            it is not always possible to decide with certainty that the trigger
            will <I>never</I> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            {@link #setNextFireCutoffInterval(int)} and 
            {@link #getNextFireCutoffInterval()} methods. The default cutoff is 12
            of the intervals specified by <code>{@link #getIntervalType()
            intervalType}</code>.
            </p>
            <p>
            The returned value is not guaranteed to be valid until after
            the trigger has been added to the scheduler.
            </p>
            </summary>
            <returns> the next fire time for the trigger
            </returns>
            <seealso cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> 
            <seealso cref="M:Quartz.NthIncludedDayTrigger.GetFireTimeAfter(Nullables.NullableDateTime)"/>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetPreviousFireTime">
            <summary> Returns the previous time at which the 
            <code>NthIncludedDayTrigger</code> fired. If the trigger has not yet 
            fired, <code>null</code> will be returned.
            
            </summary>
            <returns> the previous fire time for the trigger
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetFireTimeAfter(Nullables.NullableDateTime)">
            <summary>
            Returns the first time the <code>NthIncludedDayTrigger</code> will fire
            after the specified date. 
            <P> 
            Because of the conceptual design of <code>NthIncludedDayTrigger</code>,
            it is not always possible to decide with certainty that the trigger
            will <I>never</I> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            {@link #setNextFireCutoffInterval(int)} and 
            {@link #getNextFireCutoffInterval()} methods. The default cutoff is 12
            of the intervals specified by <code>{@link #getIntervalType()
            intervalType}</code>.
            </P>
            <P>
            Therefore, for triggers with <code>intervalType = 
            {@link NthIncludedDayTrigger#INTERVAL_TYPE_WEEKLY 
            INTERVAL_TYPE_WEEKLY}</code>, if the trigger will not fire within 12
            weeks after the given date/time, <code>null</code> will be returned. For
            triggers with <code>intervalType = 
            {@link NthIncludedDayTrigger#INTERVAL_TYPE_MONTHLY
            INTERVAL_TYPE_MONTHLY}</code>, if the trigger will not fire within 12 
            months after the given date/time, <code>null</code> will be returned. 
            For triggers with <code>intervalType = 
            {@link NthIncludedDayTrigger#INTERVAL_TYPE_YEARLY 
            INTERVAL_TYPE_YEARLY}</code>, if the trigger will not fire within 12
            years after the given date/time, <code>null</code> will be returned.  In 
            all cases, if the trigger will not fire before <code>endTime</code>, 
            <code>null</code> will be returned.
            </P>
            </summary>
            <param name="afterTime">The time after which to find the nearest fire time.
            This argument is treated as exclusive &#x8212; that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified
            date
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <code>Scheduler</code> has decided to 'fire' the trigger
            (Execute the associated <code>Job</code>), in order to give the 
            <code>Trigger</code> a chance to update itself for its next triggering 
            (if any).
            </summary>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.ComputeFirstFireTime(Quartz.ICalendar)">
            <summary>
            Called by the scheduler at the time a <code>Trigger</code> is first
            added to the scheduler, in order to have the <code>Trigger</code>
            compute its first fire time, based on any associated calendar.
            <p>
            After this method has been called, <code>getNextFireTime()</code>
            should return a valid answer.
            </p>
            
            </summary>
            <returns> the first time at which the <code>Trigger</code> will be fired
            by the scheduler, which is also the same value 
            {@link #getNextFireTime()} will return (until after the first 
            firing of the <code>Trigger</code>).
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.ExecutionComplete(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
            <summary> 
            Called after the <code>Scheduler</code> has executed the 
            <code>JobDetail</code> associated with the <code>Trigger</code> in order
            to get the final instruction code from the trigger.
            </summary>
            <param name="jobCtx">
            The <code>JobExecutionContext</code> that was used by the
            <code>Job</code>'s <code>Execute()</code> method.
            </param>
            <param name="result">
            The <code>JobExecutionException</code> thrown by the
            <code>Job</code>, if any (may be <code>null</code>)
            </param>
            <returns> one of the Trigger.INSTRUCTION_XXX constants.
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.MayFireAgain">
            <summary> 
            Used by the <code>Scheduler</code> to determine whether or not it is
            possible for this <code>Trigger</code> to fire again.
            <P>
            If the returned value is <code>false</code> then the 
            <code>Scheduler</code> may remove the <code>Trigger</code> from the
            <code>JobStore</code>
            </P>
            </summary>
            <returns> a boolean indicator of whether the trigger could potentially fire
            again
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.ValidateMisfireInstruction(System.Int32)">
            <summary> Indicates whether <code>misfireInstruction</code> is a valid misfire
            instruction for this <code>Trigger</code>.
            
            </summary>
            <returns> whether <code>misfireInstruction</code> is valid.
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> Updates the <code>NthIncludedDayTrigger</code>'s state based on the
            MISFIRE_INSTRUCTION_XXX that was selected when the 
            <code>NthIncludedDayTrigger</code> was created
            <P>
            If the misfire instruction is set to MISFIRE_INSTRUCTION_SMART_POLICY,
            then the instruction will be interpreted as 
            {@link #MISFIRE_INSTRUCTION_FIRE_ONCE_NOW}.
            </P>
            </summary>
            <param name="cal">a new or updated calendar to use for the trigger
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.UpdateWithNewCalendar(Quartz.ICalendar,System.Int64)">
            <summary> Updates the <code>NthIncludedDayTrigger</code>'s state based on the 
            given new version of the associated <code>Calendar</code>. 
            
            </summary>
            <param name="cal">        a new or updated calendar to use for the trigger
            </param>
            <param name="misfireThreshold">the amount of time (in milliseconds) that must
            be between &quot;now&quot; and the time the next
            firing of the trigger is supposed to occur.
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetWeeklyFireTimeAfter(Nullables.NullableDateTime)">
            <summary> Calculates the first time an <code>NthIncludedDayTrigger</code> with 
            <code>intervalType = {@link #INTERVAL_TYPE_WEEKLY}</code> will fire 
            after the specified date. See {@link #getNextFireTime} for more 
            information.
            
            </summary>
            <param name="afterDate">The time after which to find the nearest fire time.
            This argument is treated as exclusive &#x8212; that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified
            date
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetMonthlyFireTimeAfter(System.DateTime)">
            <summary> 
            Calculates the first time an <code>NthIncludedDayTrigger</code> with 
            <code>intervalType = {@link #INTERVAL_TYPE_MONTHLY}</code> will fire 
            after the specified date. See {@link #getNextFireTime} for more 
            information.
            </summary>
            <param name="afterDate">
            The time after which to find the nearest fire time.
            This argument is treated as exclusive &#x8212; that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified date </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetYearlyFireTimeAfter(Nullables.NullableDateTime)">
            <summary> Calculates the first time an <code>NthIncludedDayTrigger</code> with 
            <code>intervalType = {@link #INTERVAL_TYPE_YEARLY}</code> will fire 
            after the specified date. See {@link #getNextFireTime} for more 
            information.
            
            </summary>
            <param name="afterDate">The time after which to find the nearest fire time.
            This argument is treated as exclusive &#x8212; that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified
            date
            </returns>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.N">
            <summary> 
            Returns the day of the interval on which the 
            <code>NthIncludedDayTrigger</code> should fire.
            
            Sets the day of the interval on which the 
            <code>NthIncludedDayTrigger</code> should fire. If the N<SUP>th</SUP>
            day of the interval does not exist (i.e. the 32<SUP>nd</SUP> of a 
            month), the trigger simply will never fire. N may not be less than 1.
            </summary>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.IntervalType">
            <summary> 
            Returns the interval type for the <code>NthIncludedDayTrigger</code>.
            
            Sets the interval type for the <code>NthIncludedDayTrigger</code>. If
            {@link #INTERVAL_TYPE_MONTHLY}, the trigger will fire on the 
            N<SUP>th</SUP> included day of every month. If 
            {@link #INTERVAL_TYPE_YEARLY}, the trigger will fire on the 
            N<SUP>th</SUP> included day of every year. If 
            {@link #INTERVAL_TYPE_WEEKLY}, the trigger will fire on the 
            N<SUP>th</SUP> included day of every month. 
            </summary>
            <seealso cref="F:Quartz.NthIncludedDayTrigger.INTERVAL_TYPE_WEEKLY">
            </seealso>
            <seealso cref="F:Quartz.NthIncludedDayTrigger.INTERVAL_TYPE_MONTHLY">
            </seealso>
            <seealso cref="F:Quartz.NthIncludedDayTrigger.INTERVAL_TYPE_YEARLY">
            </seealso>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.FireAtTime">
             <summary>
             Returns the fire time for the <code>NthIncludedDayTrigger</code> as a
             string with the format &quot;HH:MM&quot;, with HH representing the 
             24-hour clock hour of the fire time.
            
             Sets the fire time for the <code>NthIncludedDayTrigger</code>, which
             should be represented as a string with the format &quot;HH:MM&quot;, 
             with HH representing the 24-hour clock hour of the fire time. Hours can
             be represented as either a one-digit or two-digit number.
             </summary>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval">
            <summary> 
            Returns the <code>nextFireCutoffInterval</code> for the 
            <code>NthIncludedDayTrigger</code>.
            <P>
            Because of the conceptual design of <code>NthIncludedDayTrigger</code>,
            it is not always possible to decide with certainty that the trigger
            will <I>never</I> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            {@link #setNextFireCutoffInterval(int)} and 
            {@link #getNextFireCutoffInterval()} methods. The default cutoff is 12
            of the intervals specified by <code>{@link #getIntervalType()
            intervalType}</code>.
            </P>
            <p>
            Because of the conceptual design of <code>NthIncludedDayTrigger</code>,
            it is not always possible to decide with certainty that the trigger
            will <I>never</I> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            {@link #setNextFireCutoffInterval(int)} and 
            {@link #getNextFireCutoffInterval()} methods. The default cutoff is 12
            of the intervals specified by <code>{@link #getIntervalType()
            intervalType}</code>.
            </p>
            <P>
            In most cases, the default value of this setting (12) is sufficient (it
            is highly unlikely, for example, that you will need to look at more than
            12 months of dates to ensure that your trigger will never fire again).  
            However, this setting is included to allow for the rare exceptions where
            this might not be true.
            </P>
            <P>
            For example, if your trigger is associated with a calendar that excludes
            a great many dates in the next 12 months, and hardly any following that,
            it is possible (if <code>n</code> is large enough) that you could run 
            into this situation.  
            </P>
            </summary>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.FinalFireTime">
            <summary>
            Returns the last time the <code>NthIncludedDayTrigger</code> will fire.
            If the trigger will not fire at any point between <code>startTime</code>
            and <code>endTime</code>, <code>null</code> will be returned.
            </summary>
            <returns> the last time the trigger will fire.
            </returns>
        </member>
        <member name="T:Quartz.Impl.Calendar.WeeklyCalendar">
            <summary>
            This implementation of the Calendar excludes a set of days of the week. You
            may use it to exclude weekends for example. But you may define any day of
            the week.
            </summary>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="T:Quartz.Impl.Calendar.BaseCalendar"/>
            <author>Juergen Donnerstag</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.#ctor">
            <summary> <p>
            Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.#ctor(Quartz.ICalendar)">
            <summary> <p>
            Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.Init">
            <summary>
            Initialize internal variables
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.IsDayExcluded(System.Int32)">
            <summary> 
            Return true, if wday (see Calendar.get()) is defined to be exluded. E. g.
            saturday and sunday.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.SetDayExcluded(System.Int32,System.Boolean)">
            <summary>
            Redefine a certain day of the week to be excluded (true) or included
            (false). Use java.util.Calendar's constants like MONDAY to determine the
            wday.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.AreAllDaysExcluded">
            <summary>
            Check if all week ays are excluded. That is no day is included.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.IsTimeIncluded(System.DateTime)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.GetNextIncludedTime(System.DateTime)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return DateTime.MinValue if all days are excluded.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.WeeklyCalendar.DaysExcluded">
            <summary> 
            Get the array with the week days.
            Setting will redefine the array of days excluded. The array must of size greater or
            equal 8. java.util.Calendar's constants like MONDAY should be used as
            index. A value of true is regarded as: exclude it.
            </summary>
        </member>
        <member name="T:Quartz.Collection.HashSet">
            <summary>
            A hash based set.
            </summary>
        </member>
        <member name="M:Quartz.Collection.HashSet.Add(System.Object)">
            <summary>
            Adds a new element to the ArrayList if it is not already present.
            </summary>		
            <param name="obj">Element to insert to the ArrayList.</param>
            <returns>Returns true if the new element was inserted, false otherwise.</returns>
        </member>
        <member name="M:Quartz.Collection.HashSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements of the specified collection that are not present to the list.
            </summary>
            <param name="c">Collection where the new elements will be added</param>
            <returns>Returns true if at least one element was added, false otherwise.</returns>
        </member>
        <member name="M:Quartz.Collection.HashSet.Clone">
            <summary>
            Returns a copy of the HashSet instance.
            </summary>		
            <returns>Returns a shallow copy of the current HashSet.</returns>
        </member>
        <member name="T:Quartz.SchedulerConfigException">
            <summary> <p>
            An exception that is thrown to indicate that there is a misconfiguration of
            the <code>SchedulerFactory</code>- or one of the components it
            configures.
            </p>
            
            </summary>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.SchedulerConfigException.#ctor(System.String)">
            <summary> <p>
            Create a <code>JobPersistenceException</code> with the given message.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerConfigException.#ctor(System.String,System.Exception)">
            <summary> <p>
            Create a <code>JobPersistenceException</code> with the given message
            and cause.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.IStatefulJob">
            <summary>
            A marker interface for <code>JobDetail</code> s that
            wish to have their state maintained between executions.
            <p>
            <code>StatefulJob</code> instances follow slightly different rules from
            regular <code>Job</code> instances. The key difference is that their
            associated <code>JobDataMap</code> is re-persisted after every
            execution of the job, thus preserving state for the next execution. The
            other difference is that stateful jobs are not allowed to Execute
            concurrently, which means new triggers that occur before the completion of
            the <code>Execute(xx)</code> method will be delayed.
            </p>
            </summary>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.JobDetail"/>
            <seealso cref="T:Quartz.JobDataMap"/>
            <seealso cref="T:Quartz.IScheduler"/> 
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.Calendar.MonthlyCalendar">
            <summary>
            This implementation of the Calendar excludes a set of days of the month. You
            may use it to exclude every 1. of each month for example. But you may define
            any day of a month.
            </summary>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="T:Quartz.Impl.Calendar.BaseCalendar"/>
            <author>Juergen Donnerstag</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.#ctor">
            <summary> <p>
            Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.#ctor(Quartz.ICalendar)">
            <summary> <p>
            Constructor
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.Init">
            <summary> 
            Initialize internal variables
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.IsDayExcluded(System.Int32)">
            <summary>
            Return true, if mday is defined to be exluded.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.SetDayExcluded(System.Int32,System.Boolean)">
            <summary>
            Redefine a certain day of the month to be excluded (true) or included
            (false).
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.AreAllDaysExcluded">
            <summary>
            Check if all days are excluded. That is no day is included.
            </summary>
            <returns> boolean
            </returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.IsTimeIncluded(System.DateTime)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.GetNextIncludedTime(System.DateTime)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return DateTime.MinValue if all days are excluded.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.MonthlyCalendar.DaysExcluded">
            <summary>
            Get or set the array which defines the exclude-value of each day of month
            Setting will redefine the array of days excluded. The array must of size greater or
            equal 31.
            </summary>
        </member>
        <member name="T:Quartz.Util.Pair">
            <summary> <p>
            Utility class for storing two pieces of information together.
            </p>
            
            </summary>
            <author>  <a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a>
            </author>
        </member>
        <member name="M:Quartz.Util.Pair.Equals(System.Object)">
            <summary>
            Test equality of this object with that.
            </summary>
            <param name="that">object to compare </param>
            <returns> true if objects are equal, false otherwise</returns>
        </member>
        <member name="P:Quartz.Util.Pair.First">
            <summary> 
            Get or sets the first object in the pair.
            </summary>
        </member>
        <member name="P:Quartz.Util.Pair.Second">
            <summary> 
            Get or sets the second object in the pair.
            </summary>
        </member>
        <member name="T:Quartz.Util.Key">
            <summary>
            object representing a job or trigger key.
            </summary>
            <author>  <a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a>
            </author>
        </member>
        <member name="M:Quartz.Util.Key.#ctor(System.String,System.String)">
            <summary> Construct a new key with the given name and group.
            
            </summary>
            <param name="name">
            the name
            </param>
            <param name="group">
            the group
            </param>
        </member>
        <member name="M:Quartz.Util.Key.ToString">
            <summary> <p>
            Return the string representation of the key. The format will be:
            &lt;group&gt;.&lt;name&gt;.
            </p>
            
            </summary>
            <returns> the string representation of the key
            </returns>
        </member>
        <member name="P:Quartz.Util.Key.Name">
            <summary>
            Get the name portion of the key.
            </summary>
            <returns> the name
            </returns>
        </member>
        <member name="P:Quartz.Util.Key.Group">
            <summary> <p>
            Get the group portion of the key.
            </p>
            
            </summary>
            <returns> the group
            </returns>
        </member>
        <member name="T:Quartz.SchedulerMetaData">
            <summary> <p>
            Describes the settings and capabilities of a given <code>{@link Scheduler}</code>
            instance.
            </p>
            
            </summary>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.SchedulerMetaData.ToString">
            <summary> <p>
            Return a simple string representation of this object.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerName">
            <summary> <p>
            Returns the name of the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerInstanceId">
            <summary> <p>
            Returns the instance Id of the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerClass">
            <summary> <p>
            Returns the class-name of the <code>Scheduler</code> instance.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerRemote">
            <summary> <p>
            Returns whether the <code>Scheduler</code> is being used remotely (via
            RMI).
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Started">
            <summary> <p>
            Returns whether the scheduler has been started.
            </p>
            
            <p>
            Note: <code>isStarted()</code> may return <code>true</code> even if
            <code>isPaused()</code> returns <code>true</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Paused">
            <summary> <p>
            Reports whether the <code>Scheduler</code> is paused.
            </p>
            
            <p>
            Note: <code>isStarted()</code> may return <code>true</code> even if
            <code>isPaused()</code> returns <code>true</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Shutdown">
            <summary> <p>
            Reports whether the <code>Scheduler</code> has been shutdown.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.JobStoreClass">
            <summary> <p>
            Returns the class-name of the <code>JobStore</code> instance that is
            being used by the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.ThreadPoolClass">
            <summary> <p>
            Returns the class-name of the <code>ThreadPool</code> instance that is
            being used by the <code>Scheduler</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.ThreadPoolSize">
            <summary> <p>
            Returns the number of threads currently in the <code>Scheduler</code>'s
            <code>ThreadPool</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Version">
            <summary> <p>
            Returns the version of Quartz that is running.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Summary">
            <summary> <p>
            Returns a formatted (human readable) string describing all the <code>Scheduler</code>'s
            meta-data values.
            </p>
            
            <p>
            The format of the string looks something like this:
            
            <pre>
            
            
            Quartz Scheduler 'SchedulerName' with instanceId 'SchedulerInstanceId' Scheduler class: 'org.quartz.impl.StdScheduler' - running locally. Running since: '11:33am on Jul 19, 2002' Not currently paused. Number of Triggers fired: '123' Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with '8' threads Using job-store 'org.quartz.impl.JDBCJobStore' - which supports persistence.
            </pre>
            
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.RunningSince">
            <summary> <p>
            Returns the <code>Date</code> at which the Scheduler started running.
            </p>
            
            </summary>
            <returns> null if the scheduler has not been started.
            </returns>
        </member>
        <member name="P:Quartz.SchedulerMetaData.NumJobsExecuted">
            <summary> <p>
            Returns the number of jobs executed since the <code>Scheduler</code>
            started..
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.JobStoreSupportsPersistence">
            <summary> <p>
            Returns whether or not the <code>Scheduler</code>'s<code>JobStore</code>
            instance supports persistence.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Impl.StdSchedulerFactory">
            <summary> <p>
            An implementation of <code>{@link quartz.SchedulerFactory}</code> that
            does all of it's work of creating a <code>QuartzScheduler</code> instance
            based on the contenents of a <code>Properties</code> file.
            </p>
            
            <p>
            By default a properties file named "quartz.properties" is loaded from the
            'current working directory'. If that fails, then the "quartz.properties"
            file located (as a resource) in the org/quartz package is loaded. If you
            wish to use a file other than these defaults, you must define the system
            property 'quartz.properties' to* point to the file you want.
            </p>
            
            <p>
            See the sample properties files that are distributed with Quartz for
            information about the various settings available within the file.
            </p>
            
            <p>
            Alternativly, you can explicitly initialize the factory by calling one of
            the <code>initialize(xx)</code> methods before calling <code>getScheduler()</code>.
            </p>
            
            <p>
            Instances of the specified <code>{@link quartz.spi.JobStore}</code>,
            <code>{@link quartz.spi.ThreadPool}</code>, classes will be created
            by name, and then any additional properties specified for them in the config
            file will be set on the instance by calling an equivalent 'set' method. For
            example if the properties file contains the property 'quartz.jobStore.
            myProp = 10' then after the JobStore class has been instantiated, the method
            'setMyProp()' will be called on it. Type conversion to primitive Java types
            (int, long, float, double, boolean, and String) are performed before calling
            the propertie's setter method.
            </p>
            
            </summary>
            <author>James House</author>
            <author>Anthony Eden</author>
            <author>Mohammad Rezaei</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.Initialize">
            <summary>
            Initialize the <code>SchedulerFactory</code> with
            the contenents of a <code>Properties</code> file.
            
            <p>
            By default a properties file named "quartz.properties" is loaded from
            the 'current working directory'. If that fails, then the
            "quartz.properties" file located (as a resource) in the org/quartz
            package is loaded. If you wish to use a file other than these defaults,
            you must define the system property 'quartz.properties' to point to
            the file you want.
            </p>
            
            <p>
            System properties (envrionment variables, and -D definitions on the
            command-line when running the JVM) over-ride any properties in the
            loaded file.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.OverrideWithSysProps(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new name value collection and overrides its values
            with system values (environment variables).
            </summary>
            <param name="props">The base properties to override.</param>
            <returns>A new NameValueCollection instance.</returns>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary> 
            Initialize the <code>SchedulerFactory</code> with
            the contenents of the given <code>Properties</code> object.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.Instantiate">
            <summary>  </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.GetScheduler">
            <summary> <p>
            Returns a handle to the Scheduler produced by this factory.
            </p>
            
            <p>
            If one of the <code>initialize</code> methods has not be previously
            called, then the default (no-arg) <code>initialize()</code> method
            will be called by this method.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.GetScheduler(System.String)">
            <summary> <p>
            Returns a handle to the Scheduler with the given name, if it exists (if
            it has already been instantiated).
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdSchedulerFactory.DefaultScheduler">
            <summary>
            Returns a handle to the default Scheduler, creating it if it does not
            yet exist.
            </summary>
            <seealso cref="M:Quartz.Impl.StdSchedulerFactory.Initialize">
            </seealso>
        </member>
        <member name="P:Quartz.Impl.StdSchedulerFactory.AllSchedulers">
            <summary> <p>
            Returns a handle to all known Schedulers (made by any
            StdSchedulerFactory instance.).
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Core.QuartzSchedulerThread">
            <summary>
            The thread responsible for performing the work of firing <code>Trigger</code>
            s that are registered with the <code>QuartzScheduler</code>.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.Trigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.#ctor(Quartz.Core.QuartzScheduler,Quartz.Core.QuartzSchedulerResources,Quartz.Core.SchedulingContext)">
            <summary>
            Construct a new <code>QuartzSchedulerThread</code> for the given
            <code>QuartzScheduler</code> as a non-daemon <code>Thread</code>
            with normal priority.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.#ctor(Quartz.Core.QuartzScheduler,Quartz.Core.QuartzSchedulerResources,Quartz.Core.SchedulingContext,System.Boolean,System.Int32)">
            <summary>
            Construct a new <code>QuartzSchedulerThread</code> for the given
            <code>QuartzScheduler</code> as a <code>Thread</code> with the given
            attributes.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.TogglePause(System.Boolean)">
            <summary>
            Signals the main processing loop to pause at the next possible point.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.halt">
            <summary>
            Signals the main processing loop to pause at the next possible point.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.SignalSchedulingChange">
            <summary>
            Signals the main processing loop that a change in scheduling has been
            made - in order to interrupt any sleeping that may be occuring while
            waiting for the fire time to arrive.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.Run">
            <summary>
            The main processing loop of the <code>QuartzSchedulerThread</code>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.IdleWaitTime">
            <summary>
            Sets the idle wait time.
            </summary>
            <value>The idle wait time.</value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.RandomizedIdleWaitTime">
            <summary>
            Gets the randomized idle wait time.
            </summary>
            <value>The randomized idle wait time.</value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.Paused">
            <summary>
            Gets a value indicating whether this <see cref="T:Quartz.Core.QuartzSchedulerThread"/> is paused.
            </summary>
            <value><c>true</c> if paused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.DbFailureRetryInterval">
            <summary>
            Gets or sets the db failure retry interval.
            </summary>
            <value>The db failure retry interval.</value>
        </member>
        <member name="T:Quartz.Spi.ITimeBroker">
            <summary> 
            The interface to be implemented by classes that want to provide a mechanism
            by which the <code>QuartzScheduler</code> can
            reliably determine the current time.
            <p>
            In general, the default implementation of this interface (<code>{@link org.quartz.simpl.SimpleTimeBroker}</code>-
            which simply uses <code>System.getCurrentTimeMillis()</code> )is
            sufficient. However situations may exist where this default scheme is
            lacking in its robustsness - especially when Quartz is used in a clustered
            configuration. For example, if one or more of the machines in the cluster
            has a system time that varies by more than a few seconds from the clocks on
            the other systems in the cluster, scheduling confusion will result.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Spi.ITimeBroker.Initialize">
            <summary> <p>
            Called by the QuartzScheduler before the <code>TimeBroker</code> is
            used, in order to give the it a chance to initialize.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.ITimeBroker.Shutdown">
            <summary> <p>
            Called by the QuartzScheduler to inform the <code>TimeBroker</code>
            that it should free up all of it's resources because the scheduler is
            shutting down.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Spi.ITimeBroker.CurrentTime">
            <summary>
            Get the current time, as known by the <code>TimeBroker</code>.
            </summary>
            <throws>  SchedulerException </throws>
            <summary>           with the error code set to
            SchedulerException.ERR_TIME_BROKER_FAILURE
            </summary>
        </member>
        <member name="T:Quartz.Impl.StdScheduler">
            <summary>
            An implementation of the <code>Scheduler</code> interface that directly
            proxies all method calls to the equivalent call on a given <code>QuartzScheduler</code>
            instance.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <seealso cref="T:Quartz.Core.SchedulingContext"/>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetCurrentlyExecutingJobs">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetPausedTriggerGroups">
            <seealso cref="M:Quartz.Core.QuartzScheduler.GetPausedTriggerGroups(Quartz.Core.SchedulingContext)">
            </seealso>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.#ctor(Quartz.Core.QuartzScheduler,Quartz.Core.SchedulingContext)">
            <summary>
            Construct a <code>StdScheduler</code> instance to proxy the given
            <code>QuartzScheduler</code> instance, and with the given <code>SchedulingContext</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Start">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Standby">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Shutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Shutdown(System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ScheduleJob(Quartz.JobDetail,Quartz.Trigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ScheduleJob(Quartz.Trigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddJob(Quartz.JobDetail,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.DeleteJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.UnscheduleJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RescheduleJob(System.String,System.String,Quartz.Trigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.TriggerJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.TriggerJob(System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.TriggerJobWithVolatileTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.TriggerJobWithVolatileTrigger(System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseTriggerGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseJobGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeTriggerGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeJobGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseAll">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeAll">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggersOfJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetJobNames(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggerNames(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetJobDetail(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggerState(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.DeleteCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddGlobalJobListener(Quartz.IJobListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddJobListener(Quartz.IJobListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RemoveGlobalJobListener(Quartz.IJobListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RemoveJobListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetJobListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RemoveGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RemoveTriggerListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggerListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RemoveSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.SchedulerName">
            <summary>
            Returns the name of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.SchedulerInstanceId">
            <summary>
            Returns the instance Id of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.Context">
            <summary>
            Returns the <code>SchedulerContext</code> of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.InStandbyMode">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.IsShutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.JobGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.TriggerGroupNames">
            <summary> 
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.CalendarNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.GlobalJobListeners">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.JobListenerNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.GlobalTriggerListeners">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.TriggerListenerNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.SchedulerListeners">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.JobFactory">
            <seealso cref="P:Quartz.IScheduler.JobFactory">
            </seealso>
        </member>
        <member name="T:Quartz.Spi.IThreadPool">
            <summary>
            The interface to be implemented by classes that want to provide a thread
            pool for the <code>IQuartzScheduler</code>'s use.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.RunInThread(IThreadRunnable)">
            <summary> <p>
            Execute the given <code>{@link java.lang.Runnable}</code> in the next
            available <code>Thread</code>.
            </p>
            
            <p>
            The implementation of this interface should not throw exceptions unless
            there is a serious problem (i.e. a serious misconfiguration). If there
            are no available threads, rather it should either queue the Runnable, or
            block until a thread is available, depending on the desired strategy.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.Initialize">
            <summary> <p>
            Called by the QuartzScheduler before the <code>ThreadPool</code> is
            used, in order to give the it a chance to initialize.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.Shutdown(System.Boolean)">
            <summary> <p>
            Called by the QuartzScheduler to inform the <code>ThreadPool</code>
            that it should free up all of it's resources because the scheduler is
            shutting down.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Simpl.SimpleInstanceIdGenerator">
            <summary> 
            The default InstanceIdGenerator used by Quartz when instance id is to be
            automatically generated.  Instance id is of the form HOSTNAME + CURRENT_TIME.
            </summary>
            <seealso cref="T:Quartz.Spi.IInstanceIdGenerator">
            </seealso>
            <seealso cref="T:Quartz.Simpl.HostnameInstanceIdGenerator">
            </seealso>
        </member>
        <member name="T:Quartz.Spi.IInstanceIdGenerator">
            <summary>
            An IInstanceIdGenerator is responsible for generating the clusterwide unique 
            instance id for a <code>Scheduler</code> nodde.
            <p>
            This interface may be of use to those wishing to have specific control over 
            the mechanism by which the <code>Scheduler</code> instances in their 
            application are named.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.Simpl.SimpleInstanceIdGenerator"/>
        </member>
        <member name="M:Quartz.Spi.IInstanceIdGenerator.GenerateInstanceId">
            <summary> Generate the instance id for a <code>Scheduler</code>
            
            </summary>
            <returns> The clusterwide unique instance id.
            </returns>
        </member>
        <member name="T:Quartz.ObjectAlreadyExistsException">
            <summary>
            An exception that is thrown to indicate that an attempt to store a new
            object (i.e. <code>{@link org.quartz.JobDetail}</code>,<code>{@link Trigger}</code>
            or <code>{@link Calendar}</code>) in a <code>{@link Scheduler}</code>
            failed, because one with the same name and group already exists.
            </summary>
            <author>James House</author>
        </member>
        <member name="T:Quartz.JobPersistenceException">
            <summary> <p>
            An exception that is thrown to indicate that there has been a failure in the
            scheduler's underlying persistence mechanism.
            </p>
            
            </summary>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.String)">
            <summary> <p>
            Create a <code>JobPersistenceException</code> with the given message.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.String,System.Int32)">
            <summary> <p>
            Create a <code>JobPersistenceException</code> with the given message
            and error code.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.String,System.Exception)">
            <summary> <p>
            Create a <code>JobPersistenceException</code> with the given message
            and cause.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.String,System.Exception,System.Int32)">
            <summary> <p>
            Create a <code>JobPersistenceException</code> with the given message,
            cause and error code.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(System.String)">
            <summary> <p>
            Create a <code>ObjectAlreadyExistsException</code> with the given
            message.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(Quartz.JobDetail)">
            <summary> <p>
            Create a <code>ObjectAlreadyExistsException</code> and auto-generate a
            message using the name/group from the given <code>JobDetail</code>.
            </p>
            
            <p>
            The message will read: <br />"Unable to store Job with name: '__' and
            group: '__', because one already exists with this identification."
            </p>
            </summary>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(Quartz.Trigger)">
            <summary> <p>
            Create a <code>ObjectAlreadyExistsException</code> and auto-generate a
            message using the name/group from the given <code>Trigger</code>.
            </p>
            
            <p>
            The message will read: <br />"Unable to store Trigger with name: '__' and
            group: '__', because one already exists with this identification."
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Job.FileScanJob">
            <summary> 
            Inspects a file and compares whether it's "last modified date" has changed
            since the last time it was inspected.  If the file has been updated, the
            job invokes a "call-back" method on an identified 
            <code>FileScanListener</code> that can be found in the 
            <code>SchedulerContext</code>.
            </summary>
            <author>James House</author>
            <seealso cref="T:Quartz.Job.IFileScanListener"/>
        </member>
        <member name="M:Quartz.Job.FileScanJob.Execute(Quartz.JobExecutionContext)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            fires that is associated with the <code>Job</code>.
            <p>
            The implementation may wish to set a  result object on the
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to
            <code>JobListeners</code> or
            <code>TriggerListeners</code> that are watching the job's
            execution.
            </p>
            </summary>
            <param name="context">The execution context.</param>
            <seealso cref="T:Quartz.IJob">
            </seealso>
        </member>
        <member name="M:Quartz.Job.FileScanJob.GetLastModifiedDate(System.String)">
            <summary>
            Gets the last modified date.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Util.DBConnectionManager">
            <summary>
            Manages a collection of ConnectionProviders, and provides transparent access
            to their connections.
            
            </summary>
            <seealso cref="T:Quartz.Util.IConnectionProvider">
            </seealso>
            <author>James House</author>
            <author>Sharada Jambula</author>
            <author>Mohammad Rezaei</author>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.#ctor">
            <summary> 
            Private constructor
            </summary>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.GetConnection(System.String)">
            <summary> Get a database connection from the DataSource with the given name.
            
            </summary>
            <returns> a database connection
            </returns>
            <exception cref="T:System.Exception"> 
            if an error occurs, or there is no DataSource with the
            given name.
            </exception>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.Shutdown(System.String)">
            <summary> Shuts down database connections from the DataSource with the given name,
            if applicable for the underlying provider.
            
            </summary>
            <returns> a database connection
            </returns>
            <exception cref="T:System.Exception"> 
            if an error occurs, or there is no DataSource with the
            given name.
            </exception>
        </member>
        <member name="P:Quartz.Util.DBConnectionManager.Instance">
            <summary> 
            Get the class instance.
            </summary>
            <returns> an instance of this class
            </returns>
        </member>
        <member name="T:Quartz.Simpl.LoadingLoaderClassLoadHelper">
            <summary>
            A <code>ClassLoadHelper</code> that uses either the loader of it's own
            class (<code>this.getClass().getClassLoader().loadClass( .. )</code>).
            </summary>
            <seealso cref="T:Quartz.Spi.IClassLoadHelper"/>
            <seealso cref="T:Quartz.Simpl.SimpleClassLoadHelper"/>
            <seealso cref="T:Quartz.Simpl.CascadingClassLoadHelper"/>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Simpl.LoadingLoaderClassLoadHelper.Initialize">
            <summary> 
            Called to give the ClassLoadHelper a chance to initialize itself,
            including the oportunity to "steal" the class loader off of the calling
            thread, which is the thread that is initializing Quartz.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.LoadingLoaderClassLoadHelper.LoadClass(System.String)">
            <summary> Return the class with the given name.</summary>
        </member>
        <member name="M:Quartz.Simpl.LoadingLoaderClassLoadHelper.GetResource(System.String)">
            <summary> Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.net.URL object
            </returns>
        </member>
        <member name="M:Quartz.Simpl.LoadingLoaderClassLoadHelper.GetResourceAsStream(System.String)">
            <summary> Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.io.InputStream object
            </returns>
        </member>
        <member name="T:Quartz.Job.IFileScanListener">
            <summary> 
            Interface for objects wishing to receive a 'call-back' from a 
            <code>FileScanJob</code>.
            </summary>
            <author>James House</author>
            <seealso cref="T:Quartz.Job.FileScanJob"/>
        </member>
        <member name="M:Quartz.Job.IFileScanListener.FileUpdated(System.String)">
            <summary>
            Ïnforms that certain file has been updated.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:Quartz.Impl.RemoteScheduler">
             <summary>
             An implementation of the <code>Scheduler</code> interface that remotely
             proxies all method calls to the equivalent call on a given <code>QuartzScheduler</code>
             instance, via RMI.
             </summary>
             <seealso cref="T:Quartz.IScheduler"/>
             <seealso cref="T:Quartz.Core.QuartzScheduler"/>
             <seealso cref="T:Quartz.Core.SchedulingContext"/>
            
             <author>James House</author>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetCurrentlyExecutingJobs">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetPausedTriggerGroups">
            <summary>
            Get the names of all <code>Trigger</code> groups that are paused.
            </summary>
            <value></value>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.#ctor(Quartz.Core.SchedulingContext,System.String,System.String,System.Int32)">
            <summary>
            Construct a <code>RemoteScheduler</code> instance to proxy the given
            <code>RemoteableQuartzScheduler</code> instance, and with the given
            <code>SchedulingContext</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Start">
            <summary> 
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Standby">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Shutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Shutdown(System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ScheduleJob(Quartz.JobDetail,Quartz.Trigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ScheduleJob(Quartz.Trigger)">
            <summary> 
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddJob(Quartz.JobDetail,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.DeleteJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.UnscheduleJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RescheduleJob(System.String,System.String,Quartz.Trigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.TriggerJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.TriggerJob(System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.TriggerJobWithVolatileTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.TriggerJobWithVolatileTrigger(System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseTriggerGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseJob(System.String,System.String)">
            <summary> 
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseJobGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeTriggerGroup(System.String)">
            <summary> 
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeJobGroup(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseAll">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeAll">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetJobNames(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggersOfJob(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggerNames(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetJobDetail(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTrigger(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggerState(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.DeleteCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddGlobalJobListener(Quartz.IJobListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddJobListener(Quartz.IJobListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RemoveGlobalJobListener(Quartz.IJobListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RemoveJobListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetJobListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RemoveGlobalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RemoveTriggerListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggerListener(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RemoveSchedulerListener(Quartz.ISchedulerListener)">
            <summary> 
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Interrupt(System.String,System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.SchedulerName">
            <summary>
            Returns the name of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.SchedulerInstanceId">
            <summary>
            Returns the instance Id of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.Context">
            <summary> 
            Returns the <code>SchedulerContext</code> of the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.InStandbyMode">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.IsShutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.JobGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.TriggerGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.CalendarNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>,
            passing the <code>SchedulingContext</code> associated with this
            instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.GlobalJobListeners">
            <summary>
            Calls the equialent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.JobListenerNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.GlobalTriggerListeners">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.TriggerListenerNames">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.SchedulerListeners">
            <summary>
            Calls the equivalent method on the 'proxied' <code>QuartzScheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.JobFactory">
            <summary>
            Set the <code>JobFactory</code> that will be responsible for producing
            instances of <code>Job</code> classes.
            <p>
            JobFactories may be of use to those wishing to have their application
            produce <code>Job</code> instances via some special mechanism, such as to
            give the opertunity for dependency injection.
            </p>
            </summary>
            <value></value>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
            <throws>  SchedulerException </throws>
        </member>
        <member name="T:Quartz.Core.JobRunShell">
            <summary> 
            JobRunShell instances are responsible for providing the 'safe' environment
            for <code>Job</code> s to run in, and for performing all of the work of
            executing the <code>Job</code>, catching ANY thrown exceptions, updating
            the <code>Trigger</code> with the <code>Job</code>'s completion code,
            etc.
            <p>
            A <code>JobRunShell</code> instance is created by a <code>JobRunShellFactory</code>
            on behalf of the <code>QuartzSchedulerThread</code> which then runs the
            shell in a thread from the configured <code>ThreadPool</code> when the
            scheduler determines that a <code>Job</code> has been triggered.
            </p>
            </summary>
            <seealso cref="T:Quartz.Core.IJobRunShellFactory"/> 
            <seealso cref="T:Quartz.Core.QuartzSchedulerThread"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.Trigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.JobRunShell.#ctor(Quartz.Core.IJobRunShellFactory,Quartz.IScheduler,Quartz.Core.SchedulingContext)">
            <summary>
            Create a JobRunShell instance with the given settings.
            </summary>
            <param name="jobRunShellFactory">A handle to the <code>JobRunShellFactory</code> that produced
            this <code>JobRunShell</code>.</param>
            <param name="scheduler">The <code>Scheduler</code> instance that should be made
            available within the <code>JobExecutionContext</code>.</param>
            <param name="schdCtxt">the <code>SchedulingContext</code> that should be used by the
            <code>JobRunShell</code> when making updates to the <code>JobStore</code>.</param>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Initialize(Quartz.Core.QuartzScheduler,Quartz.Spi.TriggerFiredBundle)">
            <summary>
            Initializes the job execution context with given scheduler and bundle.
            </summary>
            <param name="sched">The scheduler.</param>
            <param name="firedBundle">The bundle offired triggers.</param>
        </member>
        <member name="M:Quartz.Core.JobRunShell.RequestShutdown">
            <summary>
            Requests the shutdown.
            </summary>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Run">
            <summary>
            This method has to be implemented in order that starting of the thread causes the object's
            run method to be called in that separately executing thread.
            </summary>
        </member>
        <member name="T:Quartz.Spi.TriggerFiredBundle">
            <summary>
            A simple class (structure) used for returning execution-time data from the
            JobStore to the <code>QuartzSchedulerThread</code>.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.FireTime">
            <returns> Returns the fireTime.
            </returns>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.NextFireTime">
            <returns> Returns the nextFireTime.
            </returns>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.PrevFireTime">
            <returns> Returns the prevFireTime.
            </returns>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.ScheduledFireTime">
            <returns> Returns the scheduledFireTime.
            </returns>
        </member>
        <member name="T:Quartz.Simpl.SimpleTimeBroker">
            <summary> <p>
            The interface to be implemented by classes that want to provide a mechanism
            by which the <code>{@link org.quartz.core.QuartzScheduler}</code> can
            reliably determine the current time.
            </p>
            
            <p>
            In general, the default implementation of this interface (<code>{@link org.quartz.simpl.SimpleTimeBroker}</code>-
            which simply uses <code>System.getCurrentTimeMillis()</code> )is
            sufficient. However situations may exist where this default scheme is
            lacking in its robustsness - especially when Quartz is used in a clustered
            configuration. For example, if one or more of the machines in the cluster
            has a system time that varies by more than a few seconds from the clocks on
            the other systems in the cluster, scheduling confusion will result.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="P:Quartz.Simpl.SimpleTimeBroker.CurrentTime">
            <summary> <p>
            Get the current time, simply using <code>new Date()</code>.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Simpl.HostnameInstanceIdGenerator">
            <summary>
            <code>IInstanceIdGenerator</code> that names the scheduler instance using 
            just the machine hostname.
            <p>
            This class is useful when you know that your scheduler instance will be the 
            only one running on a particular machine.  Each time the scheduler is 
            restarted, it will get the same instance id as long as the machine is not 
            renamed.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.Spi.IInstanceIdGenerator"/>
            <seealso cref="T:Quartz.Simpl.SimpleInstanceIdGenerator"/>
        </member>
        <member name="T:Quartz.SimpleTrigger">
            <summary> 
            A concrete <code>Trigger</code> that is used to fire a <code>JobDetail</code>
            at a given moment in time, and optionally repeated at a specified interval.
            </summary>
            <seealso cref="T:Quartz.Trigger"/>
            <seealso cref="T:Quartz.CronTrigger"/>
            <seealso cref="T:Quartz.TriggerUtils"/>
            
            <author>James House</author>
            <author>Contributions by Lieven Govaerts of Ebitec Nv, Belgium.</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.SimpleTrigger.MISFIRE_INSTRUCTION_FIRE_NOW">
            <summary> 
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link SimpleTrigger}</code> wants to be fired
            now by <code>Scheduler</code>.
            <p>
            <i>NOTE:</i> This instruction should typically only be used for
            'one-shot' (non-repeating) Triggers. If it is used on a trigger with a
            repeat count > 0 then it is equivalent to the instruction <code>{@link #MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT}
            </code>.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link SimpleTrigger}</code> wants to be
            re-scheduled to 'now' (even if the associated <code>{@link Calendar}</code>
            excludes 'now') with the repeat count left as-is.
            </p>
            
            <p>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the start-time and repeat-count that it was originally setup with (this
            is only an issue if you for some reason wanted to be able to tell what
            the original values were at some later time).
            </p>
            
            <p>
            <i>NOTE:</i> This instruction could cause the <code>Trigger</code>
            to go to the 'COMPLETE' state after firing 'now', if all the
            repeat-fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link SimpleTrigger}</code> wants to be
            re-scheduled to 'now' (even if the associated <code>{@link Calendar}</code>
            excludes 'now') with the repeat count set to what it would be, if it had
            not missed any firings.
            </p>
            
            <p>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the start-time and repeat-count that it was originally setup with (this
            is only an issue if you for some reason wanted to be able to tell what
            the original values were at some later time).
            </p>
            
            <p>
            <i>NOTE:</i> This instruction could cause the <code>Trigger</code>
            to go to the 'COMPLETE' state after firing 'now', if all the
            repeat-fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT">
            <summary> <p>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link SimpleTrigger}</code> wants to be
            re-scheduled to the next scheduled time after 'now' - taking into
            account any associated <code>{@link Calendar}</code>, and with the
            repeat count set to what it would be, if it had not missed any firings.
            </p>
            
            <p>
            <i>NOTE/WARNING:</i> This instruction could cause the <code>Trigger</code>
            to go directly to the 'COMPLETE' state if all fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT">
            <summary>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link SimpleTrigger}</code> wants to be
            re-scheduled to the next scheduled time after 'now' - taking into
            account any associated <code>{@link Calendar}</code>, and with the
            repeat count left unchanged.
            <p>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the repeat-count that it was originally setup with (this is only an
            issue if you for some reason wanted to be able to tell what the original
            values were at some later time).
            </p>
            <p>
            <i>NOTE/WARNING:</i> This instruction could cause the <code>Trigger</code>
            to go directly to the 'COMPLETE' state if all fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="F:Quartz.SimpleTrigger.REPEAT_INDEFINITELY">
            <summary>
            Used to indicate the 'repeat count' of the trigger is indefinite. Or in
            other words, the trigger should repeat continually until the trigger's
            ending timestamp.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.#ctor">
            <summary>
            Create a <code>SimpleTrigger</code> with no settings.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.#ctor(System.String,System.String)">
            <summary>
            Create a <code>SimpleTrigger</code> that will occur immediately, and
            not repeat.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.#ctor(System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Create a <code>SimpleTrigger</code> that will occur immediately, and
            repeat at the the given interval the given number of times.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Create a <code>SimpleTrigger</code> that will occur at the given time,
            and not repeat.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.#ctor(System.String,System.String,System.DateTime,Nullables.NullableDateTime,System.Int32,System.Int64)">
            <summary> 
            Create a <code>SimpleTrigger</code> that will occur at the given time,
            and repeat at the the given interval the given number of times, or until
            the given end time.
            </summary>
            <param name="startTime">
            A <code>Date</code> set to the time for the <code>Trigger</code> to fire.
            </param>
            <param name="endTime">
            A <code>Date</code> set to the time for the <code>Trigger</code>
            to quit repeat firing.
            </param>
            <param name="repeatCount">
            The number of times for the <code>Trigger</code> to repeat
            firing, use {@link #REPEAT_INDEFINITELY}for unlimitted times.
            </param>
            <param name="repeatInterval">
            The number of milliseconds to pause between the repeat firing.
            </param>
        </member>
        <member name="M:Quartz.SimpleTrigger.#ctor(System.String,System.String,System.String,System.String,System.DateTime,Nullables.NullableDateTime,System.Int32,System.Int64)">
            <summary> 
            Create a <code>SimpleTrigger</code> that will occur at the given time,
            fire the identified <code>Job</code> and repeat at the the given
            interval the given number of times, or until the given end time.
            </summary>
            <param name="startTime">
            A <code>Date</code> set to the time for the <code>Trigger</code>
            to fire.
            </param>
            <param name="endTime">
            A <code>Date</code> set to the time for the <code>Trigger</code>
            to quit repeat firing.
            </param>
            <param name="repeatCount">
            The number of times for the <code>Trigger</code> to repeat
            firing, use REPEAT_INDEFINITELY for unlimitted times.
            </param>
            <param name="repeatInterval">
            The number of milliseconds to pause between the repeat firing.
            </param>
        </member>
        <member name="M:Quartz.SimpleTrigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary>
            Updates the <code>SimpleTrigger</code>'s state based on the
            MISFIRE_INSTRUCTION_XXX that was selected when the <code>SimpleTrigger</code>
            was created.
            <p>
            If the misfire instruction is set to MISFIRE_INSTRUCTION_SMART_POLICY,
            then the following scheme will be used: <br />
            <ul>
            <li>If the Repeat Count is <code>0</code>, then the instruction will
            be interpreted as <code>MISFIRE_INSTRUCTION_FIRE_NOW</code>.</li>
            <li>If the Repeat Count is <code>REPEAT_INDEFINITELY</code>, then
            the instruction will be interpreted as <code>MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT</code>.
            <b>WARNING:</b> using MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT 
            with a trigger that has a non-null end-time may cause the trigger to 
            never fire again if the end-time arrived during the misfire time span. 
            </li>
            <li>If the Repeat Count is <code>> 0</code>, then the instruction
            will be interpreted as <code>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT</code>.
            </li>
            </ul>
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <code>{@link Scheduler}</code> has decided to 'fire'
            the trigger (Execute the associated <code>Job</code>), in order to
            give the <code>Trigger</code> a chance to update itself for its next
            triggering (if any).
            </summary>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.SimpleTrigger.ComputeFirstFireTime(Quartz.ICalendar)">
            <summary>
            Called by the scheduler at the time a <code>Trigger</code> is first
            added to the scheduler, in order to have the <code>Trigger</code>
            compute its first fire time, based on any associated calendar.
            <p>
            After this method has been called, <code>getNextFireTime()</code>
            should return a valid answer.
            </p>
            </summary>
            <returns> 
            The first time at which the <code>Trigger</code> will be fired
            by the scheduler, which is also the same value <code>getNextFireTime()</code>
            will return (until after the first firing of the <code>Trigger</code>).
            </returns>
        </member>
        <member name="M:Quartz.SimpleTrigger.ExecutionComplete(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called after the <code>{@link Scheduler}</code> has executed the
            <code>{@link org.quartz.JobDetail}</code> associated with the <code>Trigger</code>
            in order to get the final instruction code from the trigger.
            </summary>
            <param name="context">
            is the <code>JobExecutionContext</code> that was used by the
            <code>Job</code>'s<code>Execute(xx)</code> method.
            </param>
            <param name="result">
            is the <code>JobExecutionException</code> thrown by the
            <code>Job</code>, if any (may be null).
            </param>
            <returns> 
            One of the Trigger.INSTRUCTION_XXX constants.
            </returns>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_NOOP"/>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_RE_EXECUTE_JOB"/>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_DELETE_TRIGGER"/>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_SET_TRIGGER_COMPLETE"/>
            <seealso cref="M:Quartz.SimpleTrigger.Triggered(Quartz.ICalendar)"/>
        </member>
        <member name="M:Quartz.SimpleTrigger.GetNextFireTime">
            <summary>
            Returns the next time at which the <code>SimpleTrigger</code> will
            fire. If the trigger will not fire again, <code>null</code> will be
            returned. The value returned is not guaranteed to be valid until after
            the <code>Trigger</code> has been added to the scheduler.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.GetPreviousFireTime">
            <summary>
            Returns the previous time at which the <code>SimpleTrigger</code> will
            fire. If the trigger has not yet fired, <code>null</code> will be
            returned.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.SetNextFireTime(Nullables.NullableDateTime)">
            <summary>
            Set the next time at which the <code>SimpleTrigger</code> should fire.
            <strong>This method should not be invoked by client code.</strong>
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.SetPreviousFireTime(Nullables.NullableDateTime)">
            <summary>
            Set the previous time at which the <code>SimpleTrigger</code> fired.
            <strong>This method should not be invoked by client code.</strong>
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.GetFireTimeAfter(Nullables.NullableDateTime)">
            <summary> 
            Returns the next time at which the <code>SimpleTrigger</code> will
            fire, after the given time. If the trigger will not fire after the given
            time, <code>null</code> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.GetFireTimeBefore(Nullables.NullableDateTime)">
            <summary>
            Returns the last time at which the <code>SimpleTrigger</code> will
            fire, before the given time. If the trigger will not fire before the
            given time, <code>null</code> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.MayFireAgain">
            <summary> 
            Determines whether or not the <code>SimpleTrigger</code> will occur
            again.
            </summary>
        </member>
        <member name="M:Quartz.SimpleTrigger.Validate">
            <summary>
            Validates whether the properties of the <code>JobDetail</code> are
            valid for submission into a <code>Scheduler</code>.
            </summary>
        </member>
        <member name="P:Quartz.SimpleTrigger.RepeatCount">
            <summary>
            Get or set thhe number of times the <code>SimpleTrigger</code> should
            repeat, after which it will be automatically deleted.
            </summary>
            <seealso cref="F:Quartz.SimpleTrigger.REPEAT_INDEFINITELY"/>
        </member>
        <member name="P:Quartz.SimpleTrigger.RepeatInterval">
            <summary>
            Get or set the the time interval (in milliseconds) at which the <code>SimpleTrigger</code>
            should repeat.
            </summary>
        </member>
        <member name="P:Quartz.SimpleTrigger.TimesTriggered">
            <summary>
            Get or set the number of times the <code>SimpleTrigger</code> has already
            fired.
            </summary>
        </member>
        <member name="P:Quartz.SimpleTrigger.FinalFireTime">
            <summary> 
            Returns the final time at which the <code>SimpleTrigger</code> will
            fire, if repeatCount is REPEAT_INDEFINITELY, null will be returned.
            <p>
            Note that the return time may be in the past.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.SimpleTrigger.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.JobExecutionException">
            <summary> <p>
            An exception that can be thrown by a <code>{@link org.quartz.Job}</code>
            to indicate to the Quartz <code>{@link Scheduler}</code> that an error
            occured while executing, and whether or not the <code>Job</code> requests
            to be re-fired immediately (using the same <code>{@link JobExecutionContext}</code>,
            or whether it wants to be unscheduled.
            </p>
            
            <p>
            Note that if the flag for 'refire immediately' is set, the flags for
            unscheduling the Job are ignored.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IJob">
            </seealso>
            <seealso cref="T:Quartz.JobExecutionContext">
            </seealso>
            <seealso cref="T:Quartz.SchedulerException">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor">
            <summary> <p>
            Create a JobExcecutionException, with the 're-fire immediately' flag set
            to <code>false</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Exception)">
            <summary> <p>
            Create a JobExcecutionException, with the given cause.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.String)">
            <summary> <p>
            Create a JobExcecutionException, with the given message.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Boolean)">
            <summary> <p>
            Create a JobExcecutionException with the 're-fire immediately' flag set
            to the given value.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Exception,System.Boolean)">
            <summary> <p>
            Create a JobExcecutionException with the given underlying exception, and
            the 're-fire immediately' flag set to the given value.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary> <p>
            Create a JobExcecutionException with the given message, and underlying
            exception, and the 're-fire immediately' flag set to the given value.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.JobExecutionContext">
            <summary> <p>
            A context bundle containing handles to various environment information, that
            is given to a <code>{@link org.quartz.JobDetail}</code> instance as it is
            executed, and to a <code>{@link Trigger}</code> instance after the
            execution completes.
            </p>
            
            <p>
            The <code>JobDataMap</code> found on this object (via the 
            <code>getMergedJobDataMap()</code> method) serves as a convenience -
            it is a merge of the <code>JobDataMap</code> found on the 
            <code>JobDetail</code> and the one found on the <code>Trigger</code>, with 
            the value in the latter overriding any same-named values in the former.
            <i>It is thus considered a 'best practice' that the Execute code of a Job
            retrieve data from the JobDataMap found on this object</i>  NOTE: Do not
            expect value 'set' into this JobDataMap to somehow be set back onto a
            <code>StatefulJob</code>'s own JobDataMap.
            </p>
            
            <p>
            <code>JobExecutionContext</code> s are also returned from the 
            <code>Scheduler.getCurrentlyExecutingJobs()</code>
            method. These are the same instances as those past into the jobs that are
            currently executing within the scheduler. The exception to this is when your
            application is using Quartz remotely (i.e. via RMI) - in which case you get
            a clone of the <code>JobExecutionContext</code>s, and their references to
            the <code>Scheduler</code> and <code>Job</code> instances have been lost (a
            clone of the <code>JobDetail</code> is still available - just not a handle
            to the job instance that is running).
            </p>
            
            </summary>
            <seealso cref="P:Quartz.JobExecutionContext.JobDetail"/> 
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="P:Quartz.JobExecutionContext.Trigger"/>
            <seealso cref="T:Quartz.JobDataMap"/>
            <author>James House</author>
        </member>
        <member name="M:Quartz.JobExecutionContext.#ctor(Quartz.IScheduler,Quartz.Spi.TriggerFiredBundle,Quartz.IJob)">
            <summary> <p>
            Create a JobExcecutionContext with the given context data.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionContext.Put(System.Object,System.Object)">
            <summary> 
            Put the specified value into the context's data map with the given key.
            Possibly useful for sharing data between listeners and jobs.
            <p>
            NOTE: this data is volatile - it is lost after the job execution
            completes, and all TriggerListeners and JobListeners have been 
            notified.
            </p> 
            </summary>
            <param name="key">
            </param>
            <param name="objectValue">
            </param>
        </member>
        <member name="M:Quartz.JobExecutionContext.Get(System.Object)">
            <summary> 
            Get the value with the given key from the context's data map.
            </summary>
            <param name="key">
            </param>
        </member>
        <member name="P:Quartz.JobExecutionContext.Scheduler">
            <summary>
            Get a handle to the <code>Scheduler</code> instance that fired the
            <code>Job</code>.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.Trigger">
            <summary> <p>
            Get a handle to the <code>Trigger</code> instance that fired the
            <code>Job</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.Calendar">
            <summary> <p>
            Get a handle to the <code>Calendar</code> referenced by the <code>Trigger</code>
            instance that fired the <code>Job</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.Recovering">
            <summary> <p>
            If the <code>Job</code> is being re-executed because of a 'recovery'
            situation, this method will return <code>true</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.MergedJobDataMap">
            <summary> <p>
            Get the convenience <code>JobDataMap</code> of this execution context.
            </p>
            
            <p>
            The <code>JobDataMap</code> found on this object serves as a convenience -
            it is a merge of the <code>JobDataMap</code> found on the 
            <code>JobDetail</code> and the one found on the <code>Trigger</code>, with 
            the value in the latter overriding any same-named values in the former.
            <i>It is thus considered a 'best practice' that the Execute code of a Job
            retrieve data from the JobDataMap found on this object</i>
            </p>
            
            <p>NOTE: Do not
            expect value 'set' into this JobDataMap to somehow be set back onto a
            <code>StatefulJob</code>'s own JobDataMap.
            </p>
            
            <p>
            Attempts to change the contents of this map typically result in an 
            <code>IllegalStateException</code>.
            </p>
            
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.JobDetail">
            <summary> <p>
            Get the <code>JobDetail</code> associated with the <code>Job</code>.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.JobInstance">
            <summary> <p>
            Get the instance of the <code>Job</code> that was created for this
            execution.
            </p>
            
            <p>
            Note: The Job instance is not available through remote scheduler
            interfaces.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.FireTime">
            <summary> The actual time the trigger fired. For instance the scheduled time may
            have been 10:00:00 but the actual fire time may have been 10:00:03 if
            the scheduler was too busy.
            
            </summary>
            <returns> Returns the fireTime.
            </returns>
            <seealso cref="P:Quartz.JobExecutionContext.ScheduledFireTime">
            </seealso>
        </member>
        <member name="P:Quartz.JobExecutionContext.ScheduledFireTime">
            <summary> The scheduled time the trigger fired for. For instance the scheduled
            time may have been 10:00:00 but the actual fire time may have been
            10:00:03 if the scheduler was too busy.
            
            </summary>
            <returns> Returns the scheduledFireTime.
            </returns>
            <seealso cref="P:Quartz.JobExecutionContext.FireTime">
            </seealso>
        </member>
        <member name="P:Quartz.JobExecutionContext.Result">
            <summary>
            Returns the result (if any) that the <code>Job</code> set before its 
            execution completed (the type of object set as the result is entirely up 
            to the particular job).
            
            <p>
            The result itself is meaningless to Quartz, but may be informative
            to <code>{@link JobListener}s</code> or 
            <code>{@link TriggerListener}s</code> that are watching the job's 
            execution.
            </p> 
            
            Set the result (if any) of the <code>Job</code>'s execution (the type of 
            object set as the result is entirely up to the particular job).
            
            <p>
            The result itself is meaningless to Quartz, but may be informative
            to <code>{@link JobListener}s</code> or 
            <code>{@link TriggerListener}s</code> that are watching the job's 
            execution.
            </p> 
            
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContext.JobRunTime">
            <summary> The amount of time the job ran for (in milliseconds).  The returned 
            value will be -1 until the job has actually completed (or thrown an 
            exception), and is therefore generally only useful to 
            <code>JobListener</code>s and <code>TriggerListener</code>s.
            </summary>
        </member>
        <member name="T:Quartz.Impl.SchedulerRepository">
            <summary>
            Holds references to Scheduler instances - ensuring uniqueness, and
            preventing garbage collection, and allowing 'global' lookups - all within a
            ClassLoader space.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Impl.SchedulerRepository.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Quartz.CronTrigger">
            <summary>
            <p>
            A concrete <code>{@link Trigger}</code> that is used to fire a <code>{@link org.quartz.JobDetail}</code>
            at given moments in time, defined with Unix 'cron-like' definitions.
            </p>
            
            <p>
            For those unfamiliar with "cron", this means being able to create a firing
            schedule such as: "At 8:00am every Monday through Friday" or "At 1:30am
            every last Friday of the month".
            </p>
            
            <p>
            The format of a "Cron-Expression" string is documented on the 
            {@link org.quartz.CronExpression} class.
            </p>
            
            <p>
            Here are some full examples: <br/>
            <table cellspacing="8">
            <tr>
            <th align="left">Expression</th>
            <th align="left"> </th>
            <th align="left">Meaning</th>
            </tr>
            <tr>
            <td align="left"><code>"0 0 12 * * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 12pm (noon) every day</code></td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 ? * *"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am every day</code></td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 * * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am every day</code></td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 * * ? *"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am every day</code></td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 * * ? 2005"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am every day during the year 2005</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 * 14 * * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire every minute starting at 2pm and ending at 2:59pm, every day</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 0/5 14 * * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 0/5 14,18 * * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 0-5 14 * * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire every minute starting at 2pm and ending at 2:05pm, every day</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 10,44 14 ? 3 WED"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 2:10pm and at 2:44pm every Wednesday in the month of March.</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 ? * MON-FRI"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 15 * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am on the 15th day of every month</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 L * ?"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am on the last day of every month</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 ? * 6L"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am on the last Friday of every month</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 ? * 6L"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am on the last Friday of every month</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 ? * 6L 2002-2005"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am on every last friday of every month during the years 2002, 2003, 2004 and 2005</code>
            </td>
            </tr>
            <tr>
            <td align="left"><code>"0 15 10 ? * 6#3"</code></td>
            <td align="left"> </td>
            <td align="left"><code>Fire at 10:15am on the third Friday of every month</code>
            </td>
            </tr>
            </table>
            </p>
            
            <p>
            Pay attention to the effects of '?' and '*' in the day-of-week and
            day-of-month fields!
            </p>
            
            <p>
            <b>NOTES:</b>
            <ul>
            <li>Support for specifying both a day-of-week and a day-of-month value is
            not complete (you'll need to use the '?' character in on of these fields).
            </li>
            <li>Be careful when setting fire times between mid-night and 1:00 AM -
            "daylight savings" can cause a skip or a repeat depending on whether the
            time moves back or jumps forward.</li>
            </ul>
            </p>
            
            <seealso cref="T:Quartz.Trigger"/>
            <seealso cref="T:Quartz.SimpleTrigger"/>
            <seealso cref="T:Quartz.TriggerUtils"/>
            <author>Sharada Jambula</author>
            <author>James House</author>
            <author>Contributions from Mads Henderson</author>
            </summary>
        </member>
        <member name="F:Quartz.CronTrigger.MISFIRE_INSTRUCTION_FIRE_ONCE_NOW">
            <summary>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link CronTrigger}</code> wants to be fired now
            by <code>Scheduler</code>.
            </summary>
        </member>
        <member name="F:Quartz.CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING">
            <summary>
            Instructs the <code>{@link Scheduler}</code> that upon a mis-fire
            situation, the <code>{@link CronTrigger}</code> wants to have it's
            next-fire-time updated to the next time in the schedule after the
            current time (taking into account any associated <code>{@link Calendar}</code>,
            but it does not want to be fired now.
            </summary>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor">
            <summary>
            <p>
            Create a <code>CronTrigger</code> with no settings.
            </p>
            
            <p>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String)">
            <summary>
            <p>
            Create a <code>CronTrigger</code> with the given name and group.
            </p>
            
            <p>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </p>
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String,System.String)">
            <summary>
            <p>
            Create a <code>CronTrigger</code> with the given name, group and
            expression.
            </p>
            
            <p>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </p>
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="cronExpression">The cron expression.</param>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            <p>
            Create a <code>CronTrigger</code> with the given name and group, and
            associated with the identified <code>{@link org.quartz.JobDetail}</code>.
            </p>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a <code>CronTrigger</code> with the given name and group,
            associated with the identified <code>{@link org.quartz.JobDetail}</code>,
            and with the given "cron" expression.
            <p>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </p>
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
            <param name="cronExpression">The cron expression.</param>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String,System.String,System.String,System.String,System.TimeZone)">
            <summary>
            Create a <code>CronTrigger</code> with the given name and group,
            associated with the identified <code>{@link org.quartz.JobDetail}</code>,
            and with the given "cron" expression resolved with respect to the <code>TimeZone</code>.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
            <param name="cronExpression">The cron expression.</param>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String,System.String,System.String,System.DateTime,Nullables.NullableDateTime,System.String)">
            <summary>
            Create a <code>CronTrigger</code> that will occur at the given time,
            until the given end time.
            <p>
            If null, the start-time will also be set to the current time, the time
            zone will be set the the system's default.
            </p>
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="cronExpression">The cron expression.</param>
        </member>
        <member name="M:Quartz.CronTrigger.#ctor(System.String,System.String,System.String,System.String,System.DateTime,Nullables.NullableDateTime,System.String,System.TimeZone)">
            <summary>
            Create a <code>CronTrigger</code> with fire time dictated by the
            <code>cronExpression</code> resolved with respect to the specified
            <code>timeZone</code> occuring from the <code>startTime</code> until
            the given <code>endTime</code>.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="cronExpression">The cron expression.</param>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:Quartz.CronTrigger.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.GetNextFireTime">
            <summary>
            	<p>
            Returns the next time at which the <code>Trigger</code> will fire. If
            the trigger will not fire again, <code>null</code> will be returned.
            The value returned is not guaranteed to be valid until after the <code>Trigger</code>
            has been added to the scheduler.
            </p>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.GetPreviousFireTime">
            <summary>
            Returns the previous time at which the <code>Trigger</code> will fire.
            If the trigger has not yet fired, <code>null</code> will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.SetNextFireTime(Nullables.NullableDateTime)">
            <summary>
            Sets the next fire time.
            <p>
            <b>This method should not be invoked by client code.</b>
            </p>
            </summary>
            <param name="fireTime">The fire time.</param>
        </member>
        <member name="M:Quartz.CronTrigger.SetPreviousFireTime(Nullables.NullableDateTime)">
            <summary>
            Sets the previous fire time.
            <p>
            <b>This method should not be invoked by client code.</b>
            </p>
            </summary>
            <param name="fireTime">The fire time.</param>
        </member>
        <member name="M:Quartz.CronTrigger.GetFireTimeAfter(Nullables.NullableDateTime)">
            <summary>
            Returns the next time at which the <code>Trigger</code> will fire,
            after the given time. If the trigger will not fire after the given time,
            <code>null</code> will be returned.
            </summary>
            <param name="afterTime"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.MayFireAgain">
            <p>
            Determines whether or not the <code>CronTrigger</code> will occur
            again.
            </p>
        </member>
        <member name="M:Quartz.CronTrigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            <p>
            To be implemented by the concrete classes that extend this class.
            </p>
            <p>
            The implementation should update the <code>Trigger</code>'s state
            based on the MISFIRE_INSTRUCTION_XXX that was selected when the <code>Trigger</code>
            was created.
            </p>
            </summary>
            <param name="cal"></param>
        </member>
        <member name="M:Quartz.CronTrigger.WillFireOn(System.DateTime)">
            <summary>
            <p>
            Determines whether the date and (optionally) time of the given Calendar 
            instance falls on a scheduled fire-time of this trigger.
            </p>
            
            <p>
            Equivalent to calling <code>willFireOn(cal, false)</code>.
            </p>
            </summary>
            <param name="test">The date to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.WillFireOn(System.DateTime,System.Boolean)">
            <summary>
            Determines whether the date and (optionally) time of the given Calendar 
            instance falls on a scheduled fire-time of this trigger.
            <p>
            Note that the value returned is NOT validated against the related
            ICalendar (if any).
            </p>
            </summary>
            <param name="test">The date to compare</param>
            <param name="dayOnly">If set to true, the method will only determine if the
            trigger will fire during the day represented by the given Calendar
            (hours, minutes and seconds will be ignored).</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.ExecutionComplete(Quartz.JobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            <p>
            Called after the <code>{@link Scheduler}</code> has executed the
            <code>{@link org.quartz.JobDetail}</code> associated with the <code>Trigger</code>
            in order to get the final instruction code from the trigger.
            </p>
            </summary>
            <param name="context">is the <code>JobExecutionContext</code> that was used by the
            <code>Job</code>'s<code>Execute(xx)</code> method.</param>
            <param name="result">is the <code>JobExecutionException</code> thrown by the
            <code>Job</code>, if any (may be null).</param>
            <returns>
            one of the Trigger.INSTRUCTION_XXX constants.
            </returns>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_NOOP"/>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_RE_EXECUTE_JOB"/>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_DELETE_TRIGGER"/>
            <seealso cref="F:Quartz.Trigger.INSTRUCTION_SET_TRIGGER_COMPLETE"/>
            <seealso cref="M:Quartz.CronTrigger.Triggered(Quartz.ICalendar)"/>
        </member>
        <member name="M:Quartz.CronTrigger.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <code>{@link Scheduler}</code> has decided to 'fire'
            the trigger (Execute the associated <code>Job</code>), in order to
            give the <code>Trigger</code> a chance to update itself for its next
            triggering (if any).
            </summary>
            <param name="cal"></param>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.CronTrigger.UpdateWithNewCalendar(Quartz.ICalendar,System.Int64)">
            <summary>
            Updates the trigger with new calendar.
            </summary>
            <param name="calendar">The calendar to update with.</param>
            <param name="misfireThreshold">The misfire threshold.</param>
        </member>
        <member name="M:Quartz.CronTrigger.ComputeFirstFireTime(Quartz.ICalendar)">
            <summary>
            Called by the scheduler at the time a <code>Trigger</code> is first
            added to the scheduler, in order to have the <code>Trigger</code>
            compute its first fire time, based on any associated calendar.
            <p>
            After this method has been called, <code>getNextFireTime()</code>
            should return a valid answer.
            </p>
            </summary>
            <param name="cal"></param>
            <returns>
            the first time at which the <code>Trigger</code> will be fired
            by the scheduler, which is also the same value <code>getNextFireTime()</code>
            will return (until after the first firing of the <code>Trigger</code>).
            </returns>
        </member>
        <member name="M:Quartz.CronTrigger.GetExpressionSummary">
            <summary>
            Gets the expression summary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronTrigger.GetTimeAfter(System.DateTime)">
            <summary>
            Gets the next time to fire after the given time.
            </summary>
            <param name="afterTime">The time to compute from.</param>
            <returns></returns>
        </member>
        <member name="P:Quartz.CronTrigger.CronExpressionString">
            <summary>
            Gets or sets the cron expression string.
            </summary>
            <value>The cron expression string.</value>
        </member>
        <member name="P:Quartz.CronTrigger.CronExpression">
            <summary>
            Sets the cron expression.
            </summary>
            <value>The cron expression.</value>
        </member>
        <member name="P:Quartz.CronTrigger.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:Quartz.CronTrigger.FinalFireTime">
            <summary>
            Returns the last time at which the <code>Trigger</code> will fire, if
            the Trigger will repeat indefinitely, null will be returned.
            <p>
            Note that the return time *may* be in the past.
            </p>
            </summary>
        </member>
        <member name="P:Quartz.CronTrigger.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.Simpl.SimpleThreadPool">
            <summary> <p>
            This is class is a simple implementation of a thread pool, based on the
            <code>{@link IThreadPool}</code> interface.
            </p>
            
            <p>
            <code>Runnable</code> objects are sent to the pool with the <code>{@link #runInThread(Runnable)}</code>
            method, which blocks until a <code>Thread</code> becomes available.
            </p>
            
            <p>
            The pool has a fixed number of <code>Thread</code>s, and does not grow or
            shrink based on demand.
            </p>
            
            </summary>
            <author>James House</author>
            <author>Juergen Donnerstag</author>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.#ctor">
            <summary> 
            Create a new (unconfigured) <code>SimpleThreadPool</code>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.#ctor(System.Int32,System.Int32)">
            <summary> <p>
            Create a new <code>SimpleThreadPool</code> with the specified number
            of <code>Thread</code> s that have the given priority.
            </p>
            
            </summary>
            <param name="threadCount">
            the number of worker <code>Threads</code> in the pool, must
            be > 0.
            </param>
            <param name="threadPriority">
            the thread priority for the worker threads.
            
            </param>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.Shutdown">
            <summary> <p>
            Terminate any worker threads in this thread group.
            </p>
            
            <p>
            Jobs currently in progress will complete.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.Shutdown(System.Boolean)">
            <summary> <p>
            Terminate any worker threads in this thread group.
            </p>
            
            <p>
            Jobs currently in progress will complete.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.RunInThread(IThreadRunnable)">
            <summary> <p>
            Run the given <code>Runnable</code> object in the next available
            <code>Thread</code>. If while waiting the thread pool is asked to
            shut down, the Runnable is executed immediately within a new additional
            thread.
            </p>
            
            </summary>
            <param name="runnable">
            the <code>Runnable</code> to be added.
            </param>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.ThreadCount">
            <summary>
            Gets or sets the number of worker threads in the pool.
            Set  has no effect after <code>Initialize()</code> has been called.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.ThreadPriority">
            <summary>
            Get or set the thread priority of worker threads in the pool.
            Set operation has no effect after <code>initialize()</code> has been called.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.MakeThreadsDaemons">
            <summary> 
            Gets or sets the value of makeThreadsDaemons.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.NextRunnable">
            <summary>
            Dequeue the next pending <code>Runnable</code>.
            <p>
            getNextRunnable() should return null if within a specific time no new
            Runnable is available. This gives the worker thread the chance to check
            its shutdown flag. In case the worker thread is asked to shut down it
            will notify on nextRunnableLock, hence interrupt the wait state. That
            is, the time used for waiting need not be short.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Simpl.SimpleThreadPool.WorkerThread">
            <summary> <p>
            A Worker loops, waiting to Execute tasks.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.#ctor(Quartz.Simpl.SimpleThreadPool,Quartz.Simpl.SimpleThreadPool,System.String,System.Int32,System.Boolean)">
            <summary> <p>
            Create a worker thread and start it. Waiting for the next Runnable,
            executing it, and waiting for the next Runnable, until the shutdown
            flag is set.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.#ctor(Quartz.Simpl.SimpleThreadPool,Quartz.Simpl.SimpleThreadPool,System.String,System.Int32,System.Boolean,IThreadRunnable)">
            <summary> <p>
            Create a worker thread, start it, Execute the runnable and terminate
            the thread (one time execution).
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.shutdown">
            <summary> <p>
            Signal the thread that it should terminate.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.Run">
            <summary> <p>
            Loop, executing targets as they are received.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Impl.Calendar.HolidayCalendar">
            <summary>
            This implementation of the Calendar stores a list of holidays (full days
            that are excluded from scheduling).
            <p>
            The implementation DOES take the year into consideration, so if you want to
            exclude July 4th for the next 10 years, you need to add 10 entries to the
            exclude list.
            </p>
            </summary>
            <author>Sharada Jambula</author>
            <author>Juergen Donnerstag</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.#ctor">
            <summary> Constructor</summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.#ctor(Quartz.ICalendar)">
            <summary> Constructor</summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.IsTimeIncluded(System.DateTime)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.GetNextIncludedTime(System.DateTime)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time.
            <p>
            Note that this Calendar is only has full-day precision.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.AddExcludedDate(System.DateTime)">
            <summary>
            Add the given Date to the list of excluded days. Only the month, day and
            year of the returned dates are significant.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.HolidayCalendar.ExcludedDates">
            <summary>
            Returns a <code>SortedSet</code> of Dates representing the excluded
            days. Only the month, day and year of the returned dates are
            significant.
            </summary>
        </member>
        <member name="T:Quartz.Util.TriggerStatus">
            <summary> 
            object representing a job or trigger key.
            </summary>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Util.TriggerStatus.#ctor(System.String,System.DateTime)">
            <summary> Construct a new TriggerStatus with the status name and nextFireTime.
            
            </summary>
            <param name="status">
            the trigger's status
            </param>
            <param name="nextFireTime">
            the next time the trigger will fire
            </param>
        </member>
        <member name="M:Quartz.Util.TriggerStatus.ToString">
            <summary> <p>
            Return the string representation of the TriggerStatus.
            </p>
            
            </summary>
        </member>
        <member name="P:Quartz.Util.TriggerStatus.JobKey">
            <summary>
            Gets or sets the job key.
            </summary>
            <value>The job key.</value>
        </member>
        <member name="P:Quartz.Util.TriggerStatus.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Quartz.Util.TriggerStatus.Status">
            <summary>
            Get the name portion of the key.
            </summary>
            <returns> the name </returns>
        </member>
        <member name="P:Quartz.Util.TriggerStatus.NextFireTime">
            <summary>
            Get the group portion of the key.
            </summary>
            <returns> the group </returns>
        </member>
        <member name="T:Quartz.Util.ObjectUtils">
            <summary>
            Utility methods that are used to convert objects from one type into another.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Quartz.Util.ObjectUtils.ConvertValueIfNecessary(System.Type,System.Object)">
            <summary>
            Convert the value to the required <see cref="T:System.Type"/> (if necessary from a string).
            </summary>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we must convert to.
            </param>
            <returns>The new value, possibly the result of type conversion.</returns>
        </member>
        <member name="T:Quartz.Util.IConnectionProvider">
            <summary> 
            Implementations of this interface used by <code>DBConnectionManager</code>
            to provide connections from various sources.
            </summary>
            <seealso cref="T:Quartz.Util.DBConnectionManager">
            </seealso>
            <author>Mohammad Rezaei</author>
        </member>
        <member name="P:Quartz.Util.IConnectionProvider.Connection">
            <returns> 
            Connection managed by this provider
            </returns>
            <throws>  SQLException </throws>
        </member>
        <member name="T:Quartz.TriggerUtils">
            <summary>
            Convenience and utility methods for simplifying the construction and
            configuration of <code>{@link Trigger}s</code>.
            <p>
            Please submit suggestions for additional convenience methods to either the
            Quartz user forum or the developer's mail list at
            <a href="http://www.sourceforge.net/projects/quartz">source forge</a>.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.CronTrigger">
            </seealso>
            <seealso cref="T:Quartz.SimpleTrigger">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.TriggerUtils.SetTriggerIdentity(Quartz.Trigger,System.String)">
            <summary> <p>
            Set the given <code>Trigger</code>'s name to the given value, and its
            group to the default group (<code>Scheduler.DEFAULT_GROUP</code>).
            </p>
            
            </summary>
            <param name="trig">the tigger to change name to 
            </param>
            <param name="name">the new trigger name
            </param>
        </member>
        <member name="M:Quartz.TriggerUtils.SetTriggerIdentity(Quartz.Trigger,System.String,System.String)">
            <summary> <p>
            Set the given <code>Trigger</code>'s name to the given value, and its
            group to the given group.
            </p>
            
            </summary>
            <param name="trig">the tigger to change name to 
            </param>
            <param name="name">the new trigger name
            </param>
            <param name="group">the new trigger group
            </param>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeDailyTrigger(System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every day at the given time.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="hour">the hour (0-23) upon which to fire
            </param>
            <param name="minute">the minute (0-59) upon which to fire
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeDailyTrigger(System.String,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every day at the given time.
            </p>
            
            <p>
            The generated trigger will not have its group or end-time set.  
            The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name 
            </param>
            <param name="hour">the hour (0-23) upon which to fire
            </param>
            <param name="minute">the minute (0-59) upon which to fire
            </param>
            <returns> the newly created trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeWeeklyTrigger(System.Int32,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every week at the given day and time.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="dayOfWeek">(1-7) the day of week upon which to fire
            </param>
            <param name="hour">the hour (0-23) upon which to fire
            </param>
            <param name="minute">the minute (0-59) upon which to fire
            </param>
            <returns> the new trigger
            
            </returns>
            <seealso cref="F:Quartz.TriggerUtils.SUNDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.MONDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.TUESDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.WEDNESDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.THURSDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.FRIDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.SATURDAY">
            </seealso>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeWeeklyTrigger(System.String,System.Int32,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every week at the given day and time.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <param name="dayOfWeek">(1-7) the day of week upon which to fire
            </param>
            <param name="hour">the hour (0-23) upon which to fire
            </param>
            <param name="minute">the minute (0-59) upon which to fire
            </param>
            <returns> the newly created trigger
            
            </returns>
            <seealso cref="F:Quartz.TriggerUtils.SUNDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.MONDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.TUESDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.WEDNESDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.THURSDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.FRIDAY">
            </seealso>
            <seealso cref="F:Quartz.TriggerUtils.SATURDAY">
            </seealso>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMonthlyTrigger(System.Int32,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every month at the given day and time.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            <p>
            If the day of the month specified does not occur in a given month, a
            firing will not occur that month. (i.e. if dayOfMonth is specified as
            31, no firing will occur in the months of the year with fewer than 31
            days).
            </p>
            
            </summary>
            <param name="dayOfMonth">(1-31, or -1) the day of week upon which to fire
            </param>
            <param name="hour">the hour (0-23) upon which to fire
            </param>
            <param name="minute">the minute (0-59) upon which to fire
            </param>
            <returns> the newly created trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMonthlyTrigger(System.String,System.Int32,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every month at the given day and time.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            <p>
            If the day of the month specified does not occur in a given month, a
            firing will not occur that month. (i.e. if dayOfMonth is specified as
            31, no firing will occur in the months of the year with fewer than 31
            days).
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <param name="dayOfMonth">(1-31, or -1) the day of week upon which to fire
            </param>
            <param name="hour">the hour (0-23) upon which to fire
            </param>
            <param name="minute">the minute (0-59) upon which to fire
            </param>
            <returns> the newly created trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeImmediateTrigger(System.Int32,System.Int64)">
            <summary> <p>
            Make a trigger that will fire <code>repeatCount</code> times, waiting
            <code>repeatInterval</code> milliseconds between each fire.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="repeatCount">the number of times to fire the trigger
            </param>
            <param name="repeatInterval">the number of milliseconds to wait between fires
            </param>
            <returns> the newly created trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeImmediateTrigger(System.String,System.Int32,System.Int64)">
            <summary> <p>
            Make a trigger that will fire <code>repeatCount</code> times, waiting
            <code>repeatInterval</code> milliseconds between each fire.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name 
            </param>
            <param name="repeatCount">the number of times to fire the trigger
            </param>
            <param name="repeatInterval">the number of milliseconds to wait between fires
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeSecondlyTrigger">
            <summary> <p>
            Make a trigger that will fire every second, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            </summary>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeSecondlyTrigger(System.String)">
            <summary> <p>
            Make a trigger that will fire every second, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeSecondlyTrigger(System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N seconds, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="intervalInSeconds">the number of seconds between firings
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeSecondlyTrigger(System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N seconds, with the given number of
            repeats.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="intervalInSeconds">the number of seconds between firings
            </param>
            <param name="repeatCount">the number of times to repeat the firing
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeSecondlyTrigger(System.String,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N seconds, with the given number of
            repeats.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <param name="intervalInSeconds">the number of seconds between firings
            </param>
            <param name="repeatCount">the number of times to repeat the firing
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMinutelyTrigger">
            <summary> <p>
            Make a trigger that will fire every minute, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMinutelyTrigger(System.String)">
            <summary> <p>
            Make a trigger that will fire every minute, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name 
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMinutelyTrigger(System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N minutes, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="intervalInMinutes">the number of minutes between firings
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMinutelyTrigger(System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N minutes, with the given number of
            repeats.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="intervalInMinutes">the number of minutes between firings
            </param>
            <param name="repeatCount">the number of times to repeat the firing
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeMinutelyTrigger(System.String,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N minutes, with the given number of
            repeats.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <param name="intervalInMinutes">the number of minutes between firings
            </param>
            <param name="repeatCount">the number of times to repeat the firing
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeHourlyTrigger">
            <summary> <p>
            Make a trigger that will fire every hour, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeHourlyTrigger(System.String)">
            <summary> <p>
            Make a trigger that will fire every hour, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeHourlyTrigger(System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N hours, indefinitely.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="intervalInHours">the number of hours between firings
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeHourlyTrigger(System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N hours, with the given number of
            repeats.
            </p>
            
            <p>
            The generated trigger will not have its name, group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="intervalInHours">the number of hours between firings
            </param>
            <param name="repeatCount">the number of times to repeat the firing
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.MakeHourlyTrigger(System.String,System.Int32,System.Int32)">
            <summary> <p>
            Make a trigger that will fire every N hours, with the given number of
            repeats.
            </p>
            
            <p>
            The generated trigger will not have its group,
            or end-time set.  The Start time defaults to 'now'.
            </p>
            
            </summary>
            <param name="trigName">the trigger's name
            </param>
            <param name="intervalInHours">the number of hours between firings
            </param>
            <param name="repeatCount">the number of times to repeat the firing
            </param>
            <returns> the new trigger
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetEvenHourDate(Nullables.NullableDateTime)">
            <summary> <p>
            Returns a date that is rounded to the next even hour above the given
            date.
            </p>
            
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 09:00:00. If the date's time is in the 23rd hour, the
            date's 'day' will be promoted, and the time will be set to 00:00:00.
            </p>
            
            </summary>
            <param name="date">
            the Date to round, if <code>null</code> the current time will
            be used
            </param>
            <returns> the new rounded date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetEvenHourDateBefore(Nullables.NullableDateTime)">
            <summary>
            Returns a date that is rounded to the previous even hour below the given
            date.
            
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:00:00.
            </p>
            
            </summary>
            <param name="date">
            the Date to round, if <code>null</code> the current time will
            be used
            </param>
            <returns> the new rounded date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetEvenMinuteDate(Nullables.NullableDateTime)">
            <summary>
            Returns a date that is rounded to the next even minute above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:14:00. If the date's time is in the 59th minute,
            then the hour (and possibly the day) will be promoted.
            </p>
            </summary>
            <param name="date">
            Tthe Date to round, if <code>null</code> the current time will  be used
            </param>
            <returns>The new rounded date</returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetEvenMinuteDateBefore(Nullables.NullableDateTime)">
            <summary>
            Returns a date that is rounded to the previous even minute below the 
            given date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:13:00.
            </p>
            
            </summary>
            <param name="date">
            the Date to round, if <code>null</code> the current time will
            be used
            </param>
            <returns> the new rounded date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetEvenSecondDate(Nullables.NullableDateTime)">
            <summary>
            Returns a date that is rounded to the next even second above the given
            date.
            </summary>
            <param name="date">
            the Date to round, if <code>null</code> the current time will
            be used
            </param>
            <returns> the new rounded date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetEvenSecondDateBefore(Nullables.NullableDateTime)">
            <summary>
            Returns a date that is rounded to the previous even second below the
            given date.
            <p>
            For example an input date with a time of 08:13:54.341 would result in a
            date with the time of 08:13:00.000.
            </p>
            </summary>
            <param name="date">
            the Date to round, if <code>null</code> the current time will
            be used
            </param>
            <returns> the new rounded date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetNextGivenMinuteDate(Nullables.NullableDateTime,System.Int32)">
            <summary>
            Returns a date that is rounded to the next even multiple of the given
            minute.
            <p>
            For example an input date with a time of 08:13:54, and an input
            minute-base of 5 would result in a date with the time of 08:15:00. The
            same input date with an input minute-base of 10 would result in a date
            with the time of 08:20:00. But a date with the time 08:53:31 and an
            input minute-base of 45 would result in 09:00:00, because the even-hour
            is the next 'base' for 45-minute intervals.
            </p>
            
            <p>
            More examples: <table>
            <tr>
            <th>Input Time</th>
            <th>Minute-Base</th>
            <th>Result Time</th>
            </tr>
            <tr>
            <td>11:16:41</td>
            <td>20</td>
            <td>11:20:00</td>
            </tr>
            <tr>
            <td>11:36:41</td>
            <td>20</td>
            <td>11:40:00</td>
            </tr>
            <tr>
            <td>11:46:41</td>
            <td>20</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:26:41</td>
            <td>30</td>
            <td>11:30:00</td>
            </tr>
            <tr>
            <td>11:36:41</td>
            <td>30</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:16:41</td>
            <td>17</td>
            <td>11:17:00</td>
            </tr>
            <tr>
            <td>11:17:41</td>
            <td>17</td>
            <td>11:34:00</td>
            </tr>
            <tr>
            <td>11:52:41</td>
            <td>17</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:52:41</td>
            <td>5</td>
            <td>11:55:00</td>
            </tr>
            <tr>
            <td>11:57:41</td>
            <td>5</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:17:41</td>
            <td>0</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:17:41</td>
            <td>1</td>
            <td>11:08:00</td>
            </tr>
            </table>
            </p>
            
            </summary>
            <param name="date">
            the Date to round, if <code>null</code> the current time will
            be used
            </param>
            <param name="minuteBase">
            the base-minute to set the time on
            </param>
            <returns> the new rounded date</returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetNextGivenSecondDate(Nullables.NullableDateTime,System.Int32)">
            <summary>
            Returns a date that is rounded to the next even multiple of the given
            minute.
            <p>
            The rules for calculating the second are the same as those for
            calculating the minute in the method
            <code>getNextGivenMinuteDate(..)</code>.
            </p>
            </summary>
            <param name="date">The date.</param>
            <param name="secondBase">The second base.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetDateOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a <code>Date</code> object that represents the given time, on
            today's date.
            </summary>
            <param name="second">
            The value (0-59) to give the seconds field of the date
            </param>
            <param name="minute">
            The value (0-59) to give the minutes field of the date
            </param>
            <param name="hour">
            The value (0-23) to give the hours field of the date
            </param>
            <returns> the new date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetDateOf(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>
            Get a <code>Date</code> object that represents the given time, on the
            given date.
            </p>
            
            </summary>
            <param name="second">
            The value (0-59) to give the seconds field of the date
            </param>
            <param name="minute">
            The value (0-59) to give the minutes field of the date
            </param>
            <param name="hour">
            The value (0-23) to give the hours field of the date
            </param>
            <param name="dayOfMonth">
            The value (1-31) to give the day of month field of the date
            </param>
            <param name="month">
            The value (1-12) to give the month field of the date
            </param>
            <returns> the new date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetDateOf(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Get a <code>Date</code> object that represents the given time, on the
            given date.
            </summary>
            <param name="second">
            The value (0-59) to give the seconds field of the date
            </param>
            <param name="minute">
            The value (0-59) to give the minutes field of the date
            </param>
            <param name="hour">
            The value (0-23) to give the hours field of the date
            </param>
            <param name="dayOfMonth">
            The value (1-31) to give the day of month field of the date
            </param>
            <param name="month">
            The value (1-12) to give the month field of the date
            </param>
            <param name="year">
            The value (1970-2099) to give the year field of the date
            </param>
            <returns> the new date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.ComputeFireTimes(Quartz.Trigger,Quartz.ICalendar,System.Int32)">
            <summary> Returns a list of Dates that are the next fire times of a 
            <code>Trigger</code>.
            The input trigger will be cloned before any work is done, so you need
            not worry about its state being altered by this method.
            
            </summary>
            <param name="trigg">
            The trigger upon which to do the work
            </param>
            <param name="cal">
            The calendar to apply to the trigger's schedule
            </param>
            <param name="numTimes">
            The number of next fire times to produce
            </param>
            <returns> List of java.util.Date objects
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.ComputeFireTimesBetween(Quartz.Trigger,Quartz.ICalendar,Nullables.NullableDateTime,Nullables.NullableDateTime)">
            <summary>
            Returns a list of Dates that are the next fire times of a  <code>Trigger</code>
            that fall within the given date range. The input trigger will be cloned
            before any work is done, so you need not worry about its state being
            altered by this method.
            </summary>
            <param name="trigg">The trigger upon which to do the work</param>
            <param name="cal">The calendar to apply to the trigger's schedule</param>
            <param name="from">
            The starting date at which to find fire times
            </param>
            <param name="to">
            The ending date at which to stop finding fire times
            </param>
            <returns> List of java.util.Date objects
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.TranslateTime(System.DateTime,System.TimeZone,System.TimeZone)">
            <summary> 
            Translate a date and time from a users timezone to the another
            (probably server) timezone to assist in creating a simple trigger with 
            the right date and time.
            
            </summary>
            <param name="date">the date to translate
            </param>
            <param name="src">the original time-zone
            </param>
            <param name="dest">the destination time-zone
            </param>
            <returns> the translated date
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetOffset(System.DateTime,System.TimeZone)">
            <summary> Gets the offset from UT for the given date in the given timezone, 
            taking into account daylight savings.
            
            <p>
            Equivalent of TimeZone.getOffset(date) in JDK 1.4, but Quartz is trying
            to support JDK 1.3.
            </p>
            
            </summary>
            <param name="date">the date (in milliseconds) that is the base for the offset
            </param>
            <param name="tz">the time-zone to calculate to offset to
            </param>
            <returns> the offset
            </returns>
        </member>
        <member name="M:Quartz.TriggerUtils.GetDSTSavings(System.TimeZone)">
            <summary> <p>
            Equivalent of TimeZone.getDSTSavings() in JDK 1.4, but Quartz is trying
            to support JDK 1.3.
            </p>
            
            </summary>
            <param name="tz">the target time-zone
            </param>
            <returns> the amount of saving time in milliseconds
            </returns>
        </member>
        <member name="T:Quartz.Simpl.SimpleClassLoadHelper">
            <summary> 
            A <code>ClassLoadHelper</code> that simply calls <code>Class.forName(..)</code>.
            </summary>
            <seealso cref="T:Quartz.Spi.IClassLoadHelper"/>
            <seealso cref="T:Quartz.Simpl.CascadingClassLoadHelper"/>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Simpl.SimpleClassLoadHelper.Initialize">
            <summary> 
            Called to give the ClassLoadHelper a chance to initialize itself,
            including the oportunity to "steal" the class loader off of the calling
            thread, which is the thread that is initializing Quartz.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleClassLoadHelper.LoadClass(System.String)">
            <summary> Return the class with the given name.</summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleClassLoadHelper.GetResource(System.String)">
            <summary>
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a Uri object</returns>
        </member>
        <member name="M:Quartz.Simpl.SimpleClassLoadHelper.GetResourceAsStream(System.String)">
            <summary>
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a Stream object
            </returns>
        </member>
        <member name="T:Quartz.SchedulerContext">
            <summary>
            Holds context/environment data that can be made available to Jobs as they
            are executed. 
            </summary>
            <seealso cref="P:Quartz.IScheduler.Context"/>
            <author>James House</author>
        </member>
        <member name="T:Quartz.Util.DirtyFlagMap">
            <summary>
            An implementation of <code>Map</code> that wraps another <code>Map</code>
            and flags itself 'dirty' when it is modified.
            </summary>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap.#ctor(System.Collections.IDictionary)">
            <summary> <p>
            Create a DirtyFlagMap that 'wraps' the given <code>Map</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap.#ctor">
            <summary>
            Create a DirtyFlagMap that 'wraps' a <code>Hashtable</code>.
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap.#ctor(System.Int32)">
            <summary> <p>
            Create a DirtyFlagMap that 'wraps' a <code>HashMap</code> that has the
            given initial capacity.
            </p>
            
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap.#ctor(System.Int32,System.Single)">
            <summary> <p>
            Create a DirtyFlagMap that 'wraps' a <code>HashMap</code> that has the
            given initial capacity and load factor.
            </p>
            
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap.ClearDirtyFlag">
            <summary> <p>
            Clear the 'dirty' flag (set dirty flag to <code>false</code>).
            </p>
            </summary>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap.Dirty">
            <summary>
            Determine whether the <code>Map</code> is flagged dirty.
            </summary>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap.WrappedMap">
            <summary> <p>
            Get a direct handle to the underlying Map.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.#ctor">
            <summary> <p>
            Create an empty <code>JobDataMap</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.#ctor(System.Collections.IDictionary)">
            <summary> <p>
            Create a <code>JobDataMap</code> with the given data.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.RemoveTransientData">
            <summary> <p>
            Nulls-out any data values that are non-Serializable.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.PutAll(System.Collections.IDictionary)">
            <summary> <p>
            Adds the name-value pairs in the given <code>Map</code> to the <code>SchedulerContext</code>.
            </p>
            
            <p>
            All keys must be <code>String</code>s.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.Int32)">
            <summary> <p>
            Adds the given <code>int</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.Int64)">
            <summary> <p>
            Adds the given <code>long</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.Single)">
            <summary> <p>
            Adds the given <code>float</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.Double)">
            <summary> <p>
            Adds the given <code>double</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.Boolean)">
            <summary> <p>
            Adds the given <code>boolean</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.Char)">
            <summary> <p>
            Adds the given <code>char</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.String,System.String)">
            <summary> <p>
            Adds the given <code>String</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.Put(System.Object,System.Object)">
            <summary> <p>
            Adds the given <code>object</code> value to the <code>SchedulerContext</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetInt(System.String)">
            <summary> <p>
            Retrieve the identified <code>int</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not an Integer.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetLong(System.String)">
            <summary> <p>
            Retrieve the identified <code>long</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not a Long.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetFloat(System.String)">
            <summary> <p>
            Retrieve the identified <code>float</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not a Float.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetDouble(System.String)">
            <summary> <p>
            Retrieve the identified <code>double</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not a Double.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetBoolean(System.String)">
            <summary> <p>
            Retrieve the identified <code>boolean</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not a Boolean.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetChar(System.String)">
            <summary> <p>
            Retrieve the identified <code>char</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not a Character.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.GetString(System.String)">
            <summary> <p>
            Retrieve the identified <code>String</code> value from the <code>SchedulerContext</code>.
            </p>
            
            </summary>
            <throws>  ClassCastException </throws>
            <summary>           if the identified object is not a String.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerContext.AllowsTransientData">
            <summary> <p>
            Tell the <code>SchedulerContext</code> that it should allow non-
            <code>Serializable</code> data.
            </p>
            
            <p>
            Future versions of Quartz may make distinctions on how it propogates
            data in the SchedulerContext between instances of proxies to a single
            scheduler instance - i.e. if Quartz is being used via RMI.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Impl.QuartzServer">
            <summary>
            Instantiates an instance of Quartz Scheduler as a stand-alone program, if
            the scheduler is configured for RMI it will be made available.
            <p>
            The main() method of this class currently accepts 0 or 1 arguemtns, if there
            is an argument, and its value is <code>"console"</code>, then the program
            will print a short message on the console (std-out) and wait for the user to
            type "exit" - at which time the scheduler will be shutdown.
            </p>
            <p>
            Future versions of this server should allow additional configuration for
            responding to scheduler events by allowing the user to specify <code>JobListener</code>,
            <code>TriggerListener</code> and <code>SchedulerListener</code>
            classes.
            </p>
            <p>
            Please read the Quartz FAQ entries about RMI before asking questions in the
            forums or mail-lists.
            </p>
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.JobScheduled(Quartz.Trigger)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>JobDetail</code>
            is scheduled.
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.JobUnscheduled(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>JobDetail</code>
            is unscheduled.
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.TriggerFinalized(Quartz.Trigger)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            has reached the condition in which it will never fire again.
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.TriggersPaused(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            or group of <code>Trigger</code>s has been paused.
            <p>
            If a group was paused, then the <code>triggerName</code> parameter
            will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.TriggersResumed(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>Trigger</code>
            or group of <code>Trigger</code>s has been un-paused.
            <p>
            If a group was resumed, then the <code>triggerName</code> parameter
            will be null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.JobsPaused(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>JobDetail</code>
            or group of <code>JobDetail</code>s has been
            paused.
            <p>
            If a group was paused, then the <code>jobName</code> parameter will be
            null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.JobsResumed(System.String,System.String)">
            <summary>
            Called by the <code>Scheduler</code> when a <code>JobDetail</code>
            or group of <code>JobDetail</code>s has been un-paused.
            <p>
            If a group was paused, then the <code>jobName</code> parameter will be
            null.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.SchedulerError(System.String,Quartz.SchedulerException)">
            <summary>
            Called by the <code>Scheduler</code> when a serious error has
            occured within the scheduler - such as repeated failures in the <code>JobStore</code>,
            or the inability to instantiate a <code>Job</code> instance when its
            <code>Trigger</code> has fired.
            <p>
            The <code>getErrorCode()</code> method of the given SchedulerException
            can be used to determine more specific information about the type of
            error that was encountered.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.Impl.QuartzServer.SchedulerShutdown">
            <summary>
            Called by the <code>Scheduler</code> to inform the listener
            that it has shutdown.
            </summary>
        </member>
        <member name="T:Quartz.Job.NoOpJob">
            <summary>
            An implementation of Job, that does absolutely nothing - useful for system
            which only wish to use <code>{@link org.quartz.TriggerListener}s</code>
            and <code>{@link org.quartz.JobListener}s</code>, rather than writing
            Jobs that perform work.
            </summary>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Job.NoOpJob.Execute(Quartz.JobExecutionContext)">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="T:Quartz.CronExpression">
            <summary>
            Provides a parser and evaluator for unix-like cron expressions. Cron 
            expressions provide the ability to specify complex time combinations such as
            &quot;At 8:00am every Monday through Friday&quot; or &quot;At 1:30am every 
            last Friday of the month&quot;. 
            <p>
            Cron expressions are comprised of 6 required fields and one optional field
            separated by white space. The fields respectively are described as follows:
            </p>
            <table cellspacing="8">
            <tr>
            <th align="left">Field Name</th>
            <th align="left"> </th>
            <th align="left">Allowed Values</th>
            <th align="left"> </th>
            <th align="left">Allowed Special Characters</th>
            </tr>
            <tr>
            <td align="left"><code>Seconds</code></td>
            <td align="left"> </td>
            <td align="left"><code>0-59</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// /</code></td>
            </tr>
            <tr>
            <td align="left"><code>Minutes</code></td>
            <td align="left"> </td>
            <td align="left"><code>0-59</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// /</code></td>
            </tr>
            <tr>
            <td align="left"><code>Hours</code></td>
            <td align="left"> </td>
            <td align="left"><code>0-23</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// /</code></td>
            </tr>
            <tr>
            <td align="left"><code>Day-of-month</code></td>
            <td align="left"> </td>
            <td align="left"><code>1-31</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// ? / L W C</code></td>
            </tr>
            <tr>
            <td align="left"><code>Month</code></td>
            <td align="left"> </td>
            <td align="left"><code>1-12 or JAN-DEC</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// /</code></td>
            </tr>
            <tr>
            <td align="left"><code>Day-of-Week</code></td>
            <td align="left"> </td>
            <td align="left"><code>1-7 or SUN-SAT</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// ? / L #</code></td>
            </tr>
            <tr>
            <td align="left"><code>Year (Optional)</code></td>
            <td align="left"> </td>
            <td align="left"><code>empty, 1970-2099</code></td>
            <td align="left"> </td>
            <td align="left"><code>, - /// /</code></td>
            </tr>
            </table>
            <p>
            The '*' character is used to specify all values. For example, &quot;*&quot; 
            in the minute field means &quot;every minute&quot;.
            </p>
            <p>
            The '?' character is allowed for the day-of-month and day-of-week fields. It
            is used to specify 'no specific value'. This is useful when you need to
            specify something in one of the two fileds, but not the other.
            </p>
            <p>
            The '-' character is used to specify ranges For example &quot;10-12&quot; in
            the hour field means &quot;the hours 10, 11 and 12&quot;.
            </p>
            <p>
            The ',' character is used to specify additional values. For example
            &quot;MON,WED,FRI&quot; in the day-of-week field means &quot;the days Monday,
            Wednesday, and Friday&quot;.
            </p>
            <p>
            The '/' character is used to specify increments. For example &quot;0/15&quot;
            in the seconds field means &quot;the seconds 0, 15, 30, and 45&quot;. And 
            &quot;5/15&quot; in the seconds field means &quot;the seconds 5, 20, 35, and
            50&quot;.  Specifying '*' before the  '/' is equivalent to specifying 0 is
            the value to start with. Essentially, for each field in the expression, there
            is a set of numbers that can be turned on or off. For seconds and minutes, 
            the numbers range from 0 to 59. For hours 0 to 23, for days of the month 0 to
            31, and for months 1 to 12. The &quot;/&quot; character simply helps you turn
            on every &quot;nth&quot; value in the given set. Thus &quot;7/6&quot; in the
            month field only turns on month &quot;7&quot;, it does NOT mean every 6th 
            month, please note that subtlety.  
            </p>
            <p>
            The 'L' character is allowed for the day-of-month and day-of-week fields.
            This character is short-hand for &quot;last&quot;, but it has different 
            meaning in each of the two fields. For example, the value &quot;L&quot; in 
            the day-of-month field means &quot;the last day of the month&quot; - day 31 
            for January, day 28 for February on non-leap years. If used in the 
            day-of-week field by itself, it simply means &quot;7&quot; or 
            &quot;SAT&quot;. But if used in the day-of-week field after another value, it
            means &quot;the last xxx day of the month&quot; - for example &quot;6L&quot;
            means &quot;the last friday of the month&quot;. When using the 'L' option, it
            is important not to specify lists, or ranges of values, as you'll get 
            confusing results.
            </p>
            <p>
            The 'W' character is allowed for the day-of-month field.  This character 
            is used to specify the weekday (Monday-Friday) nearest the given day.  As an 
            example, if you were to specify &quot;15W&quot; as the value for the 
            day-of-month field, the meaning is: &quot;the nearest weekday to the 15th of
            the month&quot;. So if the 15th is a Saturday, the trigger will fire on 
            Friday the 14th. If the 15th is a Sunday, the trigger will fire on Monday the
            16th. If the 15th is a Tuesday, then it will fire on Tuesday the 15th. 
            However if you specify &quot;1W&quot; as the value for day-of-month, and the
            1st is a Saturday, the trigger will fire on Monday the 3rd, as it will not 
            'jump' over the boundary of a month's days.  The 'W' character can only be 
            specified when the day-of-month is a single day, not a range or list of days.
            </p>
            <p>
            The 'L' and 'W' characters can also be combined for the day-of-month 
            expression to yield 'LW', which translates to &quot;last weekday of the 
            month&quot;.
            </p>
            <p>
            The '#' character is allowed for the day-of-week field. This character is
            used to specify &quot;the nth&quot; XXX day of the month. For example, the 
            value of &quot;6#3&quot; in the day-of-week field means the third Friday of 
            the month (day 6 = Friday and &quot;#3&quot; = the 3rd one in the month). 
            Other examples: &quot;2#1&quot; = the first Monday of the month and 
            &quot;4#5&quot; = the fifth Wednesday of the month. Note that if you specify
            &quot;#5&quot; and there is not 5 of the given day-of-week in the month, then
            no firing will occur that month.
            </p>
            <p>
            <!--The 'C' character is allowed for the day-of-month and day-of-week fields.
            This character is short-hand for "calendar". This means values are
            calculated against the associated calendar, if any. If no calendar is
            associated, then it is equivalent to having an all-inclusive calendar. A
            value of "5C" in the day-of-month field means "the first day included by the
            calendar on or after the 5th". A value of "1C" in the day-of-week field
            means "the first day included by the calendar on or after sunday". -->
            </p>
            <p>
            The legal characters and the names of months and days of the week are not
            case sensitive.
            </p>
            <p>
            <b>NOTES:</b>
            <ul>
            <li>Support for specifying both a day-of-week and a day-of-month value is
            not complete (you'll need to use the '?' character in on of these fields).
            </li>
            </ul>
            </p>
            <author>Sharada Jambula</author>
            <author>James House</author>
            <author>Contributions from Mads Henderson</author>
            <author>Refactoring from CronTrigger to CronExpression by Aaron Craven</author>
            </summary>
        </member>
        <member name="M:Quartz.CronExpression.#ctor(System.String)">
            		 /// Constructs a new <code>CronExpression</code> based on the specified 
            		 /// parameter.
            		 /// 
            		 /// @param cronExpression string representation of the cron expression the
            		 ///                       new object should represent
            		 /// @throws java.text.FormatException
            		 ///         if the string expression cannot be parsed into a valid 
            		 ///         <code>CronExpression</code>
        </member>
        <member name="M:Quartz.CronExpression.isSatisfiedBy(System.DateTime)">
            		 /// Indicates whether the given date satisfies the cron expression. Note that
            		 /// milliseconds are ignored, so two Dates falling on different milliseconds
            		 /// of the same second will always have the same result here.
            		 /// 
            		 /// @param date the date to evaluate
            		 /// @return a boolean indicating whether the given date satisfies the cron
            		 ///         expression
        </member>
        <member name="M:Quartz.CronExpression.GetNextValidTimeAfter(System.DateTime)">
            		 /// Returns the next date/time <I>after</I> the given date/time which
            		 /// satisfies the cron expression.
            		 /// 
            		 /// @param date the date/time at which to begin the search for the next valid
            		 ///             date/time
            		 /// @return the next valid date/time
        </member>
        <member name="M:Quartz.CronExpression.GetTimeZone">
            		 /// <p>
            		 /// Returns the time zone for which the <code>cronExpression</code> of
            		 /// this <code>CronTrigger</code> will be resolved.
            		 /// </p>
        </member>
        <member name="M:Quartz.CronExpression.SetTimeZone(System.TimeZone)">
            		 /// <p>
            		 /// Sets the time zone for which the <code>cronExpression</code> of this
            		 /// <code>CronTrigger</code> will be resolved.
            		 /// </p>
        </member>
        <member name="M:Quartz.CronExpression.toString">
            		 /// Returns the string representation of the <code>CronExpression</code>
            		 /// 
            		 /// @return a string representation of the <code>CronExpression</code>
        </member>
        <member name="M:Quartz.CronExpression.isValidExpression(System.String)">
            		 /// Indicates whether the specified cron expression can be parsed into a 
            		 /// valid cron expression
            		 /// 
            		 /// @param cronExpression the expression to evaluate
            		 /// @return a boolean indicating whether the given expression is a valid cron
            		 ///         expression
        </member>
        <member name="M:Quartz.CronExpression.CreateDateTimeWithoutMillis(Nullables.NullableDateTime)">
            <summary>
            Creates the date time without milliseconds.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.SetCalendarHour(System.DateTime,System.Int32)">
            <summary>
            Advance the calendar to the particular hour paying particular attention
            to daylight saving problems.
            </summary>
            <param name="date">The date.</param>
            <param name="hour">The hour.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Collection.CollectionUtil">
            <summary>
            Collection manipulation related utility methods.
            </summary>
        </member>
        <member name="M:Quartz.Collection.CollectionUtil.Remove(System.Collections.IList,System.Object)">
            <summary>
            Removes the specified item from list of items and returns 
            whether removal was success.
            </summary>
            <param name="items">The items to remove from.</param>
            <param name="item">The item to remove.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Spi.IJobFactory">
            <summary> <p>
            A JobFactory is responsible for producing instances of <code>Job</code>
            classes.
            </p>
            
            <p>
            This interface may be of use to those wishing to have their application
            produce <code>Job</code> instances via some special mechanism, such as to
            give the opertunity for dependency injection.
            </p>
            
            </summary>
            <seealso cref="P:Quartz.IScheduler.JobFactory">
            </seealso>
            <seealso cref="T:Quartz.Simpl.SimpleJobFactory">
            </seealso>
            <seealso cref="T:Quartz.Simpl.PropertySettingJobFactory">
            
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.Spi.IJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle)">
            <summary> Called by the scheduler at the time of the trigger firing, in order to
            produce a <code>Job</code> instance on which to call Execute.
            
            <p>
            It should be extremely rare for this method to throw an exception -
            basically only the the case where there is no way at all to instantiate
            and prepare the Job for execution.  When the exception is thrown, the
            Scheduler will move all triggers associated with the Job into the
            <code>Trigger.STATE_ERROR</code> state, which will require human
            intervention (e.g. an application restart after fixing whatever 
            configuration problem led to the issue wih instantiating the Job. 
            </p>
            
            </summary>
            <param name="bundle">
            The TriggerFiredBundle from which the <code>JobDetail</code>
            and other info relating to the trigger firing can be obtained.
            </param>
            <throws>  SchedulerException if there is a problem instantiating the Job. </throws>
            <returns> the newly instantiated Job
            </returns>
        </member>
        <member name="T:Quartz.IInterruptableJob">
            <summary> <p>
            The interface to be implemented by <code>{@link Job}s</code> that provide a 
            mechanism for having their execution interrupted.  It is NOT a requirment
            for jobs to implement this interface - in fact, for most people, none of
            their jobs will.
            </p>
            
            <p>
            The means of actually interrupting the Job must be implemented within the
            <code>Job</code> itself (the <code>interrupt()</code> method of this 
            interface is simply a means for the scheduler to inform the <code>Job</code>
            that a request has been made for it to be interrupted). The mechanism that
            your jobs use to interrupt themselves might vary between implementations.
            However the principle idea in any implementation should be to have the
            body of the job's <code>Execute(..)</code> periodically check some flag to
            see if an interruption has been requested, and if the flag is set, somehow
            abort the performance of the rest of the job's work.  An example of 
            interrupting a job can be found in the java source for the  class 
            <code>Quartz.Examples.Example2.DumbInterruptableJob</code>.  It is legal to use
            some combination of <code>wait()</code> and <code>notify()</code> 
            synchronization within <code>interrupt()</code> and <code>Execute(..)</code>
            in order to have the <code>interrupt()</code> method block until the
            <code>Execute(..)</code> signals that it has noticed the set flag.
            </p>
            
            <p>
            If the Job performs some form of blocking I/O or similar functions, you may
            want to consider having the <code>Job.Execute(..)</code> method store a
            reference to the calling <code>Thread</code> as a member variable.  Then the
            impplementation of this interfaces <code>interrupt()</code> method can call 
            <code>interrupt()</code> on that Thread.   Before attempting this, make
            sure that you fully understand what <code>java.lang.Thread.interrupt()</code> 
            does and doesn't do.  Also make sure that you clear the Job's member 
            reference to the Thread when the Execute(..) method exits (preferrably in a
            <code>finally</code> block.
            </p>
            
            </summary>
            <seealso cref="T:Quartz.IJob">
            </seealso>
            <seealso cref="T:Quartz.IStatefulJob">
            </seealso>
            <author>  James House
            </author>
        </member>
        <member name="M:Quartz.IInterruptableJob.Interrupt">
            <summary> <p>
            Called by the <code>{@link Scheduler}</code> when a user
            interrupts the <code>Job</code>.
            </p>
            
            </summary>
            <returns> void (nothing) if job interrupt is successful.
            </returns>
            <throws>  UnableToInterruptJobException </throws>
            <summary>           if there is an exception while interrupting the job.
            </summary>
        </member>
        <member name="T:Quartz.Core.SchedulingContext">
            <summary>
            An object used to pass information about the 'client' to the <code>QuartzScheduler</code>.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Core.SchedulingContext.InstanceId">
            <summary>
            get the instanceId in the cluster.
            </summary>
            <summary> <p>
            Set the instanceId.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Simpl.PropertySettingJobFactory">
            <summary> A JobFactory that instantiates the Job instance (using the default no-arg
            constructor, or more specifically: <code>class.newInstance()</code>), and
            then attempts to set all values in the <code>JobExecutionContext</code>'s
            <code>JobDataMap</code> onto bean properties of the <code>Job</code>.
            
            </summary>
            <seealso cref="T:Quartz.Spi.IJobFactory">
            </seealso>
            <seealso cref="T:Quartz.Simpl.SimpleJobFactory">
            </seealso>
            <seealso cref="P:Quartz.JobExecutionContext.MergedJobDataMap">
            </seealso>
            <seealso cref="P:Quartz.Simpl.PropertySettingJobFactory.WarnIfPropertyNotFound">
            </seealso>
            <seealso cref="P:Quartz.Simpl.PropertySettingJobFactory.ThrowIfPropertyNotFound">
            
            </seealso>
            <author>James Houser</author>
        </member>
        <member name="T:Quartz.Simpl.SimpleJobFactory">
            <summary> 
            The default JobFactory used by Quartz - simply calls 
            <code>NewInstance()</code> on the job class.
            </summary>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
            <seealso cref="T:Quartz.Simpl.PropertySettingJobFactory"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Simpl.PropertySettingJobFactory.ThrowIfPropertyNotFound">
            <summary> 
            Whether the JobInstantiation should fail and throw and exception if
            a key (name) and value (type) found in the JobDataMap does not 
            correspond to a proptery setter on the Job class.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.PropertySettingJobFactory.WarnIfPropertyNotFound">
            <summary> 
            Get or set whether a warning should be logged if
            a key (name) and value (type) found in the JobDataMap does not 
            correspond to a proptery setter on the Job class.
            </summary>
        </member>
        <member name="T:Quartz.Plugins.History.LoggingJobHistoryPlugin">
            <summary>
             Logs a history of all job executions (and execution vetos) via log4net.
            
            <p>
            The logged message is customizable by setting one of the following message
            properties to a string that conforms to the syntax of <code>java.util.MessageFormat</code>.
            </p>
            
            <p>
            JobToBeFiredMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Job's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Job's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The current time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>String</td>
            <td>The Trigger's name.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>String</td>
            <td>The Triggers's group.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            </table>
            
            The default message text is <i>"Job {1}.{0} fired (by trigger {4}.{3}) at:
            {2, date, HH:mm:ss MM/dd/yyyy}"</i>
            </p>
            
            
            <p>
            JobSuccessMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Job's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Job's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The current time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>String</td>
            <td>The Trigger's name.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>String</td>
            <td>The Triggers's group.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            <tr>
            <td>8</td>
            <td>Object</td>
            <td>The string value (toString() having been called) of the result (if any) 
            that the Job set on the JobExecutionContext, with on it.  "NULL" if no 
            result was set.</td>
            </tr>
            </table>
            
            The default message text is <i>"Job {1}.{0} execution complete at {2, date,
            HH:mm:ss MM/dd/yyyy} and reports: {8}"</i>
            </p>
            
            <p>
            JobFailedMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Job's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Job's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The current time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>String</td>
            <td>The Trigger's name.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>String</td>
            <td>The Triggers's group.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            <tr>
            <td>8</td>
            <td>String</td>
            <td>The message from the thrown JobExecution Exception.
            </td>
            </tr>
            </table>
            
            The default message text is <i>"Job {1}.{0} execution failed at {2, date,
            HH:mm:ss MM/dd/yyyy} and reports: {8}"</i>
            </p>
            
            
            <p>
            JobWasVetoedMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Job's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Job's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The current time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>String</td>
            <td>The Trigger's name.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>String</td>
            <td>The Triggers's group.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            </table>
            
            The default message text is <i>"Job {1}.{0} was vetoed.  It was to be fired 
            (by trigger {4}.{3}) at: {2, date, HH:mm:ss MM/dd/yyyy}"</i>
            </p>
            </summary>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Plugins.History.LoggingJobHistoryPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <code>Scheduler</code> in order to give
            the <code>SchedulerPlugin</code> a chance to initialize.
            </summary>
        </member>
        <member name="M:Quartz.Plugins.History.LoggingJobHistoryPlugin.Shutdown">
            <summary> 
            Called in order to inform the <code>SchedulerPlugin</code> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingJobHistoryPlugin.JobSuccessMessage">
            <summary> 
            Get or sets the message that is logged when a Job successfully completes its 
            execution.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingJobHistoryPlugin.JobFailedMessage">
            <summary> 
            Get or sets the message that is logged when a Job fails its 
            execution.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingJobHistoryPlugin.JobToBeFiredMessage">
            <summary> 
            Gets or sets the message that is logged when a Job is about to Execute.
            </summary>
        </member>
        <member name="P:Quartz.Plugins.History.LoggingJobHistoryPlugin.JobWasVetoedMessage">
            <summary> 
            Gets or sets the message that is logged when a Job execution is vetoed by a
            trigger listener.
            </summary>
        </member>
        <member name="T:Quartz.Job.NativeJob">
            <summary>
            Built in job for executing native executables in a separate process.
            </summary>
            <author>Matthew Payne</author>
            <author>James House</author>
            <author>Steinar Overbeck Cook</author>
        </member>
        <member name="F:Quartz.Job.NativeJob.PROP_COMMAND">
            <summary> Required parameter that specifies the name of the command (executable) 
            to be ran.
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PROP_PARAMETERS">
            <summary> Optional parameter that specifies the parameters to be passed to the
            executed command.
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PROP_WAIT_FOR_PROCESS">
            <summary> Optional parameter (value should be 'true' or 'false') that specifies 
            whether the job should wait for the execution of the native process to 
            complete before it completes.
            
            <p>Defaults to <code>true</code>.</p>  
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PROP_CONSUME_STREAMS">
            <summary> Optional parameter (value should be 'true' or 'false') that specifies 
            whether the spawned process's stdout and stderr streams should be 
            consumed.  If the process creates output, it is possible that it might
            'hang' if the streams are not consumed.
            
            <p>Defaults to <code>false</code>.</p>  
            </summary>
        </member>
        <member name="T:Quartz.Job.NativeJob.StreamConsumer">
            <summary> Consumes data from the given input stream until EOF and prints the data to stdout
            
            </summary>
            <author>  cooste
            </author>
            <author>  jhouse
            </author>
        </member>
        <member name="M:Quartz.Job.NativeJob.StreamConsumer.#ctor(Quartz.Job.NativeJob,System.IO.Stream,System.String)">
            <summary> </summary>
        </member>
        <member name="M:Quartz.Job.NativeJob.StreamConsumer.Run">
            <summary> Runs this object as a separate thread, printing the contents of the InputStream
            supplied during instantiation, to either stdout or stderr
            </summary>
        </member>
        <member name="T:Quartz.JobDataMap">
            <summary>
            Holds state information for <code>Job</code> instances.
            <p>
            <code>JobDataMap</code> instances are stored once when the <code>Job</code>
            is added to a scheduler. They are also re-persisted after every execution of
            <code>StatefulJob</code> instances.
            </p>
            <p>
            <code>JobDataMap</code> instances can also be stored with a 
            <code>Trigger</code>.  This can be useful in the case where you have a Job
            that is stored in the scheduler for regular/repeated use by multiple 
            Triggers, yet with each independent triggering, you want to supply the
            Job with different data inputs.  
            </p>
            <p>
            The <code>JobExecutionContext</code> passed to a Job at execution time 
            also contains a convenience <code>JobDataMap</code> that is the result
            of merging the contents of the trigger's JobDataMap (if any) over the
            Job's JobDataMap (if any).  
            </p>
            </summary>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.IStatefulJob"/>
            <seealso cref="T:Quartz.Trigger"/>
            <seealso cref="T:Quartz.JobExecutionContext"/>
            
            <author>James House</author>
        </member>
        <member name="M:Quartz.JobDataMap.#ctor">
            <summary>
            Create an empty <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.#ctor(System.Collections.IDictionary)">
            <summary> 
            Create a <code>JobDataMap</code> with the given data.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.RemoveTransientData">
            <summary> 
            Nulls-out any data values that are non-Serializable.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAll(System.Collections.IDictionary)">
            <summary>
            Adds the name-value pairs in the given <code>Map</code> to the <code>JobDataMap</code>.
            <p>
            All keys must be <code>String</code>s, and all values must be <code>Serializable</code>.
            </p>
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.Int32)">
            <summary>
            Adds the given <code>int</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.Int64)">
            <summary>
            Adds the given <code>long</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.Single)">
            <summary>
            Adds the given <code>float</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.Double)">
            <summary>
            Adds the given <code>double</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.Boolean)">
            <summary> 
            Adds the given <code>boolean</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.Char)">
            <summary>
            Adds the given <code>char</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.String,System.String)">
            <summary>
            Adds the given <code>String</code> value to the <code>Job</code>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Boolean)">
            <summary>
            Adds the given <code>boolean</code> value as a string version to the
            <code>Job</code>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Char)">
            <summary>
            Adds the given <code>char</code> value as a string version to the
            <code>Job</code>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Double)">
            <summary>
            Adds the given <code>double</code> value as a string version to the
            <code>Job</code>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Single)">
            <summary>
            Adds the given <code>float</code> value as a string version to the
            <code>Job</code>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Int32)">
            <summary>
            Adds the given <code>int</code> value as a string version to the
            <code>Job</code>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Int64)">
            <summary>
            Adds the given <code>long</code> value as a string version to the
            <code>Job</code>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.Put(System.Object,System.Object)">
            <summary>
            Adds the given <code>Serializable</code> object value to the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetInt(System.String)">
            <summary> 
            Retrieve the identified <code>int</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetLong(System.String)">
            <summary>
            Retrieve the identified <code>long</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloat(System.String)">
            <summary>
            Retrieve the identified <code>float</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDouble(System.String)">
            <summary>
            Retrieve the identified <code>double</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBoolean(System.String)">
            <summary> 
            Retrieve the identified <code>boolean</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetChar(System.String)">
            <summary>
            Retrieve the identified <code>char</code> value from the <code>JobDataMap</code>. 
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetString(System.String)">
            <summary>
            Retrieve the identified <code>String</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetIntFromString(System.String)">
            <summary>
            Retrieve the identified <code>int</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetIntValue(System.String)">
            <summary>
            Retrieve the identified <code>int</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetIntegerFromString(System.String)">
            <summary>
            Retrieve the identified <code>int</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBooleanValueFromString(System.String)">
            <summary>
            Retrieve the identified <code>boolean</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBooleanValue(System.String)">
            <summary>
            Retrieve the identified <code>boolean</code> value from the 
            <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBooleanFromString(System.String)">
            <summary>
            Retrieve the identified <code>Boolean</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetCharFromString(System.String)">
            <summary>
            Retrieve the identified <code>char</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDoubleValueFromString(System.String)">
            <summary>
            Retrieve the identified <code>double</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDoubleValue(System.String)">
            <summary>
            Retrieve the identified <code>double</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDoubleFromString(System.String)">
            <summary>
            Retrieve the identified <code>Double</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloatValueFromString(System.String)">
            <summary>
            Retrieve the identified <code>float</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloatValue(System.String)">
            <summary>
            Retrieve the identified <code>float</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloatFromString(System.String)">
            <summary>
            Retrieve the identified <code>Float</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetLongValueFromString(System.String)">
            <summary>
            Retrieve the identified <code>long</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetLongValue(System.String)">
            <summary>
            Retrieve the identified <code>long</code> value from the <code>JobDataMap</code>.
            </summary>
        </member>
        <member name="P:Quartz.JobDataMap.AllowsTransientData">
            <summary> 
            Tell the <code>JobDataMap</code> that it should allow non- <code>Serializable</code>
            data.
            <p>
            If the <code>JobDataMap</code> does contain non- <code>Serializable</code>
            objects, and it belongs to a non-volatile <code>Job</code> that is
            stored in a <code>JobStore</code> that supports persistence, then
            those elements will be nulled-out during persistence.
            </p>
            </summary>
        </member>
        <member name="T:Quartz.Util.PropertiesParser">
            <summary>
            This is an utility class used to parse the properties.
            </summary>
            <author> James House</author>
        </member>
    </members>
</doc>
