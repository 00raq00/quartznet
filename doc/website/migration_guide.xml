<?xml version="1.0"?>
<document>
	<properties>
	    <title>Version Migration Guide</title>
		<showtoc>true</showtoc>
	</properties>
	<body>
		<strong>This document outlines changes needed per version upgrade basis.</strong>
		<section id="from06">
			<title>Upgrading from 0.6 to 0.9</title>
			<section id="utc">
				<title>Quartz.NET now uses UTC times instead of local times</title>
				<p>
					Version 0.9 has a real breaking change behaviour-wise when
					it comes to internal time handling. Quartz.NET will from now
					do all its internal calculations based on UTC times. This
					means that <strong>public API always expects times in UTC
					format</strong>.
				</p>
				<p>
					Most of the change has been reflected to property names,
					they now end if Utc, so StartTime has changed to StartTimeUtc.
					If you had code similar to this before: <br />
					<pre format="cs">
						SimpleTrigger st = new SimpleTrigger();
						st.StartTime = new DateTime(2010, 6, 28, 3, 0, 0);
					</pre>
					It's now written like this:<br />
					<pre format="cs">
						SimpleTrigger st = new SimpleTrigger();
						st.StartTimeUtc = new DateTime(2010, 6, 28, 3, 0, 0).ToUniversalTime();					
					</pre>
					<br />
					<br />
					If you had code similar to this before: <br />
					<pre format="cs">
						Console.WriteLine("Trigger will fire on: " trigger.GetNextFireTime().Value);
					</pre>
					It's now written like this:<br />
					<pre format="cs">
						Console.WriteLine("Trigger will fire on: " trigger.GetNextFireTime().Value.ToLocalTime());
					</pre>
					If you want to show end user the time in local time zone.
					<br />
				</p>
				<p>
					Method parameter names now also have the "Utc" postfix but
					you need to be careful and check all parameters you pass
					to Quartz.NET as parameters cannot be "compile-time-checked"
					when doing the migration.
				</p>
			</section>
			<section id="misfireinstruction">
				<title>Misfire instructions have been refactored out of Triggers</title>
				<p>
					Misfire instructions are now encapsulated within MisfireInstruction
					and its sub-containers.
				</p>
				<p>
					If you had code similar to this before: <br />
					<pre format="cs">
						CronTrigger ct = new CronTrigger();
						st.MisfireInstruction = CronTrigger.MISFIRE_INSTRUCTION_FIRE_ONCE_NOW;
					</pre>
					It's now written like this:<br />
					<pre format="cs">
						CronTrigger ct = new CronTrigger();
						st.MisfireInstruction = MisfireInstruction.CronTrigger.FireOnceNow;
					</pre>
				</p>
			</section>	
			<section id="constants">
				<title>Constants have been renamed to CamelCase instead of ALL_UPPER_CASE</title>
				<p>
					API has been changed to make it more .NET like.
				</p>
				<p>
					If you had code similar to this before: <br />
					<pre format="cs">
						string group = SchedulerConstants.DEFAULT_GROUP;
					</pre>
					It's now written like this:<br />
					<pre format="cs">
						string group = SchedulerConstants.DefaultGroup;
					</pre>
				</p>
				<p>
					This should be an easy fix when done with intellisense.
				</p>
			</section>					
			<section id="earlier">
				<title>Earlier versions</title>
				<p>Earlier versions should be easy enough to migrate as is.</p>
			</section>
		</section>
	</body>
</document>