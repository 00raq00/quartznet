<?xml version="1.0"?>
<document>
<properties>
    <title>Lesson 1</title>
</properties>
<body>
<intro>
</intro>
<section>
<title>Lesson 1: Using Quartz</title>

<p>
Before you can use the scheduler, it needs to be instantiated (who'd have guessed?). 
To do this, you use an implementor of ISchedulerFactory. 
</p>
<p>
Once a scheduler is instantiated, it can be started, placed in stand-by mode, and shutdown.
Note that once a scheduler is shutdown, it cannot be restarted without being re-instantiated. 
Triggers do not fire (jobs do not execute) until the scheduler has been started, nor while it is 
in the paused state.
</p>

<p>
Here's a quick snippet of code, that instantiates and starts a scheduler, and schedules a job for execution:
</p>
<p>
<strong>Using Quartz.NET</strong>
<br />
<pre format="cs">
// construct a scheduler factory
ISchedulerFactory schedFact = new StdSchedulerFactory();

// get a scheduler
IScheduler sched = schedFact.GetScheduler();
sched.Start();

// construct job info
JobDetail jobDetail = new JobDetail("myJob", null, typeof(HelloJob));
// fire every hour
Trigger trigger = TriggerUtils.MakeHourlyTrigger();
// start on the next even hour
trigger.StartTimeUtc = TriggerUtils.GetEvenHourDate(DateTime.UtcNow);  
trigger.Name = "myTrigger";
sched.ScheduleJob(jobDetail, trigger); 
</pre>

</p>
<br />
<p>
As you can see, working with Quartz.NET is rather simple. In <a href="lesson_2.html">Lesson 2</a> we'll give a quick overview of Jobs and Triggers, so that you can more fully understand this example.
</p>
<p>
<a href="lesson_2.html">Lesson 2 &amp;raquo;</a>  
</p>
</section>
</body>
</document>