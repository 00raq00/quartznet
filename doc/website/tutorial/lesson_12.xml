<?xml version="1.0"?>
<document>
<properties>
    <title>Lesson 12</title>
</properties>
<body>
<intro>
</intro>
<section>
<title>Lesson 12: Miscellaneous Features of Quartz</title>

<h2>Plug-Ins</h2>

<p>
Quartz provides an interface (ISchedulerPlugin) for plugging-in additional functionality.
</p>
<p>
Plugins that ship with Quartz to provide various utililty capabilities can be found documented in the Quartz.Plugins namespace. 
They provide functionality such as auto-scheduling of jobs upon scheduler startup, logging a history of job and trigger events, 
and ensuring that the scheduler shuts down cleanly when the virtual machine exits.
</p>

<h2>JobFactory</h2>

<p>
When a trigger fires, the Job it is associated to is instantiated via the JobFactory configured on the Scheduler. 
The default JobFactory simply activates a new instance of the job class. You may want to create your own implementation 
of JobFactory to accomplish things such as having your application's IoC or DI container produce/initialize the job instance.
</p>
<p>
See the IJobFactory interface, and the associated Scheduler.SetJobFactory(fact) method.
</p>

<h2>'Factory-Shipped' Jobs</h2>
<p>
Quartz also provides a number of utility Jobs that you can use in your application for doing things like sending
e-mails and invoking remote objects. These out-of-the-box Jobs can be found documented in the Quartz.Jobs namespace.
</p>

<p>
<a href="lesson_11.html">&amp;laquo; Lesson 11</a> 
</p>
</section>
</body>
</document>	